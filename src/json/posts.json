{"1":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2010-12-22T09:45:32","page_id":"1","page_title":"よくわかんないんですけど","page_tag":["note"],"page_description":"a.k.a initial commit","body":"<p>年末のやたらと忙しい時にドメインをとった。</p>\n<p>短い文字列がいいなと思って、口ぐせの「よくわかんないんですけど」をもじったdskdというのにした。</p>\n<p>そんなに高いサーバーにしたつもりなかったけど最終的にけっこうしたので凹んでいる。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"7":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2011-10-12T19:02:06","page_id":"7","page_title":"img要素にpointer-events:none;を指定する","page_tag":["CSS"],"page_description":"img要素にpointer-events:none;を指定するとどうなるのか","body":"<p>CSS TRICKにpointer-eventsのCSSプロパティを使って、ナビゲーションにあるカレントページのリンクをクリック不能にするデモがあった。</p>\n<p><a href=\"http://css-tricks.com/pointer-events-current-nav/\">http://css-tricks.com/pointer-events-current-nav/</a></p>\n<p>これを見て、このプロパティをimg要素に使ったらどうなるのと思って試してみた。</p>\n<pre><code data-language=\"html\">&lt;img src=\"https://placekitten.com/g/250/250\" alt=\"img tag with pointer-event:none;\" style=\"<mark>pointer-events: none;</mark>\"&gt;</code></pre>\n\n<p><a href=\"/demo/6.html\">pointer-events: none;つきのimg要素</a></p>\n<p>どうやらPC版ブラウザでは画像上での右クリックや画像のD&amp;Dが不可能になるようだ。コンテクストメニューから保存したりブラウザから別タブにD&amp;Dがその画面上からはできない、ということになる。</p>\n<p>もちろんソースを表示して画像のURLを直接参照したり、ブックマークレットなどを使えば画像を保存することはできる。そして当然ながら、CSS3のpointer-eventsプロパティに対応していないブラウザでは無意味。</p>\n<p>さらにスマートフォン版のブラウザではほとんど制限をかけられないようで、たとえばiOSだと長タップで開くコンテクストメニューからの画像保存はできないものの、範囲選択で画像を含めてコピーすれば「メール」アプリなどのドキュメントに画像ごと貼り付けることができた。リッチテキストを扱えるアプリなら多くが可能かもしれない。また、Android 2.3.3の既存ブラウザではコンテクストメニューの内容に制限がかからなかった。このプロパティ自体が無効のようだ。</p>\n<p>画像に直接指定せず、divでワンクッション置いたりするとまた違った挙動なのかもしれないが試していない。</p>\n<p>版権のある写真やイラストを扱う場合、このルールを適用することで権利者の利益を少し守ることができそう。ルールをstyle属性で指定しても外部CSSで指定しても効果は同じなので、PC向けコンテンツで局所的に右クリックを禁止させたい場合にはお手軽な手法かもしれない。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"11":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-04-20T11:55:12","page_id":"11","page_title":"絶対中央配置のCSS","page_tag":["CSS"],"page_description":"上下左右方向で中央揃えにするCSSスニペット","body":"<p><a href=\"http://unformedbuilding.com/articles/firefox-style-center-middle-aligned-css/\">まとりさんが紹介してた</a>、Firefox11で画像が絶対中央配置（上下左右中央揃え）されるCSSが便利そうだったので、仕事でもちょこちょこ使っている。インライン要素でやったらどうなるのと思って試してみたらちょっと面白かった。</p>\n<p><a href=\"/demo/10.html\">インライン要素にpointer-events: none;を指定する</a></p>\n<p>インライン要素に例のルールを指定すると、<code>display: block;</code>をしなくても任意の大きさに表示させられるようになる。</p>\n<p>もっと色々なブラウザで挙動を確認したかったけど、時間的都合でやっていない。詰めが甘い。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"12":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-05-02T16:06:00","page_id":"12","page_title":"絶対中央配置のCSSの続き","page_tag":["CSS"],"page_description":"CSSの絶対中央配置スニペットの検証","body":"<p><a href=\"/archives/11.html\">前記事</a>の<a href=\"/demo/10.html#omk1\">デモのおまけ１</a>で、サイズ指定をしないインライン要素の絶対中央配置で、四辺の値を%指定にすると、ブラウザによって縦方向の位置取りが違うことに気づいたので、せっかくなのでもうちょっと検証してみた。</p>\n<h2 id=\"-\">インライン要素の絶対中央配置</h2>\n<pre title=\"HTML\"><code data-language=\"html\">&lt;div class=\"wrap2\"&gt;\n  &lt;span class=\"target2\"&gt;インライン要素&lt;/span&gt;\n&lt;/div&gt;</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\">.wrap2 {\n  width: 100%;\n  height: 300px;\n  position: relative;\n  overflow: hidden;\n}\n\n.target2 {\n  margin: <mark>-25%</mark>;\n  position: absolute;\n  top: <mark>50%</mark>;\n  bottom: <mark>50%</mark>;\n  left: <mark>50%</mark>;\n  right: <mark>50%</mark>;\n}</code></pre>\n\n<p>span.target2はサイズが固定されていないインライン要素だ。インライン要素でも<code>position:absolute; top:0; bottom:0; left:0; right 0; margin:auto;</code>を指定すると、親要素いっぱいに要素が拡張されてビタビタになるのは前回のデモの通り。で、四辺からの距離を<code>50%</code>とし、その半分の値（25%）を ネガティブマージンで指定すると、たぶん中央になるんじゃないの、と思ってやったのが前回デモのおまけ１の上記スニペット。</p>\n<h2 id=\"-\">ブラウザ別のスクリーンショット</h2>\n<p><a href=\"/img/inline-element-with-pointer-events-none/chrome_thin.png\"><img src=\"/img/inline-element-with-pointer-events-none/chrome_thin.png\" alt=\"Chromeで幅狭い時\" title=\"Google Chrome 18、ブラウザ幅を狭くした場合\"></a></p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/chrome_wide.png\"><img src=\"/img/inline-element-with-pointer-events-none/chrome_wide.png\" alt=\"Chromeで幅広い時\" title=\"Google Chrome 18、ブラウザ幅を広くした場合\"></a></p>\n<p>Google Chromeでは縦方向の位置取りはイメージ通りになっています。.wrap2の上辺と下辺からの距離とspan.target2の高さが<em>25%-50%-25%</em>になっている。</p>\n<p>ところが、Chrome以外のブラウザだと幅が広い時に上下方向の位置取りがおかしくなる。</p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/ff_thin.png\"><img src=\"/img/inline-element-with-pointer-events-none/ff_thin.png\" alt=\"Firefoxで幅狭い時\" title=\"Firefox 12、ブラウザ幅を狭くした場合\"></a></p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/ff_wide.png\"><img src=\"/img/inline-element-with-pointer-events-none/ff_wide.png\" alt=\"Firefoxで幅広い時\" title=\"Firefox 12、ブラウザ幅を広くした場合\"></a></p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/opera_thin.png\"><img src=\"/img/inline-element-with-pointer-events-none/opera_thin.png\" alt=\"Operaで幅狭い時\" title=\"Opera 11.62、ブラウザ幅を狭くした場合\"></a></p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/opera_wide.png\"><img src=\"/img/inline-element-with-pointer-events-none/opera_wide.png\" alt=\"Operaで幅広い時\" title=\"Opera 11.62、ブラウザ幅を広くした場合\"></a></p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/ie9_thin.png\"><img src=\"/img/inline-element-with-pointer-events-none/ie9_thin.png\" alt=\"IE9で幅狭い時\" title=\"Internet Explorer 9、ブラウザ幅を狭くした場合\"></a></p>\n<p><a href=\"/img/inline-element-with-pointer-events-none/ie9_wide.png\"><img src=\"/img/inline-element-with-pointer-events-none/ie9_wide.png\" alt=\"IE9で幅広い時\" title=\"Internet Explorer 9、ブラウザ幅を広くした場合\"></a></p>\n<p>見ての通り、Firefox, Opera, IE9ではブラウザの表示幅が広いと上下方向にもボックスが拡張してしまう。幅が狭い状態から少しずつウィンドウを広げていくと、span.target2は正方形を保って拡縮されるのがわかる。この正方形のレンダリングは何に由来しているだろう？（対応ブラウザでのみ確認）</p>\n<h2 id=\"-\">よくわかんないんですけど</h2>\n<p>個人的にはChromeのレンダリングが自然だと感じる。Chrome以外が同じ表示なので、どっちが仕様にそっているのかよくわからない。とりあえずはサイズを明示しないならインライン要素をこの方法で絶対中央配置にするのはやめたほうがよさそうだ。そもそもインライン要素を絶対中央配置したいニーズがあるのか疑問ではある。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"13":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-05-07T15:21:47","page_id":"13","page_title":"GW","page_tag":["note"],"page_description":"ゴールデンウィークの前半は日光の中禅寺湖畔へ足を運んだ","body":"<p>ゴールデンウィークの前半は日光の中禅寺湖畔へ足を運んだ。</p>\n<p>あそこはまだ春が来ておらず、いろは坂を登ると晩冬の面影が色濃くて、だけども気温は暖かく、なんとなく膨らみはじめた木や花のつぼみがあるにはあったけど、持っていったデジイチをバッグにしまったままにする程度には超早春であった。ツツジは期待していなかったけど、せめて桜は見たかった。仕方がないから葉のない山の写真ばかり撮った。</p>\n<p>ゴールデンウィークの後半は、旧友を呼んだり旧友に呼ばれたりしながら、合間に服を買った。本当は靴を買いたかったのだけど、出かけたら店舗がなくなっていて代わりに服を買っていた。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"14":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-05-21T23:22:47","page_id":"14","page_title":"「終わん寝」の提唱","page_tag":["note"],"page_description":"終わらないから寝るとか","body":"<p><blockquote class=\"twitter-tweet tw-align-center\" lang=\"ja\"><p>「終わん寝」て思いついた。みんな使ってください。</p>&mdash; 越智さん (@o_ti) <a href=\"https://twitter.com/o_ti/status/204577426532081664\" data-datetime=\"2012-05-21T14:20:34+00:00\">5月 21, 2012</a></blockquote></p>\n<script src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>終わらないから寝るとか、終わらないけど寝るとか、終わってないのに気づいたら寝てたとか、そういう意味。</p>\n<p>このエントリは10秒で書いた。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"23":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-11-15T17:38:18","page_id":"23","page_title":":hoverしている要素の直前の要素の指定をCSS4の!符号で妄想した","page_tag":["CSS"],"page_description":"親セレクタ的なやつ","body":"<p><strong>※これは「そうなったらいいなあ、こういうふうにできたら僕は都合がいいなぁ」という妄想であり、CSSの仕様を解説する記事ではありません</strong></p>\n<p>CodePenにあった<a href=\"http://codepen.io/chriscoyier/pen/hgplm\">Stairway Nav</a>というサンプルがFlashぽくて格好よいのだけど、:hoverしてる前の要素の取得にJavaScriptを使っているのを見て、これがCSSだけでできたらいいのにと思った。<a href=\"http://www.w3.org/TR/2012/WD-selectors4-20120823/#overview\">2012/8/23時点のSelector Level 4のWorking Draft</a>でももちろんそんな都合のいいセレクタは存在していない。あったらいいのに。</p>\n<p>ということで妄想してみた。やるとしたら<code>E! &gt; F</code>で「Fを直接の子要素にもつE要素」をスタイリング対象にできるという「!」マークを使う。</p>\n<pre title=\"HTML\"><code data-language=\"html\">&lt;ul&gt;\n  &lt;li&gt;たまご&lt;/li&gt;\n  &lt;li&gt;ごはん&lt;/li&gt;\n  &lt;li&gt;しょうゆ&lt;/li&gt;\n  &lt;li&gt;かつおぶし&lt;/li&gt;\n  &lt;li&gt;食べたい気持ち&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>このようなHTMLがあったとして、</p>\n<pre title=\"CSS\"><code data-language=\"css\">li! + li:hover{...}</code></pre>\n\n<p>このように書けば、「li:hoverを隣接要素に持つli」という解釈になり、見た目として:hoverしているliの直前のliをスタイリング対象にすることができるのではないだろうか。さらに、:hoverの２つ前のliを対象にしたい時はこんな具合か。</p>\n<pre title=\"CSS\"><code data-language=\"css\">li! + li + li:hover{...}</code></pre>\n\n<p>:hoverしたli以前の全てのliを対象にしたい場合はこうか。</p>\n<pre title=\"CSS\"><code data-language=\"css\">li! ~ li:hover{...}</code></pre>\n\n<p>実現できたら素晴らしいが、それにしてもli要素に!マークは視認性が悪すぎる！</p>\n<p>......妄想は以上です。</p>\n<p>ところでこの!マークはなんて呼べばいいのだろう。<a href=\"http://www.w3.org/TR/2012/WD-selectors4-20120823/#subject\">冒頭リンクのWorking Draft</a>だと「Determining the Subject of a Selector」として解説されている。Subjectは英文法SVOのSだから、「セレクターの主部の決定」と訳せる。そうなると「主部決定符号」とか？　なんだかしっくりこない。プロパティを適応する対象を決定するのだから「対象符号」と呼ぶのはどうだろうか。うん、それがいいと思う。</p>\n<p>対象符号は <a href=\"http://www.w3.org/TR/2011/WD-selectors4-20110929/#overview\">2011年のWorking Draft</a>では「$」マークで要素の前に設定されていたけど、「!」に変わり付加位置も要素の後ろに変わった。そのおかげでこんなISSUがあがっている。</p>\n<blockquote>\n<p>Should the exclamation mark be prepended or appended to the subject? Or both? Or prepend two, to avoid the &quot;! = not&quot; issue?</p>\n</blockquote>\n<p>抄訳： !マークは対象要素の前と後ろ、どっちにつける？　前と後ろの両方に付ける？　もしくは、&quot;◯◯でない&quot; という意味にならないように要素の前に２つ付ける？</p>\n<p>要素を!で挟む形になるのも気持ち悪いし、!を２個つけるのも気持ち悪い。</p>\n<pre title=\"CSS\"><code data-language=\"css\"> $E > F {...} /* Old Draft */\n !E > F {...} /* looks like \"!=not\" */\n!E! > F {...} /* OMG */\n!!E > F {...} /* is mean not not-E? */\n E! > F {...} /* Working Draft in 2013-5-2 */</code></pre>\n\n<p>「!=not」はプログラムやる人にはお馴染みのやつで、そう言われればたしかに違和感ある。ちなみにE:notという擬似クラスセレクタはすでにある。</p>\n<p>最初の「$」でいいじゃんと思っていたけど、Sassとの衝突を避けるため別の記号にしたんだっけか。主要な記号はそういったプリプロセッサで使われているから上手いの考えるのが難しそう。かと言って!importantみたいなのは止めて欲しい。<a href=\"http://css-tricks.com/parent-selectors-in-css/\">:parent</a>なんていう書き方を妄想してる人もいた（2010/10/21）。:parentでは隣接セレクタには対応できない。倣うなら<code>:sibling</code>だろうか。つらそう。</p>\n<p>最終的に「Determining the Subject of a Selector」はどんな仕様になるんだろう。早く使いたい。</p>\n<p><ins datetime=\"2013-05-25T13:00+09:00\"><a href=\"http://www.w3.org/TR/2013/WD-selectors4-20130502/#subject\">2013/5/2にSelectors Level 4のWorking Draftが更新され</a>ているが、Determining the Subject of a Selectorについては変更はないようだ。</ins></p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"24":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-11-16T18:00:15","page_id":"24","page_title":"@mediaのorientationはviewportの縦横がどっちが長いかであって、デバイスが縦か横かじゃないですよ","page_tag":["CSS"],"page_description":"@media orientationの注意点","body":"<p>まさかの連日更新という事態に自分で驚いています。昨日が妄想垂れ流しで長かったので、今日は短めに。</p>\n<pre title=\"bodyの背景は何色になるか\"><code data-language=\"css\">body{\n  background: white;\n}\n\n@media (orientation: portrait){\n  body{\n    background: blue;\n  }\n}\n\n@media (orientation: landscape){\n  body{\n    background: red;\n  }\n}</code></pre>\n\n<p>さて、上記のようなCSSを読んだページがあったとしてbodyの背景は何色になるだろうか？</p>\n<p>デスクトップブラウザ（横長画面）では背景はwhite、スマホやタブレットで縦の時は背景がblueで横の時はred、となると思ったら<em>全然違う</em>。&quot;デバイスの向きを判定する&quot; と思われがちな<code>orientation: portrait | landscape</code>は、本当の所はブラウザのviewportが「縦長か横長か」で判定されるメディアクエリーだ。<a href=\"http://www.w3.org/TR/css3-mediaqueries/#orientation\">仕様書でも「デバイスの向き」とは言っていない</a>。だからデスクトップでもネットブックでも、ブラウザのウィンドウを縦長にしてたら背景はblueになるし、横長にしてたらredになる。そして上記の書き方だとCSSのメディアクエリに対応してるブラウザでは背景がwhiteになることはない。</p>\n<p>しかもviewportの縦横が同じピクセルの時は<code>orientation: portrait</code>扱いになる。仕様にも</p>\n<blockquote>\n<p>&#39;portrait&#39; when the value of the &#39;height&#39; media feature is greater than or equal to the value of the &#39;width&#39;</p>\n</blockquote>\n<p>としてちゃんと書いてある。これは portrait で使うアプリでは、ロケーションバーとかツールバーが上下にあってviewportが縦に狭められて正方形になることもあるだろうっていう解釈でそうなってるのだろうか。</p>\n<p><code>orientation: portrait | landscape</code>のCSSメディアクエリはiOS Safariは4.2から、Androidの標準ブラウザで3.0から使えるが、デスクトップブラウザでは<a href=\"http://caniuse.com/#feat=deviceorientation\">かなり早いバージョン（Google Chromeでは7.0から、Firefoxも3.6から）から動作</a>する。</p>\n<p>ということで、orientationで分岐するのはちょっと注意が必要だよ、という話。このメディアクエリーを使って本文エリアの文字サイズを変えているブログがあって、デスクトップで見ているのにいかにもタブレットで表示したサイズ感になっていたのが気になった。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"25":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2012-12-03T10:00:15","page_id":"25","page_title":"CSS Programming HTML5 Template Generator","page_tag":["CSS","Advent Calendar"],"page_description":"CSS Programming","body":"<p>この記事は<a href=\"http://www.adventar.org/calendars/2\">CSS Programming Advent Calendar 2012</a> ３日目のエントリです。</p>\n<p>CSS Programmingという、JSやPHPを使わずにCSSだけでプログラムチックな処理を実装しようとう試みがあります。それをお題に、クリスマスのアドベントカレンダーのように１日ずつネタを書きましょう、というのが CSS Programming Advent Calendar 2012の概要です。CSS Programmingの考え方とか作り方は今回の発起人である<a href=\"http://geckotang.tumblr.com/post/36885315563/1-css-programming-advent-calendar-2012\">げこたんさんが１日目で説明しています</a>のでそちらをどうぞ。</p>\n<p>僕は今までCSS Programmingは作ったことはなかったのですが、年に一度のイベントなので力試しも兼ねて作ってみました。</p>\n<p>Advent Calendar ３日目のこのエントリではウェブに腐るほど転がっている「HTMLテンプレートジェネレーター」をCSS Programming化したものを紹介します。デモを作成したので、以下からどうぞ。</p>\n<p><a href=\"http://lab.dskd.jp/cphtg/\">CSS Programming HTML5 Template Generator</a></p>\n<p>......とまぁこんな感じで一応できました。どの要素がどういう役目で、どの属性を付けるとどうなるのとかの説明は省かせてください。</p>\n<p>head内の要素に改行を入れてそれっぽくグルーピングするオプションもつけようかと思ったのですが、<code>:checked</code>と<code>:not(:checked)</code>の組み合わせ地獄だったので諦めました。その代わりと言ってはなんですが、インデントのオプションを付けてあります。</p>\n<p>ネタを説明するほど複雑な作りはなくて、生成してるように見える要素は予め全部書いて<code>dipslay: none;</code>で隠してあるものを<code>:checked</code>の擬似属性指定で<code>display: inline;</code>にしてるだけです。一般的にスタイルシートは要素の親子関係性で対象をより絞り込んで装飾しますが、間接セレクタを使って離れた位置にマークアップした要素と関連付けてます。チェックに使うinput要素も<code>display: none;</code>で隠していますが、label要素にfor属性をつけているので見えてなくても動作します。label要素は文字列を入れられるのでボタンにしやすいですね。</p>\n<p>これを製作中、クラス名やID名を変更したり非効率なことが何回かありました。通常のウェブ製作でもそうですが、作りたいものがどの程度の規模であるかを正確に把握し、追加や変更が起きても吸収できる命名即やスタイルを用意しておくことが、スピードアップのコツですね。自分は仕事ではスピードを要求されることが多いので、図らずもその大事さを再確認することができてよかったと思いました。</p>\n<p>次があるならもうちょっと遊びがいのある楽しいものを作りたいですね。４日目は<a href=\"http://tenderfeel.xsrv.jp/\">WebTecNote</a>の<a href=\"https://twitter.com/Tenderfeel\">@Tenderfeel</a>さんです。よろしくお願いします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"27":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-02-13T17:30:00","page_id":"27","page_title":"次へ前ヘのボタンのどっちがどっちなのか試させないデザイン","page_tag":["note"],"page_cover":"/img/stated-slider/03.png","page_description":"予想しにくいデザインはいやずら","body":"<p>たまにはデザインのことを。</p>\n<p>ネットしてるとフォトギャラリーがスライドで作られているのをよく見る。写真だけでなくアイコンとテキストなど、フィーチャーコンテンツへのリンク集なんかをコンパクトなスライドにして実装されているものもわりとよく目にする。あれ系のUIで、前後へスライドするボタンのどっちを押すとどっちに動くのかって、パッと見ですぐにはわからないことが多い。</p>\n<p>以下のような感じのスライダーでよく起こる。</p>\n<p><a href=\"/img/stated-slider/01.png\" title=\"［２］のコンテンツを見たいとき、どっちのボタンを押せばいい？\"><img src=\"/img/stated-slider/01.png\" alt=\"迷うボタン\"></a></p>\n<p>初期状態で左右がクリッカブルだととにかく迷う。なので以下のようにして欲しい。</p>\n<p><a href=\"/img/stated-slider/02.png\" title=\"機能しない方のボタンをdisableなデザインにする\"><img src=\"/img/stated-slider/02.png\" alt=\"迷わないボタン１\"></a></p>\n<p>機能するボタンとくらべて半透明にしたりグレーアウトしたりしてコントラストを下げる。これならボタンが機能はあるけど動作は現状しないというのがわかる。</p>\n<p><a href=\"/img/stated-slider/04.png\" title=\"機能しない方のボタンをdisableなデザインにする２\"><img src=\"/img/stated-slider/04.png\" alt=\"迷わないボタン２\"></a></p>\n<p>［３］まで行ったらdisableとenableが切り替わる。</p>\n<p><a href=\"/img/stated-slider/03.png\" title=\"enable ならコントラストは同じにする\"><img src=\"/img/stated-slider/03.png\" alt=\"両方のボタンがenableになっている\"></a></p>\n<p>［２］にフォーカスすると左側のボタンがenableになるので、当然こう変わるようにする。初期表示はスライダーの前後にコンテンツがあるような状態からはじめなければ、操作の文脈でどっちのボタンでどっちにスライドされるのかは覚えていられる。</p>\n<p>ボタンに活性か不活性かの状態を持たせるのはどんどんやっていきたい。</p>\n<hr>\n<p>画像には<a href=\"http://com4t-fff.seesaa.net/article/248838684.html\">片山英樹氏作のフォント「COM4t Rouder Regular」</a>を使わせてもらった。素敵なフォント！</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"29":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-05-14T09:50:00","page_id":"29","page_title":"画像サイズに依存しない絶対中央配置","page_tag":["CSS"],"page_description":"上下左右の中央揃えは人類の欲望","body":"<p>ウェブページ作ってると画像を画面の中央に配置したいし、どんなサイズの画像が来ても真ん中にしたいし、どんなサイズの画面で見ても画像をはみ出させずに表示させたい欲求はよく出てくる。これってもはや人類の欲望と言っても過言ではない。</p>\n<h2 id=\"-\">要件</h2>\n<ul>\n<li>画像を縦方向にも横方向にも画面の中央に配置したい</li>\n<li>画像のサイズに依存したくない</li>\n<li>ウィンドウサイズが画像サイズより小さくなっても画像がはみ出ない</li>\n</ul>\n<p>この人類の欲望ををCSSで書くと、こう。</p>\n<pre title=\"人類の欲望を満たしたHMTL\"><code data-language=\"html\">&lt;body&gt;\n  &lt;img src=\"image.jpg\" /&gt;\n&lt;/body&gt;</code></pre>\n\n<pre title=\"人類の欲望を満たしたCSS\"><code data-language=\"css\">img{\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  <mark>max-width: 100%;</mark>\n  <mark>max-height: 100%;</mark>\n}</code></pre>\n\n<p><a href=\"/archives/11.html\">前のエントリ</a>で書いたスニペット（Firefoxで画像を直接見る時のUAスタイル）に、<code>max-width: 100%;</code>と<code>max-height: 100%;</code>を加えただけ。デモで欲望を満たせる。</p>\n<p><a href=\"/demo/31.html\">人類の欲望を満たしたデモ</a></p>\n<p>対応ブラウザはIE8, Chrome 26, Firefox 20, Opera 12.14です。</p>\n<p>IE8以上でも縦方向も中央配置するなら<code>display: table;</code>でいけるんじゃないかと思うところけど、３つめの要件「ウィンドウサイズが画像サイズより小さくなっても画像がはみ出ない」が完全には満たせない。タイトルで「画像サイズに依存しない絶対中央配置」なんて言っておいて、それ以上のことも要求する。人類の欲望は果てしないのだ。</p>\n<pre title=\"display: table;では人類の欲望を満たせない\"><code data-language=\"css\">html{\n  display: table;\n  width: 100%;\n  height: 100%;\n}\n\nbody{\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n}\n\nimg{\n  max-width: 100%;\n  max-height: 100%;\n}</code></pre>\n\n<p><a href=\"/demo/32.html\">人類の欲望を満たせないデモ</a></p>\n<p>各ブラウザでアホかってくらいウィンドウサイズを小さくすると画像がはみ出てしまう（不思議なことに、Chrome 26だとdisplay: table;でも横方向の縮小表示がほんの少しだけ効く）。ウィンドウはそんなに小さくしないのが常識人だけど、画像がとても大きい場合は画像サイズ＞画面サイズ になるシチュエーションもありえなくない、ということで。</p>\n<p>ただし、親要素に<code>absolute: relative;</code>を指定できないとか、子要素にimg以外に兄弟要素がある場合はこのスニペットは向かないので、あとはJSでがんばろう。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"34":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-02T01:15:16","page_id":"34","page_title":"CSSの命名規則にBEMを取り入れてみる","page_tag":["Advent Calendar","BEM","CSS","HTML"],"page_description":"BEM始めました","body":"<p>今年もあと一月ということでブログをリデザインしました。ということでこの記事は<a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> １日目のエントリです。日付過ぎてしまいましたね。</p>\n<h2 id=\"bem-\">BEMって何？</h2>\n<p>BEMとはBlock, Element, Modifierの頭文字をとったもので、フロントエンド設計において命名規則やモジュールの管理に前述の３種類の区分を取り入れたものを言います。今回はタイトルにもある通り、CSSの命名規則に BEM を取り入れてみるということで、BEMなCSSについて記載します。</p>\n<h2 id=\"bem-\">BEMるとどういう良いことがあるの？</h2>\n<p>いろんな人がすでに書いているので別エントリを参考になさってください。あるいは、今回のAdvent Calendarに参加した方のエントリも参考になるかと思います。</p>\n<ul>\n<li><a href=\"http://hail2u.net/blog/webdesign/sass-and-bem.html\">SassとBEM - Weblog - Hail2u.net</a></li>\n<li><a href=\"http://blog.ruedap.com/2013/10/29/block-element-modifier\">BEMという命名規則とSass 3.3の新しい記法 - アインシュタインの電話番号</a></li>\n<li><a href=\"https://app.codegrid.net/entry/bem-basic-1\">BEMによるフロントエンドの設計 - 基本概念とルール | CodeGrid</a>（有料記事）</li>\n</ul>\n<h2 id=\"-bem-css-\">なんとかBEMなCSSを書いた</h2>\n<p>ブログのリニューアルに合わせてBEMなCSSを書きました。書いたけど、難しかったです。構造が深くなった時、Blockはどこまで保持するのか、Elementにするのかしないのか、マルチクラスはどこまで許容するのか......。</p>\n<p>デザイン上の制約というかやりたいことの実現のために、<code>.layout--horizon</code>というBlockを作ってしまったので自分で見るのがつらいです。さらにHTML側にも規則を作って、<code>.layout--horizon__item &gt; [class*=&quot;-header__item&quot;]</code>なんてCSSも書いてしまう始末。もう二度つらい。詳しくはソースをご覧いただければと思います。</p>\n<h2 id=\"bem-\">BEM道</h2>\n<p>命名規則にBEMストレートなセレクタを作るためにはHTML側を制約する場合もあるかもしれません。BEMのコアである「BEMツリー = DOMツリー」に則れば、BEMツリーを見てDOMを推察できなければそれは命名の仕方が良くないということになります。BEMで説明できないことはHTML側にあってはならない。それがBEM道なのかもしれません。</p>\n<h2 id=\"-\">そんなにうまくいくわけがない</h2>\n<p>前述した通り、BEMで難しいのはElementの取り方です。すんなり書けるのは２階層までで、３階層になると迷いが出ます。Blockを入れ子にしていくのか、Elementをつないでいくのか、やるなら統一しなければ BEM道ではない（部分的にルールが変わると厳格さが失われ、メンテナブルとは言えない）ですね。あるいはElement-blockというような「内包ブロック」なものをつないで、結果<code>.Block__Element-block2__Element2-block3__Element3--Modifier</code>のようなセレクタを受け入れるのか......。</p>\n<h2 id=\"bem-\">BEM道を進むために必要なたった１つのこと</h2>\n<p>「スタイルを管理しようとすると発狂するので、DOMツリーを説明することだけ考えること」</p>\n<hr>\n<p>２日目はげこたんさん<del>です</del>が<a href=\"http://geckotang.tumblr.com/post/68662389684/bem\">すでに書いてました</a>！</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"35":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-02T16:25:55","page_id":"35","page_title":"もっと広まって欲しいCSS","page_tag":["Advent Calendar","CSS"],"page_description":"TRBLメソッドについて","body":"<p><a href=\"http://www.adventar.org/calendars/57\">CSS Property Advent Calendar 2013</a> ２日目のエントリです。</p>\n<p>何度も同じことを書いているのでいいかげんにしろっていう感じがしますが、僕がこの１年半くらいで「なぜ使われないのだ！ もっと広まってくれ！」と思っているCSSについて記載します。</p>\n<h2 id=\"position-absolute-\">position: absolute; を使った絶対中央配置</h2>\n<p>ある要素を包含ブロックのど真ん中に置きたい時はとにかく<code>position: absolute;</code>を使った絶対中央配置が便利です。大まかな書き方は親要素に<code>position: relative;</code>を指定したのち、配置したい子要素に対して下記を適応するというものです。</p>\n<pre ><code data-language=\"css\">.child {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  width: ***;\n  height: ***;\n}</code></pre>\n\n<p><code>width</code>, <code>height</code>については必ず大きさを指定してください。指定なしでもいけるのは絶対中央配置したい要素がimgの時だけです。画像のサイズに依存しない方法や、<code>margin</code>にネガティブ値を指定した時の挙動などは下記エントリにまとめています。</p>\n<ul>\n<li><a href=\"/archives/11.html\">絶対中央配置のCSS</a></li>\n<li><a href=\"/archives/12.html\">絶対中央配置のCSSの続き</a></li>\n<li><a href=\"/archives/29.html\">画像サイズに依存しない絶対中央配置</a></li>\n</ul>\n<p>このルールセットは  Firefox 11、Google Chrome 18、Opera 11.62、Internet Explorer 8から対応しています。</p>\n<h2 id=\"-\">絶対中央配置の応用</h2>\n<p>特に上下の中央配置が便利な上記 CSS ですが、左右に関しては中央ではなくてもいいという場面もあるかと思います。そんな時でももちろん簡単な変更で対応可能です。</p>\n<p>例えば、上下は中央、右から 5px だけずらしたい時。</p>\n<pre><code data-language=\"css\">.child2 {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n\n  <mark>right: 5px;</mark>\n  margin: auto;\n  width: ***;\n  height: ***;\n}</code></pre>\n\n<p>この様に書けば良いです。左から 10px ずらしたいなら、上記ルールセットから<code>right: 5px;</code>を消して、<code>left: 10px;</code>を加えればOKです。左右中央で<code>bottom: 10px;</code>ももちろん出来ます。topからいくつずらしたい、とかは普通に<code>text-align: center;</code>と<code>margin-top</code>でやった方が簡単なので絶対中央配置の応用でやることはないと思いますが、まぁそれもできます。</p>\n<h2 id=\"-\">どんな時に使う？</h2>\n<p><img src=\"/img/lets-trbl-method/linklist.png\" alt=\"リンクリストのサンプル画像\" title=\"リンクリストの disclosure アイコン\"></p>\n<p>リンクリストが２行取りになって高さが変わっても安心！　ただし画像を使っているなら background でやる方が圧倒的に楽。パフォーマンスを追求してアイコンを div 図形にした場合などは今回のテクニックが有効。</p>\n<p><img src=\"/img/lets-trbl-method/bubble.png\" alt=\"吹き出しのサンプル画像\" title=\"吹き出しのカラス口\"></p>\n<p>吹き出しの大きさが変わってもカラス口の配置は常に中央にできる。</p>\n<p><img src=\"/img/lets-trbl-method/inline.png\" alt=\"入力エリアのようなもののサンプル画像\" title=\"なんかの UI のなんかのボタン\"></p>\n<p><img src=\"/img/lets-trbl-method/slider.png\" alt=\"入力エリアのようなもののサンプル画像\" title=\"汎用的なコントローラー\"></p>\n<p>高さが固定だったとしても、とにかく考えるのが面倒な時にも効果を発揮する</p>\n<p>ということで、もっと広まって欲しい CSS でした。</p>\n<p>Special Thanks! <a href=\"http://unformedbuilding.com/articles/firefox-style-center-middle-aligned-css/\">Firefox で使われている上下左右中央配置のスタイルシート | Unformed Building</a> by @ub_pnr</p>\n<hr>\n<p>position と四辺からの 0 値指定 を使った絶対中央配置、なんか呼び名はないかと思って探していたら、<a href=\"http://css-tricks.com/centering-percentage-widthheight-elements/#comment-478226\">CSS TRICKSのコメント欄に &quot;TRBL&quot; methodというフレーズがありました</a>。top, right, bottom, left の頭文字でTRBLでしょうか。もし他の呼び名を知っている方がいたら<a href=\"https://twitter.com/o_ti\">教えて</a>いただければと思います。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"36":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-04T09:54:00","page_id":"36","page_title":"ブログを初めてBEM化した時の流れ","page_tag":["Advent Calendar","BEM","CSS","HTML"],"page_description":"BEM神の声が聞こえているか","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> ４日目のエントリです。前回の記事があまりBEMれてないというBEM神の声を聞いたので、当ブログをBEM化した時の流れを書いていきます。</p>\n<p>まずはデザインを決めないとねということで、シングルカラムを継承しつつ、以前より色を明るくしてコントラストも抑えてみました。カラースキームなどは深く考えていないので<code>:visited</code>にピンク系とか<code>:hover</code>に黄緑とか唐突に出てきます。センスなくてつらい。</p>\n<h2 id=\"block-\">Blockを決める</h2>\n<p>デザインを決めたあと、まずBEMにおけるBlockとなるエリアを考えます。</p>\n<ul>\n<li>ヘッダー</li>\n<li>記事リスト</li>\n<li>ページャー</li>\n<li>アーカイブス</li>\n<li>カテゴリー</li>\n<li>オーサー</li>\n<li>コピーライト</li>\n</ul>\n<p>デザインはシングルカラムのスタック構造なのでここは簡単でした。dskd.jpは検索フォームやメニューなんていう便利なものはないです。一般的なサイトですと、</p>\n<ul>\n<li>検索フォーム</li>\n<li>メニュー</li>\n<li>サブメニュー</li>\n<li>左カラム</li>\n<li>右ラム</li>\n<li>ソーシャルツール</li>\n<li>レコメンド</li>\n<li>ランキング</li>\n<li>フィードバック</li>\n<li>広告</li>\n<li>フッター</li>\n</ul>\n<p>などいろいろなBlockが考えられます。いずれにしてもトップレベルBlockを作るだけならさほど難しくありません。この時点では「BEM余裕じゃね？」て思っていたのですがそんなに甘くはありませんでした。</p>\n<h2 id=\"element-\">Elementを決める</h2>\n<p>Blockの次はElementです。</p>\n<ul>\n<li>ヘッダー<ul>\n<li>ロゴ</li>\n</ul>\n</li>\n<li>記事リスト<ul>\n<li>記事<ul>\n<li>タイトル</li>\n<li>日付</li>\n<li>カテゴリ</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ページャー<ul>\n<li>ラベル</li>\n<li>ページリスト</li>\n<li>ページリンク</li>\n</ul>\n</li>\n<li>カテゴリー<ul>\n<li>ラベル</li>\n<li>カテゴリーリスト<ul>\n<li>カテゴリーリンク</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>オーサー<ul>\n<li>ラベル</li>\n<li>名前</li>\n<li>メアド</li>\n<li>アカウントリスト<ul>\n<li>アカウントリンク</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>コピーライト<ul>\n<li>ラベル</li>\n<li>記載</li>\n</ul>\n</li>\n</ul>\n<p>普通ですね。一旦、クラス名を考えて行きます。</p>\n<ul>\n<li>ヘッダー：<code>header</code><ul>\n<li>ロゴ：<code>header__logo</code></li>\n</ul>\n</li>\n<li>記事リスト：<code>article</code><ul>\n<li>記事：<code>article__item</code><ul>\n<li>タイトル：<code>article__item__title</code></li>\n<li>日付：<code>article__item__pubtime</code></li>\n<li>カテゴリ：<code>article__item__category</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ページャー：<code>pager</code><ul>\n<li>ラベル：<code>pager__head</code></li>\n<li>ページリスト：<code>pager__list</code><ul>\n<li>ページリンク：<code>pager__list__item</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>カテゴリー：<code>category</code><ul>\n<li>ラベル：<code>category__head</code></li>\n<li>カテゴリーリスト：<code>category__list</code><ul>\n<li>カテゴリーリンク：<code>category__list__item</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>オーサー：<code>author</code><ul>\n<li>ラベル：<code>author__head</code></li>\n<li>名前：<code>author__name</code></li>\n<li>メアド：<code>author__mail</code></li>\n<li>アカウントリスト：<code>author__account</code><ul>\n<li>アカウントリンク：<code>author__account__item</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>コピーライト：<code>credit</code><ul>\n<li>ラベル：<code>credit__head</code></li>\n<li>記載：<code>credit__item</code></li>\n</ul>\n</li>\n</ul>\n<p>とりあえずクラスを振り終えたましたが、階層を２つ潜った時に Block<strong>Element</strong>Element となっているのがムズムズします。しかし歯ぎしりするにはまだ早い。次はマークアップへ移りましょう。</p>\n<h2 id=\"-\">とりあえずマークアップでデザインを完成させる。</h2>\n<p>デザインを反映させて<code>&lt;body&gt;</code>内を<a href=\"/misc/getting-start-bem/planemarkup.txt\">クラスなしでマークアップしたものはこちら</a>です。</p>\n<p>前述で準備しておいたElementとは構造がかなり違いますね。デザインの制約もあるので当たり前ですね。コンテンツ構造だけではBEMれないのがBEMの歯ぎしりポイントでもあります。特に記事リストではセマンティック要素を多用しているせいもあり、カテゴリーリンクは６階層も潜ってしまっています。</p>\n<p>記事リストBlockを抜粋してみます。</p>\n<pre><code data-language=\"html\">&lt;div&gt;\n  &lt;article&gt;\n    &lt;header&gt;\n      &lt;h2&gt;記事見出し&lt;/a&gt;&lt;/h2&gt;\n    &lt;/header&gt;\n    &lt;footer&gt;\n      &lt;time&gt;0000/00/00&lt;br&gt;00:00&lt;/time&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;category :&lt;/dt&gt;\n        &lt;dd&gt;\n          &lt;a href=\"\"&gt;cate name&lt;/a&gt;, &lt;a href=\"\"&gt;cate name&lt;/a&gt;\n        &lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/footer&gt;\n  &lt;/article&gt;\n  :\n  :\n&lt;/div&gt;</code></pre>\n\n<p>これら全てをBEMツリーで説明できるようにしようと考えると、発狂しそうになりますね。</p>\n<p>いろいろ考えた結果、こうしました。</p>\n<pre><code data-language=\"html\">&lt;div class=\"article\"&gt;\n  &lt;article class=\"article__item\"&gt;\n    &lt;header class=\"article-header\"&gt;\n      &lt;h2 class=\"article-header__item\"&gt;記事見出し&lt;/a&gt;&lt;/h2&gt;\n    &lt;/header&gt;\n    &lt;footer class=\"article-footer\"&gt;\n      &lt;time class=\"article-footer__pubtime\"&gt;0000/00/00&lt;br&gt;00:00&lt;/time&gt;\n      &lt;dl class=\"article-footer__categories\"&gt;\n        &lt;dt class=\"article-footer__categories-title\"&gt;category :&lt;/dt&gt;\n        &lt;dd class=\"article-footer__categories-item\"&gt;\n          &lt;a href=\"\"&gt;cate name&lt;/a&gt;, &lt;a href=\"\"&gt;cate name&lt;/a&gt;\n        &lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/footer&gt;\n  &lt;/article&gt;\n  :\n  :\n&lt;/div&gt;</code></pre>\n\n<p><code>&amp;lt;header&amp;gt;</code>と<code>&amp;lt;footer&amp;gt;</code>を<code>.article-header</code>,<code>.article-footer</code>としました。Block<strong>Element</strong>Elementをやめ、Block &gt; Block__ElementのようにElementの上は必ず Block とするようにしました。</p>\n<p>このようなルールを適応してもいいのか、少し疑問が残っています。というのも、<code>.article-header__item</code>だけ抜き出した時、<code>.article-header</code>という親要素と子要素である<code>__item</code>があることは説明できますが、<code>.article-header</code>の親に<code>.article</code>があるかどうかは説明できないように思うからです。しかし、<code>.article</code>内のBlockは<code>.article-</code>だよという接頭句を作ったと見れば、少なくともそのマークアップ構造が守られている間はBEM道を歩いていると言えるのではないでしょうか。試しにクラス名だけ抜き出してみます。</p>\n<pre><code data-language=\"css\">.article\n.article__item\n.article-header\n.article-header__item\n.article-footer\n.article-footer__pubtime\n.article-footer__categories\n.article-footer__categories-title\n.article-footer__categories-item</code></pre>\n\n<p>そんなに悪い感じはしないように思います。長くなってしまったので続きは明後日に！</p>\n<hr>\n<p>５日目は<a href=\"http://www.adventar.org/users/2\">げこたん</a>さん（２日ぶり２度目）です。よろしくお願いします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"37":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-04T11:15:00","page_id":"37","page_title":"内包要素の数が変動しても僕には擬似クラスと間接セレクタがある","page_tag":["Advent Calendar","CSS"],"page_description":"CSSの数量クエリで対象を限定する","body":"<p><a href=\"http://www.adventar.org/calendars/57\">CSS Property Advent Calendar 2013</a> ４日目のエントリです。</p>\n<p>昨日、げこたんさんに BEM Advent Calendar を手伝ってもらったら、</p>\n<p><blockquote class=\"twitter-tweet\" lang=\"ja\"><p>おや？プロパティの方に恩返しがありませんね？</p>&mdash; げこたん (@GeckoTang) <a href=\"https://twitter.com/GeckoTang/statuses/407367908268834816\">2013, 12月 2</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>と言われてしまったので２回目を登録しました。</p>\n<h2 id=\"-\">要件</h2>\n<p>「データがある時はリンクを出したい」などのニーズで内包要素の数がページによって増えたり減ったりすること、けっこうありますよね。それが普通のテキストリンクではなくタブだとかサムネだとかでレイアウトにも関わるとき、要素の数によってスタイルを切り分けなきゃいけないわけですが、タブが２つの時には<code>.tabs2</code>。５つの時には<code>.tabs5</code>とかいちいちクラス付与させるのも面倒くさいわけです。</p>\n<p>どういうことかというと、このようなHTMLがあったとして、</p>\n<pre title=\"HTML\"><code data-language=\"html\">&lt;div class=\"tabs\"&gt;\n  &lt;a class=\"tabs__item\"&gt;タブ１&lt;/a&gt;\n  &lt;a class=\"tabs__item\"&gt;タブ２&lt;/a&gt;\n  &lt;a class=\"tabs__item\"&gt;タブ３&lt;/a&gt;\n&lt;/div&gt;</code></pre>\n\n<p><code>.tabs__item</code>がページによっては２つだったり５つだったりする時、という想定です。図示すると以下のような感じです。</p>\n<p><img src=\"/img/multiple-tabs/01.png\" alt=\"タブの数が異なるけど親要素内に収まるようにしたい\" title=\"タブの数が異なるけど幅はそれぞれ親要素内に収まるようにしたい\"></p>\n<p>親の<code>.tabs</code>は幅が決まっていて、操作性を考えて<code>.tabs__item</code>の大きさは常にいっぱいまで広げておきたいな〜とかいう時、擬似クラスと間接セレクタを使うと内包要素の数ごとにクラスを作らなくて済むようになります。</p>\n<h2 id=\"-\">擬似クラスと間接セレクタの合わせ技</h2>\n<pre title=\"CSS\"><code data-language=\"css\">.tabs{\n  box-sizing: border-box;\n  padding: 0 10px;\n  width: 320px;\n}\n\n.tabs__item{\n  box-sizing: border-box;\n}\n\n/* 2 tab */\n.tabs .tabs__item:first-child<mark>:nth-last-child(2)</mark>,\n.tabs .tabs__item:first-child<mark>:nth-last-child(2)</mark> <mark>~</mark> .tabs__item {\n  width: 50%;\n}\n\n/* 3 tab */\n.tabs .tabs__item:first-child<mark>:nth-last-child(3)</mark>,\n.tabs .tabs__item:first-child<mark>:nth-last-child(3)</mark> <mark>~</mark> .tabs__item {\n  width: 33.3%;\n}\n\n/* 4 tab */\n.tabs .tabs__item:first-child<mark>:nth-last-child(4)</mark>,\n.tabs .tabs__item:first-child<mark>:nth-last-child(4)</mark> <mark>~</mark> .tabs__item {\n  width: 25%;\n}\n\n/* 5 tab */\n.tabs .tabs__item:first-child<mark>:nth-last-child(5)</mark>,\n.tabs .tabs__item:first-child<mark>:nth-last-child(5)</mark> <mark>~</mark> .tabs__item {\n  width: 20%;\n}</code></pre>\n\n<p>ミソは<code>:first-child:nth-last-child(n)</code>の部分です。<code>:first-child</code>は「最初の子要素」という意味ですね。<code>:nth-last-child(n)</code>は「最後からｎ番目の子要素」という意味です。<code>:nth-last-child(n)</code>は、たとえば子要素が全部で３つあった時、最初の子要素が<code>:nth-last-child(3)</code>、二番目の子要素が<code>:nth-last-child(2)</code>、三番目の子要素は<code>:nth-last-child(1)</code>となっていきます。先のHTMLで言うと、</p>\n<pre title=\"HTML\"><code data-language=\"html\">&lt;div class=\"tabs\"&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(3)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(2)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(1)&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<p>こうですね。<code>.tabs__item</code>が５つの時は</p>\n<pre title=\"HTML\"><code data-language=\"html\">&lt;div class=\"tabs\"&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(5)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(4)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(3)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(2)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(1)&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<p>こういうことになります。で、これに<code>:first-child</code>を重ねるとどうなるかというと、<code>:first-child</code>は子要素の数にかかわらず１番目にマッチするので</p>\n<pre title=\"HTML\"><code data-language=\"html\">&lt;div class=\"tabs\"&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(3)<mark>:first-child</mark>&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(2)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(1)&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"tabs\"&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(5)<mark>:first-child</mark>&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(4)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(3)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(2)&lt;/div&gt;\n  &lt;div class=\"tabs__item\"&gt;:nth-last-child(1)&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<p>ということになります。擬似クラスの組み合わせで子要素の数に応じてスタイルを切り分けることができました。</p>\n<p>しかし、<code>.tabs .tabs__item:first-child:nth-last-child(5)</code>と指定しただけでは<code>.tabs__item</code>が５つのときの最初の要素にしかスタイルが適応されません。そこで間接セレクタ<code>~</code>を使います。</p>\n<p>例えば<code>.box1 ~ .box2{...}</code>とすると、<code>.box1</code>と兄弟関係にある弟要素の<code>.box2</code>がスタイル適用対象となります。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.box1 ~ .box2{\n  background: tomato;\n}</code></pre>\n\n<pre title=\"HTML\"><code data-language=\"html\">&lt;div class=\"box2\"&gt;テキスート.box2&lt;/div&gt;\n&lt;div class=\"box1\"&gt;テキスート.box1&lt;/div&gt;\n<mark>&lt;div class=\"box2\"&gt;テキスート.box2&lt;/div&gt;</mark>\n<mark>&lt;div class=\"box2\"&gt;テキスート.box2&lt;/div&gt;</mark>\n&lt;div class=\"heading\"&gt;ヘッディーン.heading&lt;/div&gt;\n<mark>&lt;div class=\"box2\"&gt;テキスート.box2&lt;/div&gt;</mark></code></pre>\n\n<p>上記のようなHTMLの場合、３行目の<code>.box2</code>からが適応対象です。１行目の<code>.box2</code>は<code>.box1</code>の兄弟関係にありますが、<code>.box1</code>より先に記述されており弟要素でないのでスタイル適応外となります。また、途中に<code>.heading</code>が挟まっていすが、そのあとに出てくる<code>.box2</code>は先の<code>.box1</code>の弟要素なのでスタイルは適応されます。<a href=\"http://codepen.io/anon/pen/FHbGe\">CodePen</a>にデモを置いたので参考にどうぞ。</p>\n<h2 id=\"-\">間接セレクタで間にある兄弟要素をカバーしたら勝ったも同然</h2>\n<p><code>.tabs</code>のHTMLに戻りましょう。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.tabs .tabs__item:first-child:nth-last-child(5) ~ .tabs__item</code></pre>\n\n<p>これを見ると、最後から５番目かつ最初の<code>.tabs__item</code>の兄弟要素な<code>.tabs__item</code>となります。これだと<code>.tabs__item:first-child</code>にはスタイルが適応されないので、<code>.tabs__item:first-child:nth-last-child(5)</code>をグルーピングして同じルールセットを適用させます。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.tabs .tabs__item:first-child:nth-last-child(5),\n.tabs .tabs__item:first-child:nth-last-child(5) ~ .tabs__item{...}</code></pre>\n\n<p>というわけです。<code>:nth-last-child(n)</code>の値を変えれば内包要素が何個になっても対応できます。便利ですね！</p>\n<p>で、<code>:nth-last-child(n)</code>と<code>~</code>に対応しているブラウザは</p>\n<ul>\n<li>Internet Explorer 9+</li>\n<li>Firefox 4+</li>\n<li>Google Chrome 9+</li>\n<li>Safari 5+</li>\n<li>Opera 10+</li>\n</ul>\n<p>モダンブラウザなら戦えそうですね！</p>\n<hr>\n<p>今気づいたんですけど、CSS Property Advent CalendarなのにCSSセレクタのことを書いてしまいました。まぁいいかな？と思ってAdvent Calendarを改めて見てみると......。</p>\n<blockquote>\n<p>CSSのプロパティに関することだったら何でもOKです！</p>\n<footer><cite><a href=\"http://www.adventar.org/calendars/57\">CSS Property Advent Calendar 2013 - Adventar</a></cite>から</footer>\n\n</blockquote>\n<p>セレクタ、ダメです！</p>\n<p>５日目は<a href=\"http://www.adventar.org/users/2313\">maechabin</a>さんです。よろしくお願いします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"38":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-06T10:05:00","page_id":"38","page_title":"ブログを初めてBEM化した時の流れの続き","page_tag":["Advent Calendar","BEM","CSS","HTML"],"page_description":"BEM神の声の続き","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> ６日目のエントリです。<a href=\"/archives/36.html\" title=\"ブログを初めて BEM 化した時の流れ\">前回の記事</a>に引き続き、BEM道をがんばって進みたいと思います。</p>\n<h2 id=\"-\">前回のおさらい</h2>\n<p>記事リストBlockをこんな感じにBEMりました。</p>\n<pre><code data-language=\"html\">&lt;div class=\"article\"&gt;\n  &lt;article class=\"article__item\"&gt;\n    &lt;header class=\"article-header\"&gt;\n      &lt;h2 class=\"article-header__item\"&gt;記事見出し&lt;/a&gt;&lt;/h2&gt;\n    &lt;/header&gt;\n    &lt;footer class=\"article-footer\"&gt;\n      &lt;time class=\"article-footer__pubtime\"&gt;0000/00/00&lt;br&gt;00:00&lt;/time&gt;\n      &lt;dl class=\"article-footer__categories\"&gt;\n        &lt;dt class=\"article-footer__categories-title\"&gt;category :&lt;/dt&gt;\n        &lt;dd class=\"article-footer__categories-item\"&gt;\n          &lt;a href=\"\"&gt;cate name&lt;/a&gt;, &lt;a href=\"\"&gt;cate name&lt;/a&gt;\n        &lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/footer&gt;\n  &lt;/article&gt;\n  :\n  略\n&lt;/div&gt;</code></pre>\n\n<p>BEM化前の<a href=\"/misc/getting-start-bem/planemarkup.txt\">クラスなしマークアップはこちら</a>です。</p>\n<ul>\n<li>ヘッダー</li>\n<li><s>記事リスト</s></li>\n<li>ページャー</li>\n<li>アーカイブス</li>\n<li>カテゴリー</li>\n<li>オーサー</li>\n<li>コピーライト</li>\n</ul>\n<p>さて、どんどん進んで行きましょう。</p>\n<h2 id=\"-block\">アーカイブスBlock</h2>\n<p>ページャーとカテゴリーは後述します。</p>\n<pre><code data-language=\"html\">&lt;section class=\"archives layout--horizon\"&gt;\n  &lt;header class=\"archives-header layout--horizon__item\"&gt;\n    &lt;h2 class=\"archives-header__item\"&gt;Archives&lt;/h2&gt;\n  &lt;/header&gt;\n\n  &lt;nav class=\"archives-year layout--horizon__item\"&gt;\n    &lt;h2 class=\"archives-year__title\"&gt;2012&lt;/h2&gt;\n    &lt;ul class=\"archives-year__monthly\"&gt;\n      &lt;li class=\"archives-year__item\"&gt;&lt;a href=\"\"&gt;Monthly&lt;/a&gt;&lt;/li&gt;\n      &lt;li class=\"archives-year__item\"&gt;&lt;a href=\"\"&gt;Monthly&lt;/a&gt;&lt;/li&gt;\n      &lt;li class=\"archives-year__item\"&gt;&lt;a href=\"\"&gt;Monthly&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n  :\n  略\n  :\n&lt;/section&gt;</code></pre>\n\n<p>記事リスト同様、<code>archives-</code>接頭句を設けて<code>archives</code>内に<code>archives-header</code>と<code>archives-year</code> Blockを定義します。Elementは適当に。ここで<code>layout--horizon</code>というBlockができていますが、これについては後述します。</p>\n<h2 id=\"-block\">オーサー、コピーライトBlock</h2>\n<pre><code data-language=\"html\">&lt;section class=\"author layout--horizon\"&gt;\n  &lt;header class=\"author-header layout--horizon__item\"&gt;\n    &lt;h2 class=\"author-header__item\"&gt;Author&lt;/h2&gt;\n  &lt;/header&gt;\n  &lt;p class=\"author__name layout--horizon__item\"&gt;越智&lt;/p&gt;\n  &lt;address class=\"author__address layout--horizon__item\"&gt;&lt;a href=\"mailto:otiext@gmail.com\"&gt;otiext@gmail.com&lt;/a&gt;&lt;/address&gt;\n  &lt;ul class=\"author-accounts layout--horizon__item\"&gt;\n    &lt;li class=\"author-accounts__item\"&gt;&lt;a href=\"http://twitter.com/o_ti\"&gt;Twitter&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=\"author-accounts__item\"&gt;&lt;a href=\"http://jsdo.it/o_ti\"&gt;Jsdo.it&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=\"author-accounts__item\"&gt;&lt;a href=\"http://facebook.com/otiext\"&gt;Facebook&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/section&gt;\n\n&lt;footer class=\"credit layout--horizon\"&gt;\n  &lt;div class=\"credit-header layout--horizon__item\"&gt;\n    &lt;h2 class=\"credit-header__item\"&gt;Copyright&lt;/h2&gt;\n  &lt;/div&gt;\n  &lt;p class=\"credit__item layout--horizon__item\"&gt;\n    &lt;small&gt;&copy; dskd/oti All Rights Reserved.&lt;/small&gt;\n  &lt;/p&gt;\n&lt;/footer&gt;</code></pre>\n\n<p>ここでも<code>author-</code>接頭句を使って<code>author-accounts</code> Blockを定義しています。</p>\n<h2 id=\"-block\">カテゴリーBlock</h2>\n<pre><code data-language=\"html\">&lt;section class=\"neighbor layout--horizon\"&gt;\n  &lt;header class=\"neighbor-header layout--horizon__item\"&gt;\n    &lt;h2 class=\"neighbor-header__item\"&gt;Categories&lt;/h2&gt;\n  &lt;/header&gt;\n  &lt;ol class=\"neighbor-pager layout--horizon__item\"&gt;\n    &lt;li class=\"neighbor-pager__item\"&gt;&lt;a class=\"button\" href=\"\"&gt;Category&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=\"neighbor-pager__item\"&gt;&lt;a class=\"button\" href=\"\"&gt;Category&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=\"neighbor-pager__item\"&gt;&lt;a class=\"button\" href=\"\"&gt;Category&lt;/a&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/section&gt;</code></pre>\n\n<p>カテゴリーのBlock名は<code>neighbor</code>としています。「隣人」という意味ですね。インデックスの隣にカテゴリー？と思われるかもしれませんが、記事リストを内包するリンク集同士は隣の人っぽい感じがするのでそうしてます。僕がそう思うんでそうです。僕の中では。</p>\n<p>ここでも<code>neighbor-</code>接頭句で<code>neighbor-header</code>と<code>neighbor-pager</code>を定義しています。</p>\n<h2 id=\"-block\">ページャーBlock</h2>\n<pre><code data-language=\"html\">&lt;nav class=\"neighbor layout--horizon\"&gt;\n  &lt;div class=\"neighbor-header layout--horizon__item\"&gt;\n    &lt;h2 class=\"neighbor-header__item\"&gt;Pager&lt;/h2&gt;\n  &lt;/div&gt;\n  &lt;ol class=\"neighbor-pager layout--horizon__item\"&gt;\n    &lt;li class=\"neighbor-pager__item\"&gt;&lt;span class=\"button button--disable\"&gt;1&lt;/span&gt;&lt;/li&gt;\n    &lt;li class=\"neighbor-pager__item\"&gt;&lt;a class=\"button\" href=\"\"&gt;2&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=\"neighbor-pager__item\"&gt;&lt;a class=\"button\" href=\"\"&gt;3&lt;/a&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/nav&gt;</code></pre>\n\n<p>あと回しにしていたページャーです。<code>&lt;h2&gt;</code>を<code>&lt;div&gt;</code>で挟んでいます。<code>&lt;div&gt;</code>がない場合、</p>\n<pre><code data-language=\"html\">&lt;nav class=\"neighbor layout--horizon\"&gt;\n  &lt;h2 class=\"neighbor__header\"&gt;Pager&lt;/h2&gt;\n  &lt;ol class=\"neighbor-pager layout--horizon__item\"&gt;\n    略\n  &lt;/ol&gt;\n&lt;/nav&gt;</code></pre>\n\n<p>という具合になるかと思います。BEMとしては全然かまわないのですが、レイアウトの都合上<code>layout--horizon__item</code>の中に<code>*-header__item</code>という構造が欲しかったので<code>&lt;div&gt;</code>をつけました。先のアーカイブスとカテゴリーとオーサーが<code>&lt;h2&gt;</code>を<code>&lt;header&gt;</code>に入れているので、Elementの階層に互換性を持たせるため、といういうことで。</p>\n<h2 id=\"layout-horizon-block-\">layout--horizon Blockについて</h2>\n<p>これは「ラベルが左、コンテンツが右」の水平レイアウトというBlockです（horizonをModifierにしているのは、もしかしたら今後<code>--table</code>とか<code>--stack</code>とか作るかもしれないと思ったからなのですが、たぶんないです）。他のBlockがコンテンツやドキュメント上のセマンティクスにそって命名されている「文脈準拠BEM」に対し、layoutはデザイン準拠なBEM」です。このようなものを作るのはBEM道に反していると言われそうですが、何に準拠していようと命名がBEM methodで管理されているかぎりBEMが目指すメンテナンス性からそう外れはしないだろうと思っています。</p>\n<p>また、<code>button</code>というBlockがあります。名前の通りボタンなスタイルが適応されています。ここが<code>neighbor</code> Blockを継承していないのは<code>button</code>がサイトに点在する可能性を鑑みた結果です。実際にページャーとカテゴリーだけでなく、個別記事ページのリンクにも<code>button</code>なスタイルは登場しています。</p>\n<p><code>layout</code>や<code>button</code>は、いうなればコンテンツに依存しないスタイルの管理を簡易化するためのBlockです。dskd.jpにはデザイン要素はとても少ないですが、大規模なサイトやUI重視のコンテンツになるとどのBlockやElementの中に現れても変わらないCSSルールセットがもっと出てくると思います。タブ、リストマークの画像、背景のパターン、テキストの装飾などです。こういったものはBEMではModifierに吸収されてしまうところですが、テーマカラーやレギュレーションを微調整する必要が出た際、この「デザイン準拠なBEM」も有効なのではないかと思います。</p>\n<p>今回も長くなってしまったので次回に続きます。次はインデックス以外のページについてです。</p>\n<hr>\n<p>７日目は５日ぶり２日目、まぼろしの<a href=\"http://www.adventar.org/users/86\">小林</a>さんです。よろしくお願いします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"39":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-09T21:56:00","page_id":"39","page_title":"ブログを初めてBEM化した時の流れの最後","page_tag":["Advent Calendar","BEM","CSS","HTML"],"page_description":"BEM神の声完結編","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> ９日目のエントリです。<a href=\"/archives/38.html\" title=\"ブログを初めてBEM化した時の流れの続き\">前回の記事</a>の続きです。</p>\n<h2 id=\"-\">前回のおさらい</h2>\n<p>インデックスについて、ヘッダー以外のBlockをBEMりました。</p>\n<p>BEM化前の<a href=\"/misc/getting-start-bem/planemarkup.txt\">クラスなしマークアップはこちら</a>です。</p>\n<p>ヘッダーはさくっとこんな感じです。</p>\n<pre><code data-language=\"html\">&lt;header class=\"header\"&gt;\n  &lt;h1 class=\"header__logo\"&gt;&lt;a href=\"\"&gt;dskd&lt;/a&gt;&lt;/h1&gt;\n&lt;/header&gt;</code></pre>\n\n<p>特に説明はいらないと思いますが、インデックスのロゴとなる部分にホームへのリンクはいるのかというBEMとは関係ない問題はあります。僕はつける派なのでつけました。SEOについて考えたことはありません。</p>\n<p>インデックスとそれ以外では<code>&lt;header&gt;</code>に入れている文言が違うので、それぞれにModifierをつけています。</p>\n<pre><code data-language=\"html\">&lt;!-- 全アーカイブ --&GT;\n&lt;header class=\"header <mark>header--archives</mark>\"&gt;...&lt;/header&gt;\n\n&lt;!-- カテゴリー --&GT;\n&lt;header class=\"header <mark>header--category</mark>\"&gt;...&lt;/header&gt;\n\n&lt;!-- 月別 --&GT;\n&lt;header class=\"header <mark>header--monthly</mark>\"&gt;...&lt;/header&gt;\n\n&lt;!-- 個別 --&GT;\n&lt;header class=\"header <mark>header--individual</mark>\"&gt;...&lt;/header&gt;</code></pre>\n\n<p>ですが、今のところデザインに反映されていないのでつける意味がない気がします。</p>\n<h2 id=\"-block\">インデックス以外のページのBlock</h2>\n<p>dskd.jpにはインデックスの他に全アーカイブ一覧、カテゴリーアーカイブ、月別アーカイブ、個別記事ページがあり、個別記事ページ以外はほぼインデックスと同じです。</p>\n<ul>\n<li>ヘッダー</li>\n<li>記事リスト</li>\n<li>アーカイブス</li>\n<li>カテゴリー</li>\n<li>コピーライト</li>\n</ul>\n<p>個別記事ページも特筆すべきBlockはありません。</p>\n<ul>\n<li>ヘッダー</li>\n<li>記事リスト</li>\n<li>一つ前の記事</li>\n<li>アーカイブス</li>\n<li>カテゴリー</li>\n<li>コピーライト</li>\n</ul>\n<p>「一つ前の記事」は前回エントリでも触れた<code>neighbor</code> Blockとして以下のようにしています。</p>\n<pre><code data-language=\"html\">&lt;nav class=\"neighbor layout--horizon\"&gt;\n  &lt;div class=\"neighbor-header layout--horizon__item\"&gt;\n    &lt;h2 class=\"neighbor-header__item\"&gt;Older&lt;/h2&gt;\n  &lt;/div&gt;\n  &lt;a class=\"neighbor__item layout--horizon__item\" href=\"#\"&gt;記事見出し&lt;/a&gt;\n&lt;/nav&gt;</code></pre>\n\n<p>カテゴリーはページャースタイルだったため<code>neighbor &gt; neighbor-pager &gt; neighbor-pager__item</code>という構造でしたが、一つ前の記事Blockでは直接の子Elementとして<code>neighbor__item</code>にしてみました。</p>\n<p>......。とまぁこんな具合にBEM化は一応終わりました。搾りかすのような記事ですみません。BEM化したインデックスの<code>&lt;body&gt;</code>内のソースは<a href=\"/misc/getting-start-bem/bemmarkup_index.txt\">インデックスがこちら</a>、<a href=\"/misc/getting-start-bem/bemmarkup_individual.txt\">個別記事ページがこちら</a>です。</p>\n<p>終えた感想については初回のBEM Advent Calendar の記事で書いている通り「難しかったー」というものなんですけど、dskd.jpがシングルカラムでなかったらもっと苦労したように思います。振り返って繰り返し認識するのが、階層が深くなった時にBlockとElementをどうつないでいくのかの判断がとても難しい、ということです。どんなに深い構造でも完璧にBEMれる強さ、持ちたいですね。</p>\n<p>そう言えば今日、こんなツイートをしました。</p>\n<p><blockquote class=\"twitter-tweet\" lang=\"ja\">小規模 BEM しかやってないので BEM の機微を語ることができない&mdash; 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/statuses/409978207471804417\">2013, 12月 9</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>僕の力不足であまり役に立たない記事を量産してしまいました！　BEMerへの道は険しい！　TKGが食べたい！</p>\n<hr>\n<p>10日目は<a href=\"http://www.adventar.org/users/2\">げこたん</a>さん（２日ぶり４度目）です。よろしくお願いします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"40":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-22T23:12:50","page_id":"40","page_title":"BEMに向いているデザイン、向いていないデザイン","page_tag":["Advent Calendar","BEM","CSS"],"page_description":"BEMの向き不向き","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> 21日目のエントリです。</p>\n<p>BEMについてツーイッタなどでぼやいていると、「BEMは向いているデザインと向いてないデザインがある感じする」みたいなエアリーツーイットを観測することがあります。BEMに向いているデザイン、それってつまりデザインからHTMLを起こす時にBlock, Elementのツリー構築がしやすそうで、Modifier管理にできそうな状態の違いを含んでるデザインってことでしょうか。向いていないデザインというとその逆ですかね。そうだなと思わないでもないのですが、よくよく考えてみるとBEMには向き不向きなデザインというものが本当にあるのか、疑問なのでポエムを綴ります。</p>\n<p>そもそもBEMってスタイルをしやすくするためにあるのではないと思うんです。以前、こんなツーイットをしました。</p>\n<p><blockquote class=\"twitter-tweet\" lang=\"ja\">BEM、発祥がプロジェクトにおいてチームメンバーが変わった時でも、エンジニアがアサインしやすい構造を提供するためと、併せてメンテナンス性も提供するためっていうのがあるので、デザインからHTML起こす時のイニシャルコストは考えられていない。&mdash; 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/statuses/410800531091640320\">2013, 12月 11</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>これはBEMに関してもっとも世間に勘違いされていると感じるところなのですが、BEMはOOCSSなどとは違ってスタイルをモジュール化しようとか目的のデザインに最速でたどり着けるようなルール作りをするためのものではありません。BEMにおけるデザインへのアドバンテージはせいぜい「CSSセレクタからHTML要素への適応範囲をできるだけ確実に予測できる」程度のものでしかないと思います。こういった面から見ても、BEMに向いているデザイン・向いていないデザインというものは存在しないと思う次第です。</p>\n<p>では何のためにBEMを導入するのか、というと上記でも書いているとおりなのですが、言い換えれば「メンバーが入れ替わってもメンテナンス性が損なわれない構造づくりのため」ということになるかと思います。BEMという厳格なルールの中にあえて閉じこもることで、メンバーが何か新しいことを<em>しでかさないように</em>しているのです。新しいことを取り入れたメンバーがいなくなった時、残されたメンバー全員の学習コストが上がらないように。BEMにはあまり自由度はありませんが、ふわふわになりがちなクラス付けに強い縛りがあれば、既存サイトでの要素追加や変更の時はもちろん、メンバー単位、プロジェクト単位で引き継ぎが発生したとしても、そのサイトの有り様を説明するコストをもっとも抑えることができるのです。</p>\n<p>BEMがYandexという検索サイトで使われているのも興味深いです。検索サイトといえば使い勝手とサイト内回遊率がサービスの存続に直結していますから、マイナーアップデートなどは頻繁に行われているでしょう。トレンドの移り変わりの早いWebにおいて何度するかもわからないリニューアルに耐え、朝令暮改な指示にも屈することなく、今日自分が突然死のうと明日知らない人が突然来ようと、その後のメンバーに与える影響を最小限に抑える命名規則、それがBEMです。</p>\n<p>BEMにとってサイトのデザインなんてものは飾りです。区切り文字がキモいとかどうでもいいのです。みなさんもっとBEM神の声を聞いてください。</p>\n<hr>\n<p>22日目は<a href=\"http://www.adventar.org/users/1640\">s12bt</a>さんが<a href=\"http://blog.obentoba.co/entry/2013/12/22/bem\">既に書いていました</a>。広がるBEMerの輪。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"41":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-25T02:45:50","page_id":"41","page_title":"BEMのロゴが個性的で面白い","page_tag":["Advent Calendar","BEM"],"page_cover":"/img/bem-logo/egg.gif","page_description":"BEMのロゴのご紹介です。","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> 23日目のエントリです。初日から日をまたいで公開しているので今さら日付通りに書けなくてもなんの罪悪感もありません。本当にすみませんでした。</p>\n<p>突然ですが、BEMにロゴがあることをみなさんご存知でしたか？ <a href=\"http://bem.info/\">bem.info</a>のトップページにロゴが載っているのですが、何種類かのロゴがリロードするたびに変わります。今回はそのロゴをざざっとご紹介しようと思います。</p>\n<p><img src=\"/img/bem-logo/01.gif\" alt=\"BEMロゴ１\" title=\"パルス......？\"></p>\n<p><img src=\"/img/bem-logo/02.gif\" alt=\"BEMロゴ２\" title=\"ドット......？\"></p>\n<p><img src=\"/img/bem-logo/03.gif\" alt=\"BEMロゴ３\" title=\"ボーダー......？\"></p>\n<p><img src=\"/img/bem-logo/04.gif\" alt=\"BEMロゴ４\" title=\"作図のために補助線をたくさんひいた......？\"></p>\n<p><img src=\"/img/bem-logo/05.gif\" alt=\"BEMロゴ５\" title=\"ボヤッとしたスピード感でフラットデザインに対抗\"></p>\n<p><img src=\"/img/bem-logo/06.gif\" alt=\"BEMロゴ６\" title=\"ファブリックにありそうでなさそう！\"></p>\n<p><img src=\"/img/bem-logo/07.gif\" alt=\"BEMロゴ７\" title=\"ファブリックにかなりありそう！\"></p>\n<p><img src=\"/img/bem-logo/08.gif\" alt=\"BEMロゴ８\" title=\"どう見てもバットマン\"></p>\n<p><img src=\"/img/bem-logo/09.gif\" alt=\"BEMロゴ９\" title=\"ウルヴァリン！\"></p>\n<p><img src=\"/img/bem-logo/10.gif\" alt=\"BEMロゴ10\" title=\"キャプテンアメリカ！\"></p>\n<p><img src=\"/img/bem-logo/11.gif\" alt=\"BEMロゴ11\" title=\"アイアンマンももしかしたら BEM 管理\"></p>\n<p>なんなんですかね、このセンス。面白いです。</p>\n<p>僕が100回くらいリロードして出てきたロゴはこれが全部でした。もしかしたらまだ他にもあるかもしれません。その時は<a href=\"https://twitter.com/o_ti\">@o_ti</a>まで教えていただければと思います。</p>\n<h2 id=\"-\">もしかして公式ロゴって存在してない？</h2>\n<p>上記でご覧頂いたように、BEMのロゴってだいぶ自由です。なので、僕もBEMなロゴを作ってみました！</p>\n<p><img src=\"/img/bem-logo/egg.gif\" alt=\"BEMロゴ\" title=\"たまご！\"></p>\n<hr>\n<p>24日目は１日ぶり７度目、僕です。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"42":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-26T02:35:05","page_id":"42","page_title":"PSDファイルのレイヤー名でBEM","page_tag":["Advent Calendar","BEM"],"page_description":"ファイル名でもBEMメソッドをとりいれる試み","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> 24日目のエントリです。</p>\n<p>BEMはセレクタの命名規則だけでなく、<a href=\"http://bem.info/method/filesystem/\">ファイルシステムの管理にも導入できます</a>よというbem.infoのページを見ていて、MindBEMdingな名前付けは何もウェブだけのものに留まらなくていいんじゃないかと思うようになりました。そこでタイトルにあるように、PSDファイルのレイヤー名でBEMです。</p>\n<p>何回か前の記事で紹介したこちらの画像の、</p>\n<p><a href=\"/img/multiple-tabs/01.png\" title=\"汎用タブ\"><img src=\"/img/multiple-tabs/01.png\" alt=\"汎用的なタブの例\"></a></p>\n<p>PSDファイルをこんな感じにしてみました。</p>\n<p><a href=\"/img/bem-layer-psd/01.png\" title=\"レイヤー名でBEM\"><img src=\"/img/bem-layer-psd/01.png\" alt=\"レイヤー名でBEMったスクリーンショット\"></a></p>\n<p>冗長になるのでBlockとElementの継承は省略してModifierを書いています。レイヤー名でBEMと言いましたが、このような単純なイラストでもレイヤー単位ではHTML化できないところが出てくるので、グループにしてそこでBEMな名前付けをしています。</p>\n<p>用意したサンプルが単純な作りなのでBEMなレイヤー名を一概に「良い」とは言えません。ですが「◯◯のコピー」が大量に生まれたりして見通しも悪くなりがちなレイヤー名を、Block, Element, Modifierに基づいたグループツリーで表現しておくことで、他のメンバーにデータを渡す時にもその全容を把握してもらいやすくなるのではないでしょうか。</p>\n<hr>\n<p>25日目は１日ぶり８度目、僕です。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"43":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2013-12-26T03:00:00","page_id":"43","page_title":"BEMまとめ奴","page_tag":["Advent Calendar","BEM"],"page_description":"ちゃんとまとめました","body":"<p><a href=\"http://www.adventar.org/calendars/61\">BEM Advent Calendar 2013</a> 最終日のエントリです。</p>\n<p>BEM Advent Calendar 2013に参加していただいた皆さんお疲れ様でした。そしてありがとうございました。</p>\n<p>リニューアルしたAdventarで最初にカレンダーを登録した時にボックスのヘッダーカラーがアレな黄土色だった時はどうしてくれようかと思いましたし、開始４日前で18枠も開いていたりとか、TLではBEMへの闇が広がっていたりとかもしていましたが、なんとか25日埋めることができました。カレンダーに参加していない方にもBEMの記事を書いていただいたりと、せまい範囲ながらBEMに触れる機会を提供できたのかなと思えています。</p>\n<p>最終日25日目の本記事では、BEM Advent Calendar 2013に寄せていただいた記事だけでなく他のBEMな記事もあわせたまとめを公開させていただきます。「で、出た～ｗ最終日にまとめ記事公開奴～ｗｗｗ」です。</p>\n<p>まずは本家とその周辺から</p>\n<ul>\n<li><a href=\"http://bem.info/\">bem.info</a></li>\n</ul>\n<p>BEM公式サイトです。Yandexというロシアの検索サイトで用いられている方法を改定した命名規則がまとめられています。</p>\n<p>左メニューからMethodology &gt; Definitionsと進むとBEMの定義が書かれています。ここを読めばMindBEMdingはすぐに得られると思います。定義の説明だけでなく、XMLやJSONでBEM管理するためのフォーマットなども載っています。また、Filesystemのページではリソースファイルの名前にもBEMを用いて管理する方法が紹介されています。ビルド時に結合するファイルもBEMな名前管理にすることで保守性をあげようという狙いがあるようです。</p>\n<p>Smashing MagazineにもBEMの主要な定義とサンプルを一つ一つ紹介している記事が連載されていました。</p>\n<ul>\n<li><a href=\"http://coding.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/\">http://coding.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/</a></li>\n<li><a href=\"http://coding.smashingmagazine.com/a-new-front-end-methodology-bem-blocks-reiteration/\">http://coding.smashingmagazine.com/a-new-front-end-methodology-bem-blocks-reiteration/</a></li>\n<li><a href=\"http://coding.smashingmagazine.com/front-end-methodology-bem-file-system-representation/\">http://coding.smashingmagazine.com/front-end-methodology-bem-file-system-representation/</a></li>\n</ul>\n<p>スライドもあります。</p>\n<ul>\n<li><a href=\"http://www.slideshare.net/MaxShirshin/bem-dm\">BEM it!</a></li>\n</ul>\n<p>日本語で読みたい方はこちらにIndexとDefinitionsの日本語訳があります。</p>\n<ul>\n<li><a href=\"https://github.com/juno/bem-methodology-ja\">https://github.com/juno/bem-methodology-ja</a></li>\n</ul>\n<p>GitHubで公開されているのでBEM神の声をもっと聞きたい方はcloneしてどうこうするといいと思います。</p>\n<h2 id=\"let-s-mindbemding-\">Let&#39;s MindBEMding!</h2>\n<p>続いて日本の記事です。</p>\n<ul>\n<li><a href=\"http://chroma.hatenablog.com/entry/2013/12/12/200817\">BEM とは - CHROMA</a></li>\n<li><a href=\"http://chroma.hatenablog.com/entry/2013/12/15/165511\">SMACSS に BEM を取り入れよう - CHROMA</a></li>\n<li><a href=\"http://blog.ruedap.com/2013/10/29/block-element-modifier\">BEMという命名規則とSass 3.3の新しい記法 - アインシュタインの電話番号</a></li>\n<li><a href=\"http://www.slideshare.net/hiloki/a-good-css-and-sass-architecture\">ちゃんとCSSを書くために - CSS/Sass設計の話</a></li>\n<li><a href=\"http://hail2u.net/blog/webdesign/sass-and-bem.html\">SassとBEM</a></li>\n<li><a href=\"http://www.torounit.com/blog/2013/12/12/1693/\">LessでBEMってみたらかなりさくさくコーディングできた！という話 | Toro_Unit</a></li>\n<li><a href=\"http://nakajmg.github.io/blog/2013-12-17/adventar-BEM.html\">変数でBEMる | じまぐてっく</a></li>\n</ul>\n<p>上記記事ではMindBEMdingでCSSを書くにあたっての多数のサンプル、SMACSSからBEMへの移行、プリプロセッサーの強力な拡張機能を用いた管理方法、変数名をBEMることで使われる先や影響範囲の見通しを良くしようという提案などが紹介されています。プリプロセッサーをお使いでない方には興味が薄いかもしれませんが、サイトをBEM化しておくのは開発支援ツール的にも良いということです。MindBEMdingでセレクタにBlock名が子要素へ継承されていくことを利用して、BlockとElementのスタイルの結合性をより明確にできるのは大きなメリットです。僕はBEM自体にはサイトをスタイルする（デザインカンプからHTMLに起こす）にあたってアドバンテージはほとんどないと考えているのですが、冗長な名前付けに対する十分な対価はプリプロセッサーが与えてくれると思いました。</p>\n<p>僕が観測した範囲なのでMindBEMdingな記事はもっとあると思います。まとめに追加するかはわかりませんが、他に記事があったら<a href=\"https://twitter.com/o_ti\">@o_ti</a>まで教えていただけると幸いです。</p>\n<h2 id=\"bem-\">BEMリプレイス記事</h2>\n<ul>\n<li><a href=\"/archives/34.html\">CSSの命名規則にBEMを取り入れてみる | dskd</a></li>\n<li><a href=\"/archives/36.html\">ブログを初めて BEM 化した時の流れ | dskd</a></li>\n<li><a href=\"/archives/38.html\">ブログを初めて BEM 化した時の流れの続き | dskd</a></li>\n<li><a href=\"/archives/39.html\">ブログを初めて BEM 化した時の流れの最後 | dskd</a></li>\n<li><a href=\"/archives/42.html\">psd ファイルのレイヤー名で BEM | dskd</a></li>\n<li><a href=\"http://qiita.com/kubosho_/items/2887d200f9b5aa738fb1\">QiitaのサイトにBEMを勝手に取り入れてみた on @Qiita</a></li>\n<li><a href=\"http://qiita.com/kubosho_/items/4f48612e1cec9f9e9638\">「Qiitaのサイトに勝手にBEMを取り入れてみた」の解説 on @Qiita</a></li>\n<li><a href=\"http://blog.obentoba.co/entry/2013/12/22/bem\">BootstrapをBEMに考えてみる - Blog.おにぎりたまごうぃんなー</a></li>\n</ul>\n<p>既存のウェブサイトをBEMリプレイスするにあたって頭を抱えることと言えば、直感的なBEMツリーと現実のDOMツリーとのギャップです。アイコンなどの装飾のために空要素や多重<code>div</code>, <code>span</code>でHTMLが組まれているとBEMツリーを構築するのは大変な作業となります。とはいえBEMはチームで共有するものですから、チーム内で仕様についてコンセンサスがとれていればどんなBlockやElementが構築されても良いと思います。ルートBlockと子ElementのみをBEM管理にするような易しめな方法もアリです。サイトのグリッドレイアウトに関するものだけとか、更新が激しいパーツだけとか。</p>\n<p>ただ僕としてはサイトの一部だけBEMるなら最初から全部BEMってしまった方が後で楽をできると思います。BEMツリーのイニシャライズはとても労力がかかりますが、全てをBEMリプレイスできるとそのサイトの全容がガッツリと把握できること請け合い、次第にBEM神の声も聞こえてくるのでオススメです。</p>\n<h2 id=\"-bem-tips\">世の中を円滑にBEMるためのTIPS</h2>\n<ul>\n<li><a href=\"http://maboroshi.biz/clearskysource/?p=926\">EmmetのBEMフィルターでBEMるときのHTMLをサクッと書く | clear sky source</a></li>\n<li><a href=\"http://maboroshi.biz/clearskysource/?p=964\">BEMに迷う | clear sky source</a></li>\n<li><a href=\"http://geckotang.tumblr.com/post/69554882865/bem-words\">BEMで命名する時に役に立ちそうな単語 - &lt; /gecko &gt;</a></li>\n<li><a href=\"http://geckotang.tumblr.com/post/70789296448/modifier\">モディファイアの付け方 - &lt; /gecko &gt;</a></li>\n<li><a href=\"http://tsmd.hateblo.jp/entry/2013/12/12/004059\">実践 めんどうくさくない BEM - ダーシマ・ヱンヂニヤリング</a></li>\n<li><a href=\"http://ksk1015.hatenablog.com/entry/2013/12/14/172506\">BEMというよりクラス名をわかりやすく区切りたい - ksk1015のブログ</a></li>\n<li><a href=\"http://yomotsu.net/blog/2013/12/12/bem-with-namespace.html\">BEM と接頭辞</a></li>\n</ul>\n<p>BEMに限らずOOCSSでもセレクタの名前付けには頭を抱える時間が少なくありません。BEMではさらにBlockとElementの区別や、アンダースコア２つ、ハイフン２つ（Yandexではアンダースコア１つ）といったデリミタの見た目に対する嫌悪感から、やっていく内に「BEM道なんてなかった！」とか「Elementはみんなの心のなかにあるんだよ......。」などと言いたくなることも多いです。そういったお悩みを解決するのが上記記事のTIPSです。</p>\n<p>その名の通りBEMのキモはBlock, Element, Modifierの３つでHTMLを説明し管理することです。それができていればデリミタやケースは管理者が必要に応じてコントロールしていいと思います。特に小山田さんの記事ではサイトリニューアルで生まれがちなバージョン違いのパーツの混在を、Blockに接頭辞をつけることで共存させるアイデアが紹介されています。単純な操作ですが、バージョンをModifier管理に混ぜるよりはるかにメンテナンス性がありますね。小林さんが紹介しているEmmet BEMフィルターも煩わしい継承の記述を最小限に抑えてくれるのでいい感じです。</p>\n<h2 id=\"multilayer-css\">Multilayer CSS</h2>\n<ul>\n<li><a href=\"http://unformedbuilding.com/articles/mcss-ja/\">[翻訳] MCSS (Multilayer CSS) | Unformed Building</a></li>\n</ul>\n<p>こちらはMCSSというCSSの管理方法を日本語訳した記事です。MCSSではまず最も再利用可能で抽象的な構造に着目します。それを「ベース」レイヤーとします。次にその再利用可能なパーツがどんな場所に格納されているかを見ます。ベースを格納しているものを「プロジェクト」レイヤーと呼びます。再利用可能なパーツ内の子要素に、MindBEMdingな名前付けをしています。また、MCSSは「コスメティック」と呼ばれるレイヤーでOOCSSな名前付けでもって状態の差異を表現するようです。詳しい内容な上記記事をどうぞ。</p>\n<p>強調しておきたいのは、BEMとMCSS を比べてBlock = ベース、Element = プロジェクト、Modifier = コスメティック<strong>なんてことは全くない</strong>、ということです。MCSSとBEMはある程度共存できます。ベースとプロジェクト、それぞれにBEMツリーを構築できます。Blockを継承しすぎて冗長になったBEMツリーは、MCSSによって少し見通しがよくなる可能性があります。本家のブログで<a href=\"http://operatino.github.io/MCSS/modules/modifiers.html\">BEMからMCSSに移行するサンプルコード</a>が書かれています。Modifierの指定方法が異なるので興味のある方はぜひ御覧ください。</p>\n<h2 id=\"bem-tools\">BEM Tools</h2>\n<ul>\n<li><a href=\"http://geckotang.tumblr.com/post/68662389684/bem\">BEMツールに触れてみる - &lt; /gecko &gt;</a></li>\n<li><a href=\"http://geckotang.tumblr.com/post/69038806580/bem-2\">BEMツールに触れてみる(2) - &lt; /gecko &gt;</a></li>\n<li><a href=\"http://geckotang.tumblr.com/post/69371931235/bem-3\">BEMツールに触れてみる(3) - &lt; /gecko &gt;</a></li>\n<li><a href=\"http://geckotang.tumblr.com/post/69699409732/bem-4\">BEMツールに触れてみる(4) - &lt; /gecko &gt;</a></li>\n</ul>\n<p>bem.infoで提供されているBEM Toolsを試して一つ一つ紹介されています。貴重な日本語ソースですね。他にもBEM Toolsを紹介している日本のブログはありましたが、げこたんさんの方が入力ソースと出力ソースの両方を書いているので良いと思います。ツールと言ってもGUIを持ったソフトウェアではなく、コマンドラインから操作するタイプのツールです。使用にはNode.jsが必要です。Gruntを使われている方ならインストールまでは何ら苦はないと思いますので、ぜひ試してみてはいかかでしょうか。</p>\n<p>僕としては定義ファイルのJSONが手編集というのが闇が広がりそうだなーと思うところです。BlockやElementをあらかじめ精査して仕様を決定し、その上で一気に初期ファイルをビルドするなどの用途には良いかもしれません。</p>\n<h2 id=\"-bem-\">結局BEMって</h2>\n<p>HTMLとCSSについてのBEMでは、フロントエンドの開発手法がフレームワークやプリプロセッサー、ポストプロセッサーの台頭により多様化している昨今、PureなBEM道を突き進むのは「今風ではない」のかもしれません。僕はこの小さなブログをBEM化した程度の経験しかないので、厳格なBEMで起こした大規模なサイトというのはYandexくらいしか見たことがないですし、BEM化することで実際にどれくらいメンテナンス性や拡張性が上がったのか具体的に説明しているページを知りませんから、BEM Advent Calendar を立ち上げておきながらBEMることの本当の恩恵を実感したことがない体たらくです。</p>\n<p>何かが良くなったり楽になったりしないと人はなかなか道具を変えません。BEMは全てをいい感じにする魔法の方法論ではありませんから、Pure BEMからMindBEMdingへ少しルールを崩していけば、OOCSSとの親和性やフレームワークとの連携など少しとっつきやすさが出てくるので、現在取り入れている方法論にうまく混ぜていってBEMの美味しいところだけを啜っていく世の中になるのかもしれないなぁと思います。ただMindBEMdingも混ぜ方を間違えるとただ読みづらくて使いづらいだけになってしまうので、ベターBEM、ベストMindBEMdingなプラクティスがもっと必要だなと思う次第です。</p>\n<h2 id=\"-\">おわりに</h2>\n<p>二ヶ月ほどの間BEMのことばかり考えていました。最初にdskd.jpをBEM化した時には見えなかったことが、BEM Advent Calendarが更新される度に見えるようになってとても勉強になりました。BEMについて記事を書いたりやTwitterなどで言及していただいた方々、改めて本当にありがとうございました。</p>\n<hr>\n<p>P.S なんとかこれをやらずに済みました。</p>\n<p><blockquote class=\"twitter-tweet\" lang=\"ja\">眠すぎて２４日目を「サイト構築する際に導入したい！僕が３年間で厳選したCSS命名規則方法論10選！」やりかねない。&mdash; 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/statuses/415541667832135681\">2013, 12月 24</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>※<a href=\"http://blog.supermomonga.com/articles/vim/startdash-with-mac.html\">元ネタはこちら</a></p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"44":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-05-07T11:47:45","page_id":"44","page_title":"Autoprefixerの@keyframes animation の処理に違和感があったけど、僕が間違っていた","page_tag":["CSS"],"page_description":"Autoprefixerは頭がいい","body":"<p>ポストプロセッサーの<a href=\"https://github.com/ai/autoprefixer\">Autoprefixer</a>、大変強力で素晴らしく便利なのだけど、<code>@keyframes</code>の処理には違和感があった。</p>\n<p>以下の様なCSSルールセットがあったとする。<code>translate</code>で要素のY座標を+300pxするだけの簡単なアニメーション。<code>animation-deday</code>, <code>animation-iteration-count</code>, <code>animation-direction</code>は規定値ということでショートハンドで省略している。</p>\n<pre><code data-language=\"css\">.ugoku {\n  animation: ugoku 0.5s ease-in;\n}\n\n@keyframes ugoku {\n  0% {\n    transform: translate(0px, 0px);\n  }\n\n  100% {\n    transform: translate(0px, 300px);\n  }\n}</code></pre>\n\n<p>これをAutoprefixerを使ってlast 2 versionsとか適当につけて実行すると、以下のように展開される。</p>\n<pre><code data-language=\"css\">.ugoku {\n  -webkit-animation: ugoku 0.5s ease-in 0 1 normal;\n  animation: ugoku 0.5s ease-in 0 1 normal;\n}\n\n@-webkit-keyframes ugoku {\n  0% {\n    -webkit-transform: translate(0px, 0px);\n    transform: translate(0px, 0px);\n  }\n\n  100% {\n    -webkit-transform: translate(0px, 300px);\n    transform: translate(0px, 300px);\n  }\n}\n\n@keyframes ugoku {\n  0% {\n    -webkit-transform: translate(0px, 0px);\n    transform: translate(0px, 0px);\n  }\n\n  100% {\n    -webkit-transform: translate(0px, 300px);\n    transform: translate(0px, 300px);\n  }\n}</code></pre>\n\n<p><code>@-webkit-keyframes</code>と<code>@keyframes</code>の両方に<code>-webkit-transform</code>と<code>transform</code>が入っている。僕はずっと、これはおかしいのではないかと思っていた。<code>@-webkit-keyframes@内には</code>-webkit-transform<code>だけでいい、</code>@keyframes<code>には</code>-webkit-transform`はいらない、以下のようになるべき、と。</p>\n<pre><code data-language=\"css\">.ugoku {\n  -webkit-animation: ugoku 0.5s ease-in 0 1 normal;\n  animation: ugoku 0.5s ease-in 0 1 normal;\n}\n\n@-webkit-keyframes ugoku {\n  0% {\n    -webkit-transform: translate(0px, 0px);\n  }\n\n  100% {\n    -webkit-transform: translate(0px, 300px);\n  }\n}\n\n@keyframes ugoku {\n  0% {\n    transform: translate(0px, 0px);\n  }\n\n  100% {\n    transform: translate(0px, 300px);\n  }\n}</code></pre>\n\n<p>スッキリやん！　FTWやん！　<strong>でも僕が間違っていた。</strong></p>\n<p>というのも、<code>animation</code>と<code>@keyframes</code>と<code>transform</code>が同時にunprefixされる保障はない。もし<code>transform</code>がunprefixされないまま<code>@keyframes</code>がunprefixされたら、上記CSSではアニメーションが正常に動くかはわからない。だから<code>@keyframes</code>にもprefixが付与されていたのか。</p>\n<p>Autoprefixer賢い！ Autoprefixerｻｲｺｰ!!</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"45":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-05-24T13:51:12","page_id":"45","page_title":"人には難しい気がする機械の真偽","page_tag":["JavaScript"],"page_description":"素人なので簡単なことがわからない","body":"<p>自分が良く書くJavaScriptでは、ある値があるかないかを簡素なif文にして処理を切り分けることがある。結論は型までちゃんと評価しろという話なのだけど、何度もハマってしまうから記事に残しておくことにする。タイトルは覚えられていなかった言い訳。</p>\n<p>極端にいうと、だいたいこんな感じのJavaScriptとなる。</p>\n<pre title=\"JavaScript\"><code data-language=\"javascripte\">var n = 0;\n\nfunction func(){\n    // hoge を huga したりする\n};\n\nif(n){\n    func(); // 実行されない\n}\n</code></pre>\n\n<p><code>n</code>、あるじゃないか！ <code>n = 0</code>じゃないか！なんでや！って思って夜中にハマって泣く泣く寝るに至ったけど、<code>else</code>を書いたらそっちが通ったので数値の0はJavaScriptでは偽扱いになるのだということをまた忘れていたことを今朝嘆いた。</p>\n<p>この真偽について何度もハマったと冒頭に書いたとおりなので、自分で一覧にしておくことにした。</p>\n<table>\n  <tr>\n    <th scope=\"col\">値</th>\n    <th scope=\"col\">true</th>\n    <th scope=\"col\">false</th>\n    <th scope=\"col\">整数の0</th>\n    <th scope=\"col\">整数の1</th>\n    <th scope=\"col\">少数の0.0</th>\n    <th scope=\"col\">文字列の0</th>\n    <th scope=\"col\">空文字</th>\n    <th scope=\"col\">空配列</th>\n    <th scope=\"col\">空オブジェクト</th>\n    <th scope=\"col\">null</th>\n    <th scope=\"col\">undefined</th>\n    <th scope=\"col\">NaN</th>\n  </tr>\n  <tr>\n    <th scope=\"row\">真偽</th>\n    <td>真</td>\n    <td>偽</td>\n    <td>偽</td>\n    <td>真</td>\n    <td>偽</td>\n    <td>真</td>\n    <td>偽</td>\n    <td>真</td>\n    <td>真</td>\n    <td>偽</td>\n    <td>偽</td>\n    <td>偽</td>\n  </tr>\n</table>\n\n<p>表が見づらい。</p>\n<p>JSFiddleで確認できるようにもしてみた。Resultのタブから各値のボタンをクリックすると真偽が出るようにしている。検証コード側はあまりスマートではない。正常にテストできているかもちょっとわからない。</p>\n<iframe width=\"100%\" height=\"400\" src=\"http://jsfiddle.net/s43Qk/embedded/result,js/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>これでハマった時は自分のブログを見れば良くなった。自分が楽になることはどんどんやっていきたい。</p>\n<hr>\n<p>JavaScriptに限らず、どの値で真か偽かは他言語でもそれぞれ決まりがあり、言語間でそれほどご互換性があるようには見えない。その差異は設計思想の差異と言うことでこのブログでは議論をしないが、こういった真偽の扱いについては誰しもが一度はハマり、憤りを覚え、目を濁らせて、やがて鋼の心を手に入れるのだ、いわばそのためのダンジョンなのだと、前職のJSerが言っていたのを思い出した。レベルが上ってからも行けるダンジョンは楽しい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"46":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-07-07T01:45:00","page_id":"46","page_title":"git filter-branchで過去の全てのcommitから画像ファイルの追加/変更をなかったことにしてリポジトリを軽量化する","page_tag":["Git"],"page_description":"歴史の書き換えだぁ〜！","body":"<p>表題の通り、分散型バージョン管理システムの<a href=\"http://git-scm.com/\">Git</a>でいわゆる「歴史の書き換え」をする。</p>\n<p>この処理を行う想定としては、複数人で進めているプロジェクトで開発の途中までは画像をリポジトリに含めて管理していたけど、今度から画像は別で管理することにしてリポジトリから消したい、などという場合。その後月日が経った状況で画像をcommitしていた頃のlogがとても容量を食っている場合でももちろん可。</p>\n<p>写真素材サイトで画像をうっかりGit管理してたとか、ゲーム系でキャラクターや背景の高解像度の画像をGit管理していた頃があるとかだと、新しいbranchをcheckoutしてpushする度にリポジトリはどんどん肥大化していく。そうやってギガバイト単位に膨れ上がったリポジトリでも、filter-branchで劇的に軽量化することができる。</p>\n<p>具体的には<code>filter-branch</code>というコマンドを使う。ファイルを持っていた歴史を残しておきたいのであればfilter-branchをする必要なないが、新規メンバーがそのリポジトリをcloneする時間を少しでも短縮したいと考えるなら、試してみる価値はある。</p>\n<p>これをやる前に注意して欲しいのは、filter-branchを実行した環境以外では、実行後にリポジトリをcloneし直す必要があるということ。なぜなら、filter-branchはcommit自体の書き換えを行うのものなので、revertなどとは違いその書き換え自体のログは残らない。さらにcommitのハッシュも再発行される。そしてこれをリモートのリポジトリに反映するために<code>git push -f</code>する。なので、以前とは全く違うリポジトリになると考えた方がいい。<strong>もしfilter-branchに失敗したら、当然ながら、絶対にpushしてはいけない</strong>。やり直したい場合は実行環境ではもうログが失われているので、別のディレクトリに移動してfilter-branch実行前の状態をcloneしてやればいい。</p>\n<p>手順はさほど難しくない。まず最初に、コラボレーターやコミッター全員にその時点での変更（branch含む）を全てpushしてもらい、変更作業を止める。そしてを行う作業者の手元で全てのbranchでpullしておく。push漏れ・pull漏れがあるとワークツリーがデグレードしてしまうので忘れずにやって欲しい。</p>\n<p>次にリポジトリから消したいファイルやディレクトリを決める。これは通常のgitコマンドなので複数指定できる。今回はわかりやすいようにXXXフォルダ配下全てとYYY/img/admin-face.jpgファイルを削除してみる。</p>\n<p>歴史の書き換えはたったの数個のコマンド実行で済む。</p>\n<pre title=\"Gitコマンド\"><code data-language=\"shell\">$ git filter-branch -f --index-filter \"git rm -rf --cached --ignore-unmatch XXX/ YYY/img/admin-face.jpg\" --prune-empty -- --all</code></pre>\n\n<p><code>filter-branch</code>の<code>--index-filter</code>オプションで渡しているダブルクォーテーションの中が、各commitに対して行うコマンドになる。<code>git rm -rf</code>なのでフォルダもファイルも対象に消す。見た目わかりづらいが<code>XXX/とYYY/img~</code>の間にはスペースがあり複数指定している。</p>\n<p><code>--chaced</code>オプションがあるとcommit logからだけ削除してワークツリーでは残すようになる（つまりファイルが手元に残る）。<code>--cached</code>オプションがないとワークツリーからも消えるのでそこは注意してほしい。</p>\n<p><code>--ignore-unmatch</code>で当てはまる対象がない時のエラーを無視できる。</p>\n<p><code>--prune-empty</code>があると、対象のファイルをcommit logから消した時に生まれうる、コメントのみの空commitも消してくれるようになる。前述の２つのオプションは<code>git rm</code>コマンドで、<code>--prune-empty</code>は<code>filter-branch</code>のオプションだ。</p>\n<p>ハイフン2つで前のコマンドのオプションから抜け、<code>--all</code>で全ブランチを対象に同じ処理を行う。</p>\n<p>実行完了には少し時間がかかるかもしれない。ファイル数やcommit数で前後する。</p>\n<p>あとはローカルのキャッシュを消したりゴミ掃除したりしていく。</p>\n<pre title=\"Gitコマンド\"><code data-language=\"shell\">$ rm -rf .git/refs/original/\n$ git reflog expire --expire=now --all\n$ git gc --aggressive --prune=now</code></pre>\n\n<p>掃除し終わったら<code>git log -p</code>などで消えていることを確認し、force pushする。</p>\n<pre title=\"Gitコマンド\"><code data-language=\"shell\">$ git push -f</code></pre>\n\n<p>コマンドが<code>$ git push origin &amp;lt;branch-name&amp;gt; -f</code>でないのは、前述では全ブランチに対してfilter-branchを行っているので、これをリポジトリに丸ごと反映したいから。filter-branchをしたのが特定のbranchだけ（あまりないと思うが）ならpush -fする時にbranchを指定しないとそれはそれで事故になるので注意。</p>\n<p>以上となる。リモート反映後に他の作業者にリポジトリをcloneし直してもらえば、以後は重いlogのない軽量なリポジトリとなる。commitがリハッシュされているのは実行環境と別の作業環境でgit logし合って見ればわかる。</p>\n<p>消すファイルの数やcommitの数にもよるので、この歴史の書き換えにかかる時間や軽量化できる容量は一概には言えないが、僕が関わっているプロジェクトで実行したところ8万オブジェクトで1.6GBあったリポジトリが、4万オブジェクトの145MBまで軽量化することができた。すごい威力を感じる。</p>\n<hr>\n<p><code>filter-branch</code>は別にリポジトリの軽量化を目的とした機能ではない。<a href=\"http://qiita.com/Spring_MT/items/f60c391b5dbf569a1d12\">リポジトリにうっかり含めてしまったセキュリティ上問題あるデータをlogからも消し去りたい場合</a>にも使う。全commitから目的のファイルをホニャララするのがfilter-branchの機能というわけだ。また、<code>--index-filter</code>ではなく<code>--tree-fliter</code>を使って同様の処理を行うこともできるが、こちらはcheckoutをbranchごとに行うとのことで<code>--index-filter</code>より低速らしい。<code>--tree-filter</code>では<code>--all</code>オプションはいらないのかどうか、調べたけどすぐに出てこなかったのでわからない。</p>\n<p>実行するのはgitコマンド以外も可能だ。こちらの記事では<a href=\"http://qiita.com/wnoguchi/items/62f5e64ef2ae14b4f0ee\"><code>--tree-filter</code>オプションで、<code>cp -f</code>コマンドで強制的にファイルを上書きコピー</a>している。</p>\n<hr>\n<p>この記事をある程度書いたところで<a href=\"http://easyramble.com/git-filter-branch.html\">もっとわかりやすく書いているブログ</a>があることを知った。悔しいのでdskdでは--index-filterのオプションの書き方を少しだけ詳しく書いた。</p>\n<p><small><ins datetime=\"2015-01-07T12:09:00+09:00\">本文の表現を加筆修正</ins></small></p>\n<h2 id=\"-filter-branch-clone-\">なぜfilter-branchのあとで他の作業者はリポジトリをcloneし直すのか</h2>\n<p><code>filter-branch</code>が実行されたリポジトリをリモートに反映後、他の作業者がcloneではなくそれまでのディレクトリでpullをするとどうなるかというと、普通にMergeされてpullできる。しかし、この作業環境のリポジトリには<strong>削除したかったファイルやそのcommitが残っている</strong>ので、pullしたのちに何かを編集してcommitしてpushすると、<strong><em>消したかったはずの情報がまたリモートに送られてしまい意味がなくなる</em></strong>。さらに、filter-branchしたあとのリポジトリのcommit messageがfilter-branch前のに混ざって二重にcommitしているように見える。ハッシュは異なるので別の変更履歴として扱われるわけだ。<code>git log</code>するとちょっと耐えられない感じになるだろう。</p>\n<p>履歴はよごれるしpushするとfilter-branchが無意味になので、他の作業環境では必ずcloneし直そう。</p>\n<p><small><ins datetime=\"2015-01-07T15:37:36+09:00\">「なぜfilter-branchのあとで他の作業者はリポジトリをcloneし直すのか」の見出しとその本文を追記</ins></small></p>\n<hr>\n<p>下記は自分用のメモ：</p>\n<pre title=\"authorやcommiterを書き換える\"><code data-language=\"shell\">$ git filter-branch --commit-filter '\n GIT_AUTHOR_NAME=\"oti\"\n GIT_AUTHOR_EMAIL=\"otiext@gmail.com\"\n GIT_COMMITTER_NAME=\"oti\"\n GIT_COMMITTER_EMAIL=\"otiext@gmail.com\"\n git commit-tree \"$@\"\n' -- --all</code></pre>\n\n<p>authorやcommiterで秘匿情報が混ざったら<code>--commit-filter</code>を使う。改行は削除してｶﾀｶﾀｯﾀｰﾝすること。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"47":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-07-12T22:33:37","page_id":"47","page_title":"左右marginで任意の比率を保つ","page_tag":["CSS"],"page_description":"calc()とmargin-*: auto;","body":"<p>元ネタは<a href=\"https://twitter.com/hail2u_/status/487903628665970691\">ながしまさんのツイート</a>から。</p>\n<p>固定幅の要素の左右marginでauto値っぽい挙動を保ちつつ、その比率を任意のものにしたいとのこと。実現するには<a href=\"http://www.w3.org/TR/css-values/#calc\">CSS Values and Units Module Level3のcalc()</a>しかない。</p>\n<p>とりあえず、適応したい要素を200*150pxのdivとして、<code>margin-left</code>と<code>margin-right</code>の比２対３になるように書いてみた。</p>\n<pre title=\"CSS\"><code data-language=\"css\">div{\n    margin: 0;\n    margin-left:  calc(100%*2/5 - 200px*2/5);\n    margin-right: calc(100%*3/5 - 200px*3/5);\n    width: 200px;\n    height: 150px;\n    background: red;\n}</code></pre>\n\n<p>できた。</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/n68QV/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>２対３なら合計分を分母にとった数を100% - 200pxの式にそれぞれ掛けてあげる。</p>\n<p>その後、いろいろ検証的なことをして以下で<a href=\"https://twitter.com/hail2u_/status/487928879793721344\">FTW</a>となった。</p>\n<pre title=\"CSS\"><code data-language=\"css\">div{\n    margin: 0;\n\n    margin-left:  calc((100% - 200px) * 2 / 5);\n    margin-right: calc((100% - 200px) * 3 / 5);\n\n    width: 200px;\n    height: 150px;\n    background: red;\n}</code></pre>\n\n<p>上記のように四則演算で丸括弧を使って計算を優先させる構文がcalc()でも使える。</p>\n<p>実はながしまさんに最初のリプライを送るときに<code>calc()</code>の中で<code>()</code>を使うのは試していたんだけど、<code>(100% - 200px)</code>の部分を以下のようにスペースなしで書いていて、それだと動かなかったのでやめていた。</p>\n<pre title=\"CSS\"><code data-language=\"css\">div{\n    margin-left:  calc((100%-200px) * 2 / 5);\n    margin-right: calc((100%-200px) * 3 / 5);\n}</code></pre>\n\n<iframe width=\"100%\" height=\"500\" src=\"http://jsfiddle.net/n68QV/5/embedded/result,css,html\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>加減式の場合、<a href=\"https://twitter.com/hail2u_/status/487940265684897792\">負の値への対応で前後にスペースが必要</a>なのだとか。言われてみれば確かにそうだ。CSS Variablesで<a href=\"https://twitter.com/xl1blue/status/487937984524591104\">変数にハイフンが入った時に区別できないから</a>、という意見ももらった。どちらもなるほどですね。</p>\n<hr>\n<p><ins datetime=\"2014-07-13T17:03:00+09:00\" data-insdate=\"※2014/7/13 17:03\">追記。</ins></p>\n<p>marginの左右両方でcalc()を指定しているけど、<a href=\"http://hail2u.net/blog/webdesign/split-margin-with-ratio.html\">どちらかでcalc()していればもう一方はauto値でよい</a>ようだ。</p>\n<pre title=\"CSS\"><code data-language=\"css\">div{\n    margin-left:  calc((100% - 200px) * 4 / 5 );\n    margin-right: calc((100% - 200px) / 5 );\n}</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\">div{\n    margin-left: auto;\n    margin-right:  calc((100% - 200px) / 5 );\n}</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\">div{\n    margin-left:  calc((100% - 200px) * 4 / 5 );\n    margin-right: auto;\n}</code></pre>\n\n<p>上記３パターンは全て同じことになる。</p>\n<iframe width=\"100%\" height=\"550\" src=\"http://jsfiddle.net/n68QV/6/embedded/result,css,html\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>僕にはもう1,2歩先までコードを簡略化する発想がどうもできないっぽい。なのでCSSおじさんは名乗れない。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"48":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-07-17T18:42:00","page_id":"48","page_title":"overflow: overlay;","page_tag":["CSS"],"page_description":"知っていても役には立たない系のネタ","body":"<p>Google ChromeのDeveloper Toolsで要素のスタイルをいじっていたら、overflowプロパティにoverlayなる値があることを知った。インターネットをざっと検索した感じだとどうやらWebkit系のみで使えるようだ。</p>\n<p><a href=\"/img/overflow-overlay/dev_tools.png\" title=\"overflowのサジェストにoverlay値が出てくる\"><img src=\"/img/overflow-overlay/dev_tools.png\" alt=\"Developer Toolsでoverlay値を表示したキャプチャ\"></a></p>\n<p>W3Cのoverflowの仕様（<a href=\"http://www.w3.org/TR/CSS21/visufx.html#propdef-overflow\">CSS2.1 Visual Effects</a>、<a href=\"http://www.w3.org/TR/css-overflow-3/#overflow-properties\">CSS Overflow Module Level 3</a>、<a href=\"http://www.w3.org/TR/css3-box/#overflow1\">CSS basic box model</a>）を見てもoverlay値に関する記述はない。</p>\n<p>検索結果を追っていくと、2009年にWebkit Bugzillaに投稿された<a href=\"https://bugs.webkit.org/show_bug.cgi?id=32388\">overlay値に対する提案</a>が見つかる。標準仕様になくWebkitでしか動かないなら削除するか-webkit-overlayのようにプリフィックスをつけてはどうかという主旨だが、やりとりの中で<a href=\"http://trac.webkit.org/changeset/14968/trunk/WebCore/css/CSSValueKeywords.in\">2006年に-webkit-overlayをアンプリフィックスした</a>よというコメントがあって驚いた。８年前！えっじゃあ-webkit-overlayが実装されたのいつなんだろう。さらに、overlayはスクロールバーが発生しないので、イベントをトリガーしないという興味深いコメントもある。</p>\n<p>Webkit Bugzillaでは2009年の投稿から2013年まで放置されてて、その後<a href=\"http://jsfiddle.net/rNxgD/\">JSFiddleにデモが置かれた</a>のがきっかけかわからないけど、W3Cのスタイルのフォーラムにも<a href=\"http://w3-org.9356.n7.nabble.com/css3-ui-Proposal-for-an-quot-overlay-quot-value-for-overflow-td244662.html\">overlayの話題</a>が投稿された。</p>\n<p>W3Cのフォーラムではなかなか盛り上がっていたようで<a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh441298.aspx\">マイクロソフトの独自実装</a>のことも紹介されている（これも知らなかった！）。イベントのトリガーの件も議論されそうになったものの、overflowプロパティだけじゃなく他の仕様のことも併せて考えたほうがいいのではみたいな流れになって、最後にスクロールバーの計算方法についての提案のリンクが貼られてスレッドは終わっている。それから１年半ほど経つが、結局overlay値が標準化するでもなく、Webkitから削除されるでもリネームされるでもなく、現在も指定可能になっているという状況のようだ。</p>\n<h2 id=\"-\">ブラウザで確認</h2>\n<p>さっそく一通りのブラウザで表示確認する。前提として、標準設定のMac OSとモバイルブラウザはスクロールバーがデフォルトで非表示であり、コンテンツがスクロール可能な場合はスクロールするとオーバーレイでスクロールバーが表示される。なのでそちらのキャプチャは撮っていない。Macで確認したい場合は<a href=\"/img/overflow-overlay/mac_preferences.png\">環境設定 -&gt; 一般からスクロールバーを「常に表示」にする</a>と良い。</p>\n<p>JSFiddleの最初のデモはあまり見やすくないので、フォークしたもので確認した。左のボックスがoverlay、右はauto値が指定されている。JSFiddleの埋め込みが何も表示されていない場合はResultのタブを押せば出てくるはず。</p>\n<iframe width=\"100%\" height=\"150\" style=\"margin-bottom: 1em\" src=\"http://jsfiddle.net/rNxgD/18/embedded/result,css,html\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p><style>\n.table--post48 td {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n</style></p>\n<table class=\"table--post48\">\n<caption>OS / ブラウザ別の様子。左のボックスがoverflow: overlay、右はoverflow: autoを指定している。</caption>\n<tr>\n  <th>Mac / Safari 7.0.5</th>\n  <td>\n    <a href=\"/img/overflow-overlay/mac_safari_7_0_5.png\" title=\"Mac / Safari 7.0.5\"><img src=\"/img/overflow-overlay/mac_safari_7_0_5.png\" alt=\"Mac / Safari 7.0.5でのキャプチャ\"></a>\n  </td>\n</tr>\n<tr>\n  <th>Mac / Google Chrome 35</th>\n  <td>\n    <a href=\"/img/overflow-overlay/mac_chrome_35.png\" title=\"Mac / Google Chrome 35\"><img src=\"/img/overflow-overlay/mac_chrome_35.png\" alt=\"Mac / Google Chrome 35でのキャプチャ\"></a>\n  </td>\n</tr>\n<tr>\n  <th>Mac / Firefox 30</th>\n  <td>\n    <a href=\"/img/overflow-overlay/mac_firefox_30.png\" title=\"Mac / Firefox 30\"><img src=\"/img/overflow-overlay/mac_firefox_30.png\" alt=\"Mac / Firefox 30でのキャプチャ\"></a>\n  </td>\n</tr>\n<tr>\n  <th>Win / IE11</th>\n  <td>\n    <a href=\"/img/overflow-overlay/win_ie_11.png\" title=\"Win / IE11\"><img src=\"/img/overflow-overlay/win_ie_11.png\" alt=\"Win / IE11でのキャプチャ\"></a>\n  </td>\n</tr>\n<tr>\n  <th>Win / Google Chrome 35</th>\n  <td>\n    <a href=\"/img/overflow-overlay/win_chrome_35.png\" title=\"Win / Google Chrome 35\"><img src=\"/img/overflow-overlay/win_chrome_35.png\" alt=\"Win / Google Chrome 35でのキャプチャ\"></a>\n  </td>\n</tr>\n<tr>\n  <th>Win / Firefox 30</th>\n  <td>\n    <a href=\"/img/overflow-overlay/win_firefox_30.png\" title=\"Win / Firefox 30\"><img src=\"/img/overflow-overlay/win_firefox_30.png\" alt=\"Win / Firefox 30でのキャプチャ\"></a>\n  </td>\n</tr>\n</table>\n\n<p>Mac Chrome 35のキャプチャが一番わかりやすい。通常、overflowのスクロールバーはその要素幅の内側に表示されて、コンテンツ部分の幅が狭まる。しかしoverlay値を指定するとスクロールバーがコンテンツにかぶさるようになる。SafariやWin Chromeのキャプチャでは一見わかりにくいが、<em>改行された数字が１つ飛んでいる</em>ので、スクロールバーにかぶさった分が隠れていると推測できる。上記に埋め込んだjsfiddleのデモではresizeをつけているので、左右に動かしてみるとコンテンツにスクロールバーがかぶさる様子がわかると思う。</p>\n<p>FirefoxとIEでは適応されていないが、その場合の挙動はautoではなくvisibleのようだ。overflowの初期値になるのではなく、無効なプロパティと解釈されてoverflowが宣言されていない状態かつ高さは100pxなのでコンテンツは下にはみ出る状態になる。規定のレンダリング。</p>\n<p>ついでに<a href=\"http://jsfiddle.net/rNxgD/21/\">-ms-autohiding-scrollbarも書いてみた</a>。IE11で見たキャプチャは割愛するが、スクロールバーは出ずにvisible値と同じように表示されているように思う。これが正しい描画なのかわからない……。</p>\n<h2 id=\"-\">イベントをトリガーしない？</h2>\n<p>イベントの件はどうだろうか。そもそも何のイベントについてなのかわからない。おそらくresizeだろうとあたりをつけてコードを書いたけどresizeイベントはwindow（viewport）しか持てないようで検出できなかった。そこでoverflowしているdivの中にもう１つdivを用意してDeveloper Toolsで確認したところ、auto値の方はスクロールバーが出現すると内包しているdivのwidthは小さくなり、overlay値の方はoverlayがない時とwidthが変わらなかった。</p>\n<p>となれば、overlayを指定した要素は内包物の変化でwidthとheightが変わらないことになり、ブラウザレンダーのレベルで描画コストが低いと言えるような気がする。</p>\n<p>任意の要素でresizeイベントが取れれば検証も簡単なのに。都度サイズを調査する関数を呼んでもいいけどなんか微妙な感じがするので書くのをやめた。</p>\n<h2 id=\"-webkit-\">そもそもWebkit系のみ</h2>\n<p>overflow: overlay;があって嬉しい人はあまりいない気がする。現状ではすでにデフォルト設定のMac、iPhoneやAndroidではすでにスクロールバーは非表示だし、スクロールバーが表示される環境のChromeやSafariでもコンテンツ幅が狭まらないとは言え、要素がその分だけ隠れてしまう。隠れていても<em>横スクロールも発生しない</em>し、領域をマウスデバイスなどでドラッグしても隠れている部分を見ることはできず、閲覧者に優しくない。いったいどういう理由でこの値は生まれたんだろうか。</p>\n<p>overlay値は2006年にすでに使用可能だったわけだが、その頃はMacもまだスクロールバーはオーバーレイ表示ではなかった頃だったと思う。となるとスクロールバーを表示しなければならなくたった時にコンテンツ幅に不都合が生じる状況に対応するために都合主義的に実装されたのかもしれない。</p>\n<hr>\n<p>効果と現状から言ってoverlay値がW3Cで標準化されることはなさそう。今回ふとしたきっかけでプロパティの値についての議論を追ってみたが、けっこう面白かったので何かでまたやりたい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"49":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-12-02T10:06:47","page_id":"49","page_title":"適当とテキトー","page_tag":["note"],"page_description":"ニュアンスの再定義みたいなこと","body":"<p>今まで技術系のネタ以外のことをブログに書くのは意図的にやっていなかったんだけど、それだとブログを書くクセがどうしてもつかないと思ったのでやめることにした。やめるのは「ブログを書かないこと」であって、ブログではない。</p>\n<p>その言葉を覚えた頃から、「てきとう」という言葉が気になっている。本来の意味は物事が目的通りに当てはまることを言っているはずなのに、口語では「いい加減にやる」というニュアンスで使われることが多い。言葉狩りをしたいわけではないんだけど、この言葉のニュアンスの違いをどう書き記したものかと思って、中学生の頃から表題のように書き分けることにしている。</p>\n<p>考えると「いい加減」という言葉も不思議だ。ちょうど良い按配という意味のはずがこれもなぜか口語ではまじめに取り組まない感じのニュアンスが出る。でもこれを「イーカゲン」と書くのにはまだしっくりこない。何度か書いてる内に慣れる気がする。読む人は慣れるまで時間かかりそう。</p>\n<p>ブログを書くのも適当にいい加減でやりたい。テキトーでイーカゲンなことも混じるだろうけど、気にしないことにした。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"50":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-12-05T13:34:00","page_id":"50","page_title":"style属性でzoomを指定すると特定の状況でzoomが無効になる","page_tag":["Advent Calendar","CSS"],"page_description":"zoomこわい。","body":"<p><a href=\"http://www.adventar.org/calendars/341\">CSS 珍百景 Advent Calendar 2014</a>５日目のエントリ。</p>\n<p>こちらでの再現ブラウザはGoogle Chrome 39.0.2171.71とiOS 7.1.2 Mobile Safari。状況を詳しく説明すると、外部CSSファイル、及びstyleタグでzoomプロパティがすでに設定してある要素に対して、<strong>CSSで指定されているzoom値と同じ値をstyle属性で指定するとzoomが効かなくなる</strong>というもの。</p>\n<p>style属性で指定するzoom値を変更できる<a href=\"/demo/51.html\">デモを用意した。</a>テキストエリアに数字を入れて隣のaddボタンを押すとその下の要素に<code>style=&quot;zoom: N&quot;</code>が付与されるようになっている。背景に50pxごとのグリッドになっている画像を敷いたので、倍率が少しわかりやすいと思う。ページを開いた時の初期表示ではCSS側の<code>zoom: 2;</code>が効いているはず。</p>\n<p>DevToolsを開いて要素のstyle属性を確認しながら、まずは数値を2にしてaddボタンとremoveボタンを押してみて欲しい。zoomがstyle属性でつくと拡大が無効になり、消すと拡大されるのがわかると思う。addしたのに大きくならない。removeしたのに大きくなる。同値での上書きなので表示サイズは変化しないでそのままになるはずだ。数値を2以外（2.0001なども可）にすれば動作は期待通りになる。同じ値の操作の時のみ、珍事が起きる。</p>\n<p>少々重いが<a href=\"/img/double-zoom-bug/use-zoom.gif\">Gifアニメを用意した</a>ので、再現できない人はこちらを見てほしい。</p>\n<p>そもそも同じ値をstyle属性で指定するシチュエーションなんてほぼない。業務で端末の画面サイズから倍率を算出して上書きする必要があって、JS実装のミスで必要がない端末でも上書きがかかったところ、拡大されなくなっているのを見てこのバグに気づいた。IE11では再現しなかったし、zoomプロパティ未実装のFirefoxでも当然起こらない。</p>\n<p>気づいたのは2つか3つバージョンが前のChromeでだけど、iOS 7.1.2 Mobile Safariでも再現するのを見るに、もしかしたらChromeがBlinkになる前からWebkitの珍挙動として存在していたかもしれない。ちなみに、<a href=\"/demo/52.html\"><code>transform: scale();</code>なら問題ない</a>。</p>\n<p>zoomこわい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"54":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-12-10T10:30:30","page_id":"54","page_title":"僕はCSSを見殺しにした","page_tag":["Advent Calendar","CSS"],"page_description":"CSSよ死をもって我が地肉となれ","body":"<p><a href=\"http://www.adventar.org/calendars/337\">CSS Architecture Advent Calendar 2014</a>の10日目。</p>\n<p>それまではけっこう頑張っていた。スタイルガイドも作っていた。デザイナーとコミュニケーションをとり、拡張性のあるパーツを作っていった。新しく触る人にも読み方や使い方を説明できるようにしていた。</p>\n<p>崩壊はUIデザイナーがいなくなった時に始まった。汎用ボタンは使われなくなった。決まったルールのデザインエッセンスはなくなった。要素間の空白は誰かの感覚で変わった。</p>\n<p>なぜ止めることができなかったのか。それは、デザインの改修が<em>少しずつ</em>行われたからだと思う。その改修は<em>いつのまにか始まり、いつ終わるとも決まっていなかった</em>。あらゆるパターンが同居するデザインをCSSは管理できない。改修途中でも平気でブランチが切られていく。デザイナーがやりたい時にやりたいだけ変えると知ったとき、僕はCSSを管理するのをやめた。</p>\n<p>すでに完成形まで共通化されたCSSでは影響範囲が大きすぎた。それでも既存のルールセットに手を加えたのは、「いままでの共通パーツを使いまわせる」という思いこみがあったからだった。結果的に全ページユニークなデザインになったのを見ると、デザインが変わると決まった瞬間に新しいセレクタを作った方が楽だったのだろう。これは明確に僕の予測ミスだし、途中でもそれに気づいて管理しなおすべきだった。</p>\n<p>見殺しにしたCSSは今もcommonフォルダの中でもがき苦しんでいる。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"55":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-12-12T10:37:05","page_id":"55","page_title":"columnプロパティが特定の状況でおかしくなる","page_tag":["Advent Calendar","CSS"],"page_description":"columnこわい。","body":"<p><a href=\"http://www.adventar.org/calendars/341\">CSS 珍百景 Advent Calendar 2014</a>の12日目。</p>\n<p>colunmプロパティを使った時にいくつかのブラウザで内容物のbreakがおかしくなる。デモは今回はJSFiddleにおいた。</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/o_ti/pcr3pr14/6/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>で、このデモは.itemが３つごとに３カラムに別れて表示される想定でスタイルしている。このHTMLだとfloatではこういう表現はできないし、positionでやるのは面倒なだけなのでcolumnプロパティ最高だなと思っていた。PC版のGoogle Chrome 39系とiOS 7系のMobile Safariは期待どおりで問題ない。.caseの高さを目一杯使って.itemがきちんと収まっている。</p>\n<p><a href=\"/img/column-property-breaking-bug/yep.png\" title=\"期待通りの表示\"><img src=\"/img/column-property-breaking-bug/yep.png\" alt=\".itemは.caseの高さにちょうど収まっている。\"></a></p>\n<p>しかしFirefox 34やIE11では.caseの高さが.item３つ分より足りないような挙動になり、.itemの一部がbreakされて次のカラムにめり込んでいる。.caseに指定した背景色の<code>limegrean</code>が出ているように、別に.case自体の高さが小さくなったわけではない。にも関わらず、.itemの一部が次のカラムにbreakしている。さらに不可解なのは中段のデモで、<code>column-width</code>と<code>column-gap</code>の合計が.caseの幅を超えると.item３つ分の高さがぴったり収まり、一部がbreakされるようなことはなくなるというところ。</p>\n<p><a href=\"/img/column-property-breaking-bug/nope.png\" title=\"期待通りにいっていない表示\"><img src=\"/img/column-property-breaking-bug/nope.png\" alt=\".itemは.caseの高さを利用しきれず、次のcolumnに一部だけbreakして表示されている。\"></a></p>\n<p><code>column-width</code>と<code>column-gap</code>の合計が.caseを超えた時に、column-rule（黒い帯）の表示位置が変になるのも面白い現象ではある。仕様ではカラム間のちょうど中央に配置されるはずだ。</p>\n<p>ややこしいことに、iOS版のGoogle Chrome 39.0.2171.50で見るとiOS 7.1.2では期待通りに表示できるが、iOS 8.1.1では.itemの一部がbreakされてしまう。同じバージョンのブラウザでプラットフォーム別にこういうことが起こるのはちょっと困る（Android OSは怖くて見ていない）。表示の状況をまとめると以下の通りとなる。</p>\n<table>\n  <tr>\n      <td></td>\n      <th>Mac</th>\n      <th>Window</th>\n  </tr>\n  <tr>\n      <th>Chrome 39.0.2171.71</th>\n      <td>○</td>\n      <td>○</td>\n  </tr>\n  <tr>\n      <th>Chrome 41.0.2241.0 canary</th>\n      <td>○</td>\n      <td>○</td>\n  </tr>\n  <tr>\n      <th>Firefox 34</th>\n      <td>☓</td>\n      <td>☓</td>\n  </tr>\n  <tr>\n      <th>Firefox 37.0a1 Nightly</th>\n      <td>☓</td>\n      <td>☓</td>\n  </tr>\n  <tr>\n      <th>Internet Explorer 11</th>\n      <td>-</td>\n      <td>☓</td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n      <td></td>\n      <th>iOS 7.1.2</th>\n      <th>iOS 8.1.1</th>\n  </tr>\n  <tr>\n      <th>Mobile Safari</th>\n      <td>○</td>\n      <td>☓</td>\n  </tr>\n  <tr>\n      <th>Chrome 39.0.271.50</th>\n      <td>○</td>\n      <td>☓</td>\n  </tr>\n</table>\n\n<p>IE12 Platform Previewでどうなっているか気になるけど、<a href=\"http://www.w3.org/TR/css3-multicol/\">CSS Multi-column Layout Module</a>は全然動いてないので期待はできなそう。それに、columnをまたいだ時の内包物のbreak指定はbreak-after, break-before, break-insideというプロパティで指定できるかと思いきや、これらのプロパティの<a href=\"http://www.w3.org/TR/css3-multicol/#break-before-break-after-break-inside\">対応メディアはpaged</a>だった。なのでvisualグループのscreenメディアでは使えない。<a href=\"http://dev.w3.org/csswg/css-multicol/#break-before-break-after-break-inside\">Editor&#39;s Draftではメディアがvisualに変わっている</a>ので、このまま行けばbreak-*プロパティで対応していくようになるのかもしれないが、そもそも高さが十分にあるはずなのにbreakされてしまうというバグなので、仕様うんぬんじゃなくcolumnなボックスのレンダリングの問題な気がする。なのでブラウザ頑張れ。</p>\n<p>業務ではこの表示をクロスブラウザにすることができずに、結局columnごとにdivを作りそれをfloatさせて対応した。.itemの数が直近のユーザーの操作によって変動するので、合計値からcolumn数と幅だけ算出すれば簡単だなと思ったのだけど、つらい結果になった。</p>\n<p>columnこわい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"56":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2014-12-15T00:21:55","page_id":"56","page_title":"UE BOOMを買った","page_tag":["note"],"page_cover":"/img/hello-ue-boom/01.jpg","page_description":"無線スピーカーを買ったぞ！","body":"<p><img src=\"/img/hello-ue-boom/01.jpg\" alt=\"パッケージが好き。\"></p>\n<p>Bluetoothスピーカー<a href=\"http://www.ultimateears.com/ja-jp/boom\">UE BOOM</a>を買った。色はApple Store限定のクリスタルを選んだ。どれもクールで全色欲しい。</p>\n<p>今、自室のデスクにはスピーカーがなくて、ノートPCからイヤホンを引き伸ばして音楽を聞いたりしていた。耳が疲れると本体のスピーカーから音を出していたのだけど、音質はまったく良くないので据え置けるスピーカーを買おうと思っていた。大きさと値段と音質のバランスをいろいろ考えて１年くらい探していたのだけど有線では満足のいくバランスのものがない。そこでワイヤレススピーカーで探すことにした。ワイヤレスだとある程度の音質しか期待しないし、あまり品数も多くないので選択肢がしぼりやすい。結局、１年も探していた有線スピーカーに対して、ワイヤレススピーカーはほとんど１日で決めてしまった。</p>\n<p>大きさは500ml弱のタンブラー程度。重さは約540gと、ほとんどペットボトル１本分で場所を取らない。Bluetooth接続なのでiPhoneでもノートPCでも音を出せる。音質はあまり良くないだろうなと勝手に思ったいたけど、この大きさなら十分なものだった。イコライザーもあるので弱く感じる低音はそれでカバーできる。最大15時間再生というのもけっこうすごいけど、これで耐水性があるというのに驚いた。ためしに浴室に持って行ってシャワーで水をかけてみたり湯船に漬けるみたりすると、さすがにメッシュ部に水がついて音がこもるが、水を切れば戻る。普通に耐水ですごかった。</p>\n<p>筒型だからか、デスクでもキッチンでも浴室でもどこにおいても違和感がなくてとても気に入った。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"57":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-01-24T12:18:20","page_id":"57","page_title":"EDJOなオブジェクトの妄想","page_tag":["CSS"],"page_description":"Every Declaration Just Once","body":"<p>ながしまさんのEvery Declaration Just Onceアプローチについてのエントリー２つ（<a href=\"http://hail2u.net/blog/webdesign/every-declaration-just-once-example.html\">Every Declaration Just Onceの例</a>と<a href=\"http://hail2u.net/blog/webdesign/oocss-drawbacks-and-gifts-of-every-declaration-just-once.html\">OOCSSの欠点とEvery Declaration Just Onceのもたらすもの</a>）を興味深く読んだ。</p>\n<p>僕もかねてから、CSSプリプロセッサーはCSSを複雑にするだけして何も楽にならないのではないかと思っていた。変数やmixinは出力されるスタイル宣言郡を型のようなものに設定づけ、再利用が可能な便利なものにしてくれる。しかし書式の限られたスタイル宣言郡を使い回すのは柔軟と言えるだろうか。</p>\n<p><a href=\"/archives/54.html\">僕がかつて見殺しにしたCSS</a>は、無限に続く断続的な変更になんとかついていこうとした結果死んだ。現実のCSSのメンテはそういった型の中では収まらないレベルの変更ばかりだと思っている。少しでも違うスタイルが発生したらincludeした宣言ブロック内でmixinに入っているスタイルを上書きするのは賢くないし、かと言ってその都度新しいコンポーネントやそれをmixin化したものを作るのは、既存のパーツを壊さないにしても、メンテナンス性があるとはお世辞にも言えない。それをしていくと出来上がるのは「創業以来継ぎ足してきた秘伝のCSS」であり、次世代への負債でしかない。それをリファクタリングしていく時間がとれるならナシではないのだけど。</p>\n<p>そもそもの宣言ブロックの粒度が小さければそういった問題も起こりにくい。その極限をEvery Declaration Just Onceアプローチという手法が示してくれた。おそらくこういう書き方を素でやっていた人はいるだろう。それに名前がついただけかもしれない。CSS設計に注目が集まっていた近年、回帰したとも言えるこの手法に名前がついたことは大きい。</p>\n<h2 id=\"-\">ふとした妄想</h2>\n<p>EDJOがグルーピングセレクタに対して単一のスタイル宣言が指定されるなら、書き方としては逆もできそうな気がする。例えばこんなフォーマットはどうか。</p>\n<pre title=\"オブジェクトのようなもの\"><code data-language=\"javascript\">font-family: {\n  monospace: [\"pre\", \"code\", \"kbd\", \"xmp\", \".aa\"],\n  sanserif: [\".content\"],\n  serif: [\".mainHeading\", \"sideHeading\"]\n},\nmargin: {\n    top: {\n        10px: [\".box\", \".icon\", \"#side\", \".sideHeading\"],\n        30px: [\".mainHeading\", \".social\", \"footer\"]\n    },\n    bottom: {\n        10px: [\".box\", \".social\"],\n        10px!important: [\".icon\"]\n    }\n}</code></pre>\n\n<p>プロパティがキーで、値に配列でセレクタが入っているオブジェクトのようなもの。サブプロパティを持つ場合は入れ子になる。<a href=\"http://morishitter.hatenablog.com/entry/2015/01/16/005343\">morishitterさんが書いていたCSSプリプロセッサーのplaceholderとextendを使った手法</a>だと、それぞれのスタイル宣言をすべてplaceholderとして別書きで持って置かなければならず、SCSSファイルがかなり鬱陶しいことになるように思う。<a href=\"http://sassmeister.com/gist/59645863c7dbe8c23f84\">ためしに少し書いてみた</a>。たとえばreset.cssがEDJOで書かれたら、ちょっと見ていられない感じになる。あれはライブラリのようなものだからEDJOに置き換える必要はないけど。それに対して上記のようなオブジェクトであれば、必要なプロパティの値のところだけにセレクタを書き足すので記述が少なくて済む。仮にEDJOスタイルのCSSコンパイラーが出現するなら、こういうのもありなんではないだろうか。</p>\n<p>まぁ、現実そんなものはないし、オブジェクト形式だと変数とかfor文とかどうすんだってなるし、別途処理を書いていくともうJavaScriptでオブジェクトを手捏ねしているのと変わらない。あまりCSSライクな書き方ではないので見た目の気持ち悪さもすごそう。<a href=\"/archives/23.html\">妄想を書き留めておきたくなるのが数年ごとにある</a>ようなので、今回もそんな感じでイーカゲンに聞き流してくれると嬉しい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"58":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-02-17T13:14:00","page_id":"58","page_title":"Google Chrome 40でreversed属性のついたol要素のカウンターがおかしい","page_tag":["HTML"],"page_description":"reversed属性、使ってます？","body":"<p><ins datetime=\"2015-03-03T12:00:00+09:00\">※2015/3/3 追記あり</ins></p>\n<p>別にバグ報告ブログをやっているつもりはないのだけどたまたま見つけたので記事にする。</p>\n<p>HTML5ではol要素にreversed属性をつけるとリストが降順のものとして意味づけられ、list-itemのカウンターの数値が逆順で表示されるようになる。</p>\n<p>この「<code>reversed</code>のついたol」が中にさらにリストを持つとき（入れ子リストのとき）、Google Chrome 40でカウンターの表示がおかしくなるバグに気づいた。言葉で説明すると、入れ子にしているliの個数も全て合計した数値で降順にカウンターが表示されるというもの。わかりづらい。</p>\n<p>問題のマークアップはこう。</p>\n<pre title=\"reversed属性をもったリストのマークアップ\"><code data-language=\"html\">&lt;ol <mark>reversed</mark>&gt;\n  &lt;li&gt;快晴&lt;/li&gt;\n  &lt;li&gt;晴れ\n    &lt;ol <mark>reversed</mark>&gt;\n      &lt;li&gt;薄曇&lt;/li&gt;\n      &lt;li&gt;曇り\n        &lt;ol&gt;\n          &lt;li&gt;煙霧&lt;/li&gt;\n          &lt;li&gt;砂塵嵐&lt;/li&gt;\n          &lt;li&gt;地吹雪&lt;/li&gt;\n        &lt;/ol&gt;\n      &lt;/li&gt;\n      &lt;li&gt;霧&lt;/li&gt;\n      &lt;li&gt;霧雨&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/li&gt;\n  &lt;li&gt;雨\n    &lt;ol&gt;\n      &lt;li&gt;みぞれ&lt;/li&gt;\n      &lt;li&gt;雪&lt;/li&gt;\n      &lt;li&gt;霰&lt;/li&gt;\n      &lt;li&gt;ひょう&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/li&gt;\n  &lt;li&gt;雷&lt;/li&gt;\n&lt;/ol&gt;</code></pre>\n\n<p>Google Chrome 40.0.2214.94 (64-bit)とFirefox 35.0.1で表示したスクリーンショットを以下に載せる。</p>\n<p><a href=\"/img/reversed-order-list-counter-bug/ss_chrome40.png\" title=\"counterの数値が大きい\"><img src=\"/img/reversed-order-list-counter-bug/ss_chrome40.png\" alt=\"counterの数値が大きい\"></a></p>\n<p><a href=\"/img/reversed-order-list-counter-bug/ss_firefox35.png\" title=\"counterの数値が適切\"><img src=\"/img/reversed-order-list-counter-bug/ss_firefox35.png\" alt=\"counterの数値が適切\"></a></p>\n<p>Chromeでは一番親のolのカウンターが15から始まり12で終わっている。Firefoxだと一番親のolのカウンターは上から4,3,2,1となっている。15は親のol要素の中の全てのli要素の合計数だ。liをどこかに増やすとその分カウンターの数値も増える。</p>\n<p>他のブラウザでは見ていないが、<code>reversed</code>がついていない通常の昇順リストで考えれば、一番親のolのカウンターが12から始まって15で終わっていたらおかしいのだから、やはり入れ子分のliは数えずに同階層のliの個数分だけがカウンターの数値になるのが正しい表示だと思う。</p>\n<p><a href=\"http://www.w3.org/TR/html5/grouping-content.html#attr-ol-reversed\">HTML5のreversed属性をもつolの仕様</a>（<a href=\"http://momdo.github.io/html5/grouping-content.html#attr-ol-reversed\">日本語訳</a>）を見てみたけど入れ子した時のカウンターについての記述は特にないようだ。入れ子にしているolをulに変えたりしてもかわらなかった。とにかく<code>reversed</code>を持つolに入れ子リストがあるとGoogle Chrome 40でおかしくなる。42.0.2306.0 canaryでも同様の現象が確認できた。</p>\n<hr>\n<p>一般的なウェブ制作ではリスト要素のカウンターやリストマーカーをそのまま使うことはあまりないし、さらにreversedのついたolで入れ子でリストを含むとなると巷での再現性はさらに下がるだろう。カウンターも<code>list-style-type: none;</code>にしてしまっている場合がほとんどだと思う。印刷用CSSでlist-itemのカウンターをノーマライズして初めて露見する程度だろうか。Chrome限定のバグっぽいので今後も気にする必要は出てこない気がする。</p>\n<p><a href=\"/archives/50.html\">zoomのバグ</a>のように発生条件がレアなものは修正されずに長い間放置されてもおかしくないが、Chromium Projectのissueで探したら<a href=\"https://code.google.com/p/chromium/issues/detail?id=432054&amp;can=1&amp;q=reversed&amp;colspec=ID%20Pri%20M%20Week%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified\">バグレポートはちゃんとあった</a>。2014年11月11日にレポートがあり、当時のChrome 41とChrome 38で再現可能だったようだ。ステータスは今年の1月6日ですでにfixedになっている。手元のcanaryで再現するのはChrome 42にマージが間に合わなかったからだろうか。43で直っていたら忘れずに追記したい。</p>\n<p>ちなみに先のISSUEでは<a href=\"http://jsbin.com/dodicecoha/1/edit?html,output\">このサンプルHTMLがリンクされていた</a>。Chromeでみてもらえば、上記のスクリーンショットのようにカウンターがおかしいのが確認できる。reversedがつくだけでこうなってしまうんだからブラウザも大変なんだなと思った。</p>\n<hr>\n<p><ins datetime=\"2015-03-03T12:00:00+09:00\">※2015/3/3追記。Google Chrome 43 canaryが公開されたので確認したところ、バグは修正されていた。めでたしめでたし。</ins></p>\n<p><a href=\"/img/reversed-order-list-counter-bug/ss_chrome43.png\" title=\"カウンターの数値が適切に表示されるようになったGoogle Chrome 43 canary\"><img src=\"/img/reversed-order-list-counter-bug/ss_chrome43.png\" alt=\"カウンターの数値が適切に表示されるようになったGoogle Chrome 43 canary\"></a></p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"63":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-03-26T18:08:21","page_id":"63","page_title":"TRBLメソッドでbackground-sizeを代替する","page_tag":["CSS"],"page_description":"TRBLメソッドすごいな〜","body":"<p>親要素に対して子要素を上下左右に中央配置するTRBLメソッドというものがある。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.wrap{\n  <mark>position: relative;</mark>\n  <mark>width: 300px;</mark>\n  <mark>height: 300px;</mark>\n\n  border: 1px solid magenta;\n  resize: both;\n  overflow: hidden;\n}\n\n.inner{\n  <mark>position: absolute;</mark>\n  <mark>top: 0;</mark>\n  <mark>right: 0;</mark>\n  <mark>bottom: 0;</mark>\n  <mark>left: 0;</mark>\n  <mark>margin: auto;</mark>\n\n  width: 176px;\n  height: 244px;\n\n  background-color: grey;\n}</code></pre>\n\n<p><a href=\"/demo/59.html\">デモで確認できる</a>。</p>\n<p>.innerをimgタグにして、画像の大きさが不定の時でも頑張る方法は<a href=\"/archives/29.html\">以前記事にしている</a>ので参考までに。</p>\n<p>このTRBLメソッドでさらに頑張ると、背景指定ではなくimgタグを使いつつも<code>background-size: 100% auto;</code>のような表示が可能になる。</p>\n<p>元ネタは<a href=\"https://twitter.com/_tsmd/status/580611589939859457\">そめさんのツイート</a>から。</p>\n<h2 id=\"-\">要件</h2>\n<ul>\n<li>div &gt; imgの構造</li>\n<li>divの幅と高さは固定</li>\n<li>imgの大きさは不定</li>\n<li>imgはdivに対して横幅いっぱいに表示させたい</li>\n<li>divに対してimgの高さが大きい時は上下に均等にはみ出させて隠す</li>\n<li>divに対してimgの高さが小さい時は上下に均等に余白を残す</li>\n<li>IE8でも表示できる</li>\n</ul>\n<p>普通に<code>img{width: 100%;}</code>するだけだと上下方向のセンタリングができない。背景画像を指定する方法で幅のフィットだけ（クライアントに）諦めさせたいところだけど、構造が変えられないので不可。background-sizeでやれれば<a href=\"http://jsfiddle.net/x2nb9o7w/\">一番簡単</a>だけどIE8はbackground-sizeプロパティに対応していない。ということでTRBLメソッドを使う。</p>\n<p>画像の横幅が常に親要素にフィットするということは<code>width: 100%;</code>を加えるとできるが、それだけではダメで4辺の値を工夫する必要がある。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.wrap{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  <mark>overflow: hidden;</mark>\n}\n\n.wrap img{\n  position: absolute;\n  top: <mark>-100%;</mark>\n  right: <mark>-100%;</mark>\n  bottom: <mark>-100%;</mark>\n  left: <mark>-100%;</mark>\n  margin: auto;\n  <mark>width: 100%;</mark>\n}</code></pre>\n\n<p><a href=\"/demo/60.html\">ボタンを押すとねこ画像が切り替わって挿入されるデモ</a>を作った。どのサイズの画像でも<code>background-size: 100% auto;</code>と同じ表示形式になっているのが確認できると思う。画像の読み込みが少し重い。JavaScriptがイーカゲンなのには目をつぶって欲しい。PlaceKittenはサイズの組み合わせによっては表示してくれない場合があり、珍妙なif文を書かざるを得なかった。</p>\n<h2 id=\"contain-cover-\">containもcoverも</h2>\n<p>background-sizeの他の値もTRBLメソッドの応用で代替できる。代表的な値は<code>100% auto</code>, <code>auto 100%</code>, <code>contain</code>, <code>cover</code>だろう。.wrapのルールセットは同じなので、画像のスタイルだけそれぞれまとめると下記のようになる。</p>\n<pre title=\"CSS\"><code data-language=\"css\"><mark>/* like background-size: 100% auto; */</mark>\n.wrap img{\n  position: absolute;\n  top: -100%;\n  right: -100%;\n  bottom: -100%;\n  left: -100%;\n  margin: auto;\n\n  <mark>width: 100%;</mark>\n}</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\"><mark>/* like background-size: auto 100%; */</mark>\n.wrap img{\n  position: absolute;\n  top: -100%;\n  right: -100%;\n  bottom: -100%;\n  left: -100%;\n  margin: auto;\n\n  <mark>height: 100%;</mark>\n}</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\"><mark>/* like background-size: contain; */</mark>\n.wrap img{\n  position: absolute;\n  top: -100%;\n  right: -100%;\n  bottom: -100%;\n  left: -100%;\n  margin: auto;\n\n  <mark>max-width: 100%;</mark>\n  <mark>max-height: 100%;</mark>\n}</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\"><mark>/* like background-size: cover; */</mark>\n.wrap img{\n  position: absolute;\n  top: -100%;\n  right: -100%;\n  bottom: -100%;\n  left: -100%;\n  margin: auto;\n\n  <mark>min-width: 100%;</mark>\n  <mark>min-height: 100%;</mark>\n}</code></pre>\n\n<p>それぞれの表示を<a href=\"/demo/61.html\">ヤンチャに切り替えられるデモ</a>を置いた。JSでクラスを操作する関係でCSSが少し読みづらい。なのでルールセットは上記を参考にしてほしい。</p>\n<h2 id=\"trbl-0-trbl-100-\">TRBL: 0;ではなくTRBL: -100%;</h2>\n<p>containを代替したい時は4辺の値は<code>-100%</code>でも<code>0</code>でよいが、それ以外の時は<code>-100%</code>でないと、ブラウザによっては縦や横方向のセンタリングがうまく効いてくれない場合があった。4辺0値の時の表示でこちらで確認できた組み合わせは以下のとおり。</p>\n<table>\n    <caption>4辺0値のTRBLメソッドでセンタリングができない方向</caption>\n    <tr>\n        <th>代替したいbackground-size値</th>\n        <th>Internet Explorer 8</th>\n        <th>Firefox 36</th>\n        <th>Chrome 41</th>\n    </tr>\n    <tr>\n        <th scope=\"col\">100% auto</th>\n        <td>-</td>\n        <td>縦</td>\n        <td>-</td>\n    </tr>\n    <tr>\n        <th scope=\"col\">auto 100%</th>\n        <td>横</td>\n        <td>横</td>\n        <td>横</td>\n    </tr>\n    <tr>\n        <th scope=\"col\">contain</th>\n        <td>-</td>\n        <td>-</td>\n        <td>-</td>\n    </tr>\n    <tr>\n        <th scope=\"col\">cover</th>\n        <td>横</td>\n        <td><strong>横と縦</strong></td>\n        <td>横</td>\n    </tr>\n</table>\n\n<p><a href=\"/demo/62.html\">チェックはこのページを使った</a>。すこしややこしいのだが、上表の方向はそのまま子要素の画像が縦長か横長かとイコールになっている。つまり、「4辺0値のTRBLメソッドで<code>100% auto</code>を表現しようとすると<em>縦長の画像</em>で<em>縦方向のセンタリング</em>がFirefox 36で効かない」。横長の画像なら縦方向のセンタリングはFirefox 36でもちゃんと効く、ということ。</p>\n<p><code>cover</code>についてはFirefox 36だけは画像のアスペクト比にかかわらず両方向でセンタリングが効かず、<code>top: 0</code>, <code>left: 0</code>だけ指定されたような配置になる。辺指定なしのデフォルトとも見える。</p>\n<h2 id=\"-\">互いに引っ張り合う座標指定</h2>\n<p>フィットさせて親要素より上下や左右がはみ出る画像だと、<code>0</code>値ではセンタリングがうまくいかなくなるのは不思議だ。上と左へのマイナス方向の配置が不足している感じがする。<code>-100%</code>値だと、4辺が<em>お互いを大きく引っ張り合う</em>ように座標が指定され、上下も左右もセンタリングしてくれるようになるのということなのだろうか。</p>\n<p>値は4つとも同じであれば<code>-200%</code>でも<code>-1000%</code>でもいいが、子要素の画像の幅や高さは親要素ベースで%計算されているので、<code>-50%</code>より大きな数値にしてしまうと画像サイズによってはズレが生じてくる気がする。<code>-100%</code>にしておくのが無難だと思う。</p>\n<hr>\n<p>2015年になってもTRBLメソッドについて書いた。<a href=\"http://unformedbuilding.com/articles/firefox-style-center-middle-aligned-css/\">2012年にまとりさんが記事にして</a>からだいたい年に１回はネタにしてる。このルールセットには仕事でもずいぶん助けられたし、CSSの面白さも感じられるいいメソッドだと思う。</p>\n<p><small>Special Thanks! <a href=\"https://twitter.com/understandard\">@understandard</a>(検証を手伝ってくれたので今半をおごる可能性が高い)</small></p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"64":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-04-07T17:16:10","page_id":"64","page_title":"SKAGEN BLUE DIALS","page_tag":["note"],"page_description":"なぜ腕時計は増えていくのか","body":"<p>SKAGENの時計を買った。BLUE DIALSというコレクションの、<a href=\"http://www.skagen.com/us/en/hidden-arrays/blue-dials.html\">Hald Leather Multifunction Watch</a>とやら。</p>\n<p>SKAGENの時計は三本目だと思う。なんで時計というのは一つ持っていれば十分なのにいくつも買ってしまうんだろうか。既持のSKAGENでも他の時計でも文字盤はシルバーかブラックばかりだったのだけど、春だからか青い文字盤に吸い寄せられた。</p>\n<p>DAYは個人的に必須条件なので構わないが、AM/PMは必要ない。ここだけとって3000円くらい安くしてほしい。あと、商品ページを見ていたら違うカラバリがあることを知り、<a href=\"http://www.skagen.com/us/en/hidden-arrays/blue-dials/hald-leather-multifunction-watch-pdpskw6169p.html?referer=productlisting\">そちらの方が圧倒的に好み</a>だったので今ちょっとつらい気持ちになっている。</p>\n<hr>\n<p>ダーツする時は時計はつけたまま、ビリヤードする時ははずす派です。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"65":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-04-09T16:28:45","page_id":"65","page_title":"Launch dskd v4","page_tag":["note"],"page_description":"BEM離れ","body":"<p>数日前にブログをバージョンアップした。</p>\n<p>トピックとしてはマークアップの刷新とBEM離れくらい。あとは内部的にMarkdownにしたとかビルド環境も一緒に含めるようにしたとかCC BY-NCライセンスにしたとかその辺。MTの本体はリポジトリに含めることができないので、このリポジトリをクローンしてもサイトはビルドできないのがつらい。GitHubに課金してプライベートリポジトリにしようかとか考えたけどリポジトリをCCで公開するのも目的の一つだったのでやめた。</p>\n<p>ビジュアル面も多少のリニューアルはした。ブログの背景はバージョンを重ねるごとに明るくなっていってる。ロゴとhr要素の装飾にSVGを使っているのと、<a href=\"http://dotcolon.net/font/vegur/\">Vegur</a>というフォントをWeb Fontsにしている。polyfillを読み込んでいないので必然的に古いブラウザには対応しなくなった。それとメディアクエリーで幅の狭いブラウザでの表示も最低限は作っている。記事をMarkdown記法で管理するようにしたので、画像挿入のスタイルがだいぶ甘いのは勘弁してほしい。</p>\n<p>Advent Calendarを作ってがんばったBEMも一旦さようならした。このブログがBEM管理する規模じゃないからくらいの理由。</p>\n<p>v4の構想は2014年の夏頃からあった。リポジトリにbranchを作ったのが2015年3月の初めだから、ひと月ほどでバージョンアップできた。細部を見ると甘いところはまだまだある。そういうところはマイナーアップデートでこっそり直していこうと思う。</p>\n<p>v4ではMTによるビルドがひたすらつらかった。v5では違うビルドツールを採用したい。MTやめるやめる詐欺の可能性はなくはない。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"66":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-05-16T22:46:40","page_id":"66","page_title":"開発環境構築作業の理想","page_tag":["note"],"page_description":"男は黙って再インストール","body":"<p>開発のメインで使っているMacBook Airを再インストールした。黒い画面での開発環境をもう一度作り直したかった。</p>\n<p>この端末で最初に開発環境を設定した時はMac Portsでいろいろインストールしてたのだけど、後になってImageMagicを入れる時にどうしてもうまく行かず、Homebrewで入れるなどした。その時にMac Portsの設定ファイルは別のディレクトリに移動しろとかいうアラートが出て、使われない黒い画面用のファイルがユーザールートにぽつんとあるのがなんか気持ち悪くなった。</p>\n<p>あとanyenvを使っていたのを途中でやめたりとかもしていて、~/や/userの中がもぞもぞしているのがどうも落ち着かなかった。.bashrcもいろいろ愉快な感じで収拾がつかない。なので思い切って再インストールすることにした。男は黙って再インストールなのだ。</p>\n<p>Macの初期化、OSのインストールと設定、アプリケーションのインストールと設定、コマンドラインツールのインストールと設定......。このステップを終わらせるだけでダウンロード時間も含めて丸一日かかる。この間、端末に張り付いていないといけないのも辛かった。こういったセットアップはもう自動化されてもいいのではないだろうか。</p>\n<p>OSの設定はフラグを切り替えるシェルスクリプトを実行するだけとかでやりたい。zshやnpmのセットアップも、thenをうまく使えば依存パッケージに順応した流れで実行できるような気がする。GUIアプリケーションの方は、インストールするアプリケーションを登録しておき、アクティベーション時のIDとPASSやインストールオプションなどもなんらかの形であらかじめ指定しておくことでどうにかできるようになりたい。</p>\n<p>OSの設定、GUIアプリの設定、コマンドラインツールの設定の3つのシェルスクリプトを実行すればあとはコーヒーすすって水樹奈々のライブBlu-rayでも泣きながら観ていれば良い、そんな開発環境構築作業が僕の理想だ。</p>\n<p>しかし、OSのシステム環境設定をコマンドラインからカジュアルに書き換えられていいのかという問題意識がすぐにわいてくる。同じようにセットアップの自動化を考える人は今までも多くいると思われるが、そういった一括設定ツールを作成している人は見かけない（僕の観測範囲）。せいぜい、コマンドラインツールのセットアップフローをシェルスクリプトにするくらいが関の山といった感じだ。</p>\n<p>Mac OSにはdefaultsコマンドというものがあるが、変更できるのはシステム環境設定.appや各アプリケーションの環境設定では<em>手の届かないところ</em>ばかりで、普通にGUIでシステム環境設定から設定を変更する操作をコマンドラインで代用するまではできない。</p>\n<p>他のサードパーティー製アプリケーションにしたって、インストーラーをシェルが実行することはできても、インストールウィザードのGUIなボタンなどの操作はコマンドラインから操作できない。</p>\n<p>結局、人がマシンに張り付いて一つ一つポチポチやっていくしかないのだろう。統合再インストールツールのようなものがいつかは出現すると期待している。</p>\n<p>ところで、ディスクユーティリティーの消去がSSDだと驚異的に速かった。HDD時代の不安と期待の入り混じった消去中のあの時間は、フラッシュストレージ時代にはどこか遠くへ行ってしまったんだ。技術はいつも、人間から何かを奪って成長する。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"67":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-06-02T00:43:28","page_id":"67","page_title":"キーバインドの競合","page_tag":["note"],"page_description":"あちらを立てればこちらが立たず","body":"<p>自分はSublime Text 2（以下ST2）をメインのエディターにしている。</p>\n<p>ST2にはMacだと<kbd>command</kbd>+<kbd>control</kbd>+<kbd>↑</kbd> or <kbd>↓</kbd>でキャレットのある行を前後の行と入れ替える機能がある。大変便利なので重宝していたのだけど、このキーバインドで煩わしい問題が起きたので記念ポエムを書く。</p>\n<p>使用マシンがMacBook Air 11-inchで画面に余裕がない人生を強いられているから、<a href=\"http://spectacleapp.com/\">Spectacle</a>というカレントウィンドウをリサイズできるユーティリティーソフトを入れてみた。しかし前述の<kbd>command</kbd>+<kbd>control</kbd>+<kbd>↑</kbd> or <kbd>↓</kbd>のキーバインドがSpectacleと競合し、ST2の方の機能が使えないということが起こった。</p>\n<p>SpectacleもキーバインドはカスタマイズできるのでST2とかぶらないように変更しST2の行入れ替えも動作してウハウハと思ったのは束の間、今度はPhotoshopと競合した。なのでまたSpectacleの方を変更したら、今度は<a href=\"http://theolabrothers.com/\">Sip</a>というカラーピッカーと競合した。思わず舌打ちした。</p>\n<p>ST2とPhotshopはアプリケーションが互いに干渉することはないが、SpectacleやSipといったものは他のアプリケーションを使っている間でも操作ができるようにキーバインドの影響するレイヤーが上位になっている。Alfredもこの類だ。</p>\n<p>こういった上位レイヤーのアプリケーションにたくさんのキーバインドが設定されていると、下位レイヤーのアプリケーションにもろに影響してそれらの便利機能が失われてしまう。</p>\n<p>インストールしたてではキーバインドを知っていることはなく、またキーバインドというのは使ってるアプリケーションと強く紐付いて認識しているため、カスタマイズ中でも「あ、この組み合わせはあっちのアプリで使ってるな」などとすぐに思い至ることは少ない。Macのシステムのキーバインドとも競合していたりでキー設定のループからなかなか抜け出せない。</p>\n<p>ST2はそのあたり賢くて、半分くらいは<kbd>command</kbd>+<kbd>k</kbd>の後に連続でキーを入力する方式で豊富なキーバインドを実現している。この連続入力式のキーバインドができるアプリケーションは少ないと思う。</p>\n<p>前ポストの話にも繋がるが、こういう設定をちまちまやるのは本当に時間の無駄に感じてしまう。なのでこういった設定ファイルはすべからくエクスポートできるようになっていると嬉しい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"68":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-08-14T01:26:24","page_id":"68","page_title":"yargsを使ってタスク自動化ツールのコマンドにオプションを指定する","page_tag":["Node.js"],"page_description":"yargs便利ですわ〜","body":"<p>Gruntやgulpを使っていると、タスクにオプションを渡して処理を切り分けたいっていう欲求が出てくる。そういう時は<a href=\"https://www.npmjs.com/package/yargs\">yargs</a>を使えば、コマンドにオプションを指定することでそれをタスク側で受け取ることができるようになる。</p>\n<p><code>npm install --save-dev yargs</code>したのち、タスクを書いてるJSファイル（Gruntfile.jsとかgulpfile.jsとか）で、</p>\n<pre title=\"JavaScript\"><code data-language=\"javascript\">var yargs = require('yargs').argv;</code></pre>\n\n<p>とやって、タスクの実行で</p>\n<pre title=\"command\"><code data-language=\"shell\">$ gulp sass --device=pc</code></pre>\n\n<p>とすると、タスクを書いてるJS内で<code>yargs</code>にキーと値がオブジェクトで格納されるので、</p>\n<pre title=\"JavaScript\"><code data-language=\"javascript\">yargs.device  // -> 'pc'</code></pre>\n\n<p>という按配に取得できる。便利。</p>\n<p>オプションは複数渡せるし、真偽値にもできる。試しに以下のようなタスクを書いて実行してみる。</p>\n<pre title=\"gulp task\"><code data-language=\"javascript\">gulp.task('test', function() {\n    console.log(yargs);\n});</code></pre>\n\n<pre title=\"command\"><code data-language=\"shell\">$ gulp test --name=oti --male --female=false --'rain bringer' --note='oti is not real name.'</code></pre>\n\n<p>結果はこちら。</p>\n<pre title=\"console\"><code data-language=\"shell\">[11:34:21] Using gulpfile ~/develop/mbrs/test-yargs/gulpfile.js\n[11:34:21] Starting 'test'...\n{ _: [ 'test' ],\n  name: 'oti',\n  male: true,\n  female: 'false',\n  'rain bringer': true,\n  note: 'oti is not real name.',\n  '$0': '/Users/tkg/.nodebrew/current/bin/gulp' }\n[11:34:21] Finished 'conslog' after 1.83 ms</code></pre>\n\n<p><code>yargs</code>に渡されたオブジェクトにいろいろ入る。見づらいので整形。</p>\n<pre title=\"javascript\"><code data-language=\"javascript\">{\n    _: [ 'test' ],\n    name: 'oti',\n    male: true,\n    female: 'false',\n    'rain bringer': true,\n    note: 'oti is not real name.',\n    '$0': '/Users/tkg/.nodebrew/current/bin/gulp'\n}</code></pre>\n\n<p>値を指定せずにつけた<code>--male</code>は<code>true</code>となる。</p>\n<p>値を指定すると全て文字列になる。なので、<code>--female=false</code>としてもブーリアンの<code>false</code>にはならず文字列の<code>&#39;false&#39;</code>となる。ここは注意が必要かも。</p>\n<p><code>--&#39;rain bringer&#39;</code>の結果を見るとキーを文字列にすることもできる。</p>\n<p><code>_</code>にタスク名、<code>&#39;$0&#39;</code>にgulpの元ファイルのディレクトリも格納されるようだ。面白そう。</p>\n<p>オプションの有無でif文を作れるというだけでもありがたい。</p>\n<h2 id=\"gulp-\">gulpでの具体的な例</h2>\n<p>もうちょっと具体的な例にすると以下のようなこんな感じ。自分で使ったのがgulpだったので、gulpfile.jsのサンプル。</p>\n<pre title=\"gulpfile.js\"><code data-language=\"javascript\">'use strict';\n\n// load plugins\nvar gulp = require('gulp');\nvar sass = require('gulp-sass');\nvar autoprefix = require('gulp-autoprefixer');\n<mark>var yargs = require('yargs').argv;</mark>\n\n// config\nvar config = {\n    pc: {\n        src: './src/pc/',\n        dest: './release/pc/',\n        browserSupport: ['last 2 versions', 'ie >= 8']\n    },\n    sp: {\n        src: './src/sp/',\n        dest: './release/sp/',\n        browserSupport: ['last 3 versions', 'android >= 2']\n    }\n};\n\n// Sass\ngulp.task('sass', function() {\n    return gulp.src(config[<mark>yargs.device</mark>].src + 'sass/*.scss')\n        .pipe(sass({\n            outputStyle: 'compressed'\n        }))\n        .pipe(autoprefix({\n            browsers: config[<mark>yargs.device</mark>].browserSupport,\n            cascade: false\n        })\n        .pipe(gulp.dest(config[<mark>yargs.device</mark>].dest + 'css'));\n});</code></pre>\n\n<p>で、タスクの実行はこんな感じ。</p>\n<pre title=\"command\"><code data-language=\"shell\">$ gulp sass --device=pc</code></pre>\n\n<p>こうするとPC用のsassファイルをコンパイルしてPC向けのautoprefixerに通してPC用のディレクトリに出力できる。SP用ならオプションを<code>--device=sp</code>とすればよい。</p>\n<p>PC/SP両方を開発してる時って、同じディレクトリ構成にすることが多いと思うんだけど、それなのにsourceとdestinationが違うがためにタスクをたくさん書くことになりがち。PCのSPもまとめて処理するようなタスクにするのはwatchでつらいしそもそも無駄がある。<code>gulp.task(&#39;sass:pc&#39;, ...</code>とか<code>gulp.task(&#39;sass:sp&#39;, ...</code>とかでネームスペースを分けて2倍書くのもめんどうくさい。</p>\n<p>オプションで指定すれようにすれば、仮にディレクトリ構成が違ってもそれを吸収できるconfigを作ればいいだけなのでgulpfile.jsに対するストレスは減る。</p>\n<p>ただデメリットも当然あって、タスクによって<em>オプションをつけるのが前提になる</em>というのが、これはこれでまたストレスになり得る。どんなキーにどんな値が必要なのかをJSファイル内にコメントで書いておくとかしないと1日で忘れる。</p>\n<p>そこで、npm run-scriptを使う。</p>\n<h2 id=\"npm-run-script-\">npm run-scriptでオプション付きのタスクをラップする</h2>\n<p>npm run-scriptがなんであるかは他のブログでいろいろ書かれているので割愛。「npm run-script」で検索すれば良い記事がたくさんでてくるのでぜひ見てみてほしい。</p>\n<p>今回はオプション指定をラップするタスクをnpm run-scriptで作ればよい。</p>\n<p>package.jsonで</p>\n<pre title=\"package.json\"><code data-language=\"json\">\"scripts\": {\n　　\"sass:pc\" : \"gulp sass --device=pc\",\n　　\"sass:sp\" : \"gulp sass --device=sp\"\n}</code></pre>\n\n<p>こうして、コマンドラインでの実行は</p>\n<pre title=\"command\"><code data-language=\"shell\">$ npm run sass:sp</code></pre>\n\n<p>こう。</p>\n<p>結局<code><em>*</em>:sp</code>なのかいと言うことなかれ、npm run-scriptでラップすることでタイプ数自体も少なくなるし、Gruntなのかgulpなのかを気にする必要もなくなる。<code>&quot;preinstall&quot;</code>や<code>&quot;start&quot;</code>なども整えれば、新規に加わったメンバーには「<code>npm i</code>して<code>npm start</code>でオッケ〜」と伝えればよい。細かくタスクを実行したいならpackage.jsonかGruntfile.jsもしくはgulpfile.jsを見てもらえばいいという具合になる。</p>\n<hr>\n\n<p>yargsを使ってnpm run-scriptの良さがわかった。僕はそんなにGrunt/gulpに消耗してはいないつもりだったのだけど、どうやらちゃんと消耗していたらしい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"69":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-10-20T01:32:46","page_id":"69","page_title":"translate属性による翻訳の制御","page_tag":["HTML"],"page_description":"translate属性使ってます？","body":"<p>HTML5の仕様にはtranslate属性というものがある。翻訳ツールに対して指定した要素の内容が翻訳されるべきかを指定できる属性だ。</p>\n<p>code要素の内容を翻訳させたくない時に指定するのがすぐ思いつく用途だろう。JavaScriptやCSSのスニペットが丁寧に日本語訳された時のあのなんとも言えない感じ、どうにかならないかなと思っていた。プログラミングのコードに限らず、コピーライトや商標、日本語に翻訳する必要のないよく使われている英単語などもそうだ。</p>\n<p>しかし機械には何を翻訳すべきかなど推察できるはずもない。そこでウェブページの著者が閲覧者の意図を推察し、あらかじめ何が翻訳されるべきか・されないべきかを指定することができるのがtranslate属性である。</p>\n<p>translate属性には<code>yes</code>、<code>no</code>、<code>&quot;&quot;</code>（\b空文字列）、<code>inherit</code>を指定できる。<code>&quot;&quot;</code>は<code>yes</code>と同じで、翻訳されてよい状態になる。<code>no</code>にすると翻訳させない状態になる。<code>inherit</code>は親要素のtranslate属性の値を継承する値で、かつ初期値でもある。また、translate属性が不正な値だった時も<code>inherit</code>となる。これは簡単な説明で、仕様的には翻訳モードの話などがあるが、それらは各自で調べて欲しい。</p>\n<p><em>translate属性の値は子要素に継承される</em>ので、<code>translate=&quot;no&quot;</code>な要素内で個別に翻訳をenableにしたい場合は、要素ごとに<code>translate=&quot;yes&quot;</code>を指定しなおす必要がある。</p>\n<pre translate=\"noe\"><code data-language=\"html\">&lt;div class=\"snippets\" <mark>translate=\"no\"</mark>&gt;\n  ...\n  &lt;p <mark>translate=\"yes\"</mark>&gt;...&lt;/p&gt;\n  &lt;pre&gt;...&lt;/pre&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;pre&gt;...&lt;/pre&gt;\n  &lt;pre&gt;...&lt;/pre&gt;\n  &lt;pre&gt;...&lt;/pre&gt;\n  &lt;p <mark>translate=\"yes\"</mark>&gt;&lt;/p&gt;\n  ...\n&lt;/div&gt;</code></pre>\n\n<p>このようにすれば、包括要素の<code>translate=&quot;no&quot;</code>によって子要素をすべて翻訳対象から除外しつつ、特定の要素を翻訳対象に戻すことができる。</p>\n<p>だいたいのウェブサイトでは翻訳を除外したい要素ごとに<code>translate=&quot;no&quot;</code>を付与する方が簡単だと思うが、値が継承されることと子要素ごとに上書きできることを覚えておきたい、ということで。</p>\n<h2 id=\"-\">ツールの対応状況</h2>\n<p>では、肝心の対応状況はどうなっているかと思って主要かと思われるツールで調べてみた。デモは以下を用意した。divやpre要素などをいくつか用意して、それぞれに<code>translate=&quot;no&quot;</code>を指定している。</p>\n<p><a href=\"http://dskd.jp/demo/70.html\">Translate Attribute Test</a></p>\n<table>\n  <tr>\n    <th>翻訳ツール</th>\n    <th>translte属性対応</th>\n    <th>確認URL</th>\n  </tr>\n  <tr>\n    <td>Google翻訳（ツールバー版）</td>\n    <td>×</td>\n    <td><a href=\"http://dskd.jp/demo/70.html\">url</a></td>\n  </tr>\n  <tr>\n    <td>Google翻訳（ウェブサービス版）</td>\n    <td>○</td>\n    <td><a href=\"https://translate.google.co.jp/translate?sl=en&tl=ja&js=y&prev=_t&hl=ja&ie=UTF-8&u=http%3A%2F%2Fdskd.jp%2Fdemo%2F70.html&edit-text=&act=url\">url</a></td>\n  </tr>\n  <tr>\n    <td>Yahoo!JAPAN翻訳</td>\n    <td>○</td>\n    <td><a href=\"http://honyaku.yahoo.co.jp/url_header?url=http%3A%2F%2Fdskd.jp%2Fdemo%2F70.html&both=F&ieid=en&oeid=ja&setting=for%3D0\">url</a></td>\n  </tr>\n  <tr>\n    <td>Microsoft Translator（Bing翻訳）</td>\n    <td>○</td>\n    <td><a href=\"http://www.microsofttranslator.com/bv.aspx?from=&to=ja&a=http%3A%2F%2Fdskd.jp%2Fdemo%2F70.html\">url</a></td>\n  </tr>\n  <tr>\n    <td>weblioウェブページ翻訳</td>\n    <td>×</td>\n    <td><a href=\"http://translate.weblio.jp/web/english?lp=EJ&url=http%3A%2F%2Fdskd.jp%2Fdemo%2F70.html&rdt=tl&sentenceStyle=spoken\">url</a></td>\n  </tr>\n  <tr>\n    <td>exite!翻訳</td>\n    <td>×</td>\n    <td><a href=\"http://www.excite-webtl.jp/world/english/web/?wb_url=http%3A%2F%2Fdskd.jp%2Fdemo%2F70.html&wb_lp=ENJA\">url</a></td>\n  </tr>\n</table>\n\n<p>対応しているツールが3つあるなら十分という感じがする。translate属性の入れ子も問題なさそう。Google翻訳がブラウザ搭載のツールバーでは対応していないのがなんだかアレだが……。</p>\n<p>ツールごとにクオーテーションで囲まれていたら翻訳しないとか、&lt;&gt;で囲まれていたら翻訳しないなどの独自の判定基準を設けているものもあるようだ。また、対応しているツールはtranslate属性が何の要素に指定されているかは特に関係なく機能している。</p>\n<h2 id=\"-\">翻訳の可否の是非</h2>\n<p>しかし、翻訳の可否は著者が決めるものなのだろうか。何を翻訳したいかは閲覧者が決めるものだと思っている。同じページでも翻訳したい範囲は目的によっても異なるからだ。プログラミングであればコード部分は翻訳はいらないかもしれないが、コードのコメント部分で英語をチョット勉強したいと思った時、その限りではなくなる。そうするとtranslate属性の指定で翻訳機能に制限をかけるのは、ウェブサイト著者の傲慢にもなり得る気がする。</p>\n<p>ページ全文を翻訳にかけるようなツールではそういうニーズは満たせない。ブラウザの拡張機能で局所的に翻訳のオンオフを指定できるような仕組みに頼らざるを得ないだろう。単語単位で翻訳するものはChromeにあるが、段落単位・選択範囲単位で翻訳オンオフできるものはあるのだろうか。あったとしても全員がそれを使っているわけではないだろうし。</p>\n<p>この記事を書いている時、過去のエントリーのcode要素にすべて<code>translate=&quot;no&quot;</code>を追加しようと思ったけど、この理由でやめることにした。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"71":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-11-07T16:40:29","page_id":"71","page_title":"小さく持つ","page_tag":["note"],"page_description":"宗教上の理由で小さいのが好き","body":"<p>3年くらい使っていた2つ折りの皮財布から、Belloyの<a href=\"http://bellroy.com/wallets/card-pocket#charcoal\">小さい財布</a>に替えた。</p>\n<p>CARD POCKETは厚みのあるカードは15枚まで入れられると謳っている。僕はカードをそんなに持つ方ではないのでPASMOを含めて6枚程度だが、これにお札と小銭を合わせて新しい財布に入れた状態で、先代の2つ折り財布を空にした時より薄いのには驚いた。この時の実寸は10.5cm * 7cm、厚みは2cmにならない程度だった。本当に小さくてびっくりする。お札はZ型の3つ折りにして入れているが、今の所出し入れにそこまで不便は感じてない。</p>\n<p>使っているものがだんだん小さくなっていくというのは自分の人生において多々見受けられる。腕時計は初めて自分で買ったG-SHOCKから比べれば今のはだいぶ小さくなったし、PCもフルタワーデスクトップからスリムタワー、一体型、ノートブックと小さくなっている。服も以前はゆとりのあるものを着ていたが、いつからかタイトめのものを好むようになった。バッグも靴もそうだ。いかに要件を満たしつつより小さいものを探しだせるか、という命題すら感じている。</p>\n<p>僕はどこか「スペースは資産である」という価値観で生きている節があって、スペースを奪うものはあまり好まない。大きい家具や大きい車にあまり興味がわかない。デスクが散らかっていると作業の邪魔なのでいつも片付けていたい。でも良く使うものがすぐ手に届くところにあるとやはり便利なので、デスクは散らかっていく。実益と思想がかみ合っていないので時々ストレスが爆発する。一定期間使っていないものをまとめて捨てたり、今回のように小さいものに買い替えたりして発散している。たまに明らかに実益を損ないすぎる選択をしてしまうこともある。そこそこの値段がした24インチモニターを友人にあげた時はえも言われぬ満足感に魂が高揚したが、数ヶ月後にだいぶ後悔した。数年後に結局モニターをまた買うなどした。</p>\n<p>今回の財布のように、小さくしても生活の質が落ちないものは、買い替えてよかったなと思える。いつしか、最高に便利なものが最高に小さく持ち歩ける時代が来ると期待している。スモールライト？　4次元ポケット？　どういう手法でかはわからないが、スマホが電話帳もカメラも書籍もPCも内包したように、新しいデバイスが既存の物体を何か違うものにコンバートしてまとめるようになるんだと思う。</p>\n<p>思想の究極は何も持たないことなんだけど、それだと何もできないので、小さく持てるやつがいい。</p>\n<hr>\n<p>最近では、開いた時に15インチ2k解像度に広がるモニターを持つ10インチのノートパソコンが欲しいとか思っている。でもたぶんいらない。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"72":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-11-27T01:12:00","page_id":"72","page_title":"Launch dskd v5","page_tag":["note"],"page_description":"ブログをバージョンアップした。","body":"<p>ブログをバージョンアップした。<a href=\"/archives/65.html\">前回</a>が4月だが、やはりMovable Typeによるビルドだと、さくさくと記事を書くというのがやりづらくなっていた。それはMTのせいではなく、原稿をmdファイルで持ちつつgit管理し、それを手でMTにコピペして記事公開し、FTPとローカルを同期させてMT buildなるcommitをするフローに耐えられなかったからである。Movable Typeの強力なテンプレート機能が劣っているわけではない。手元でビルドしたいという欲求に負けたにすぎない。</p>\n<p>今回はいわゆるブログツールのようなものを自作した。一応Node製だけど実行はgulpを使っている。雑に言うとgulp-layoutでmdからHTMLをビルドしている。細かくは、Yamlブロックでブログ構築のメタ情報を記事ごとに設定し、そこからJSONをよしなに作り、それを元に記事一覧やタグ一覧などのページも作っている。Yamlブロックの抽出にはgulp-front-matterとthough2、utilなどを使った。細かい実装は<a href=\"https://github.com/oti/dskd\">GitHubにリポジトリがある</a>。記事構築や一覧ページの管理などがまだ甘い気がするが、これ以上の改良は今回のリニューアル範囲外としてv5をリリースした。</p>\n<p>マークアップも刷新した。またBEMに戻ってみている。マルチクラスのMindBEMding。BEMはSassと相性がいいので&amp;など使ってやってみたが、時間が空いたら読めなくなる感じがすでにしている。レイアウトはなんとなくfloatで横並びを作ったりしている。flexboxでも全然よいのだけど、ブログ来訪者の解析などはほとんどしていないので安パイで逃げたと言えばハイそうですといった感じだ。ほかにも細かい変更はあるが忘れた。手元でビルドして手元でデプロイできるというのが何より嬉しくて今の所満足している。</p>\n<hr>\n<p>Advent Calendarの季節がもうすぐそこまで迫っている。その前に切り替えられてよかった。今年もTKGのを作っているので、興味がある人はぜひ参加してほしい。現在15日までは連続でうまっているが、それ以降がスッカスカである。こちらとしては残りは全部自分で埋める気概はある。TKGポイントを日々ためているので問題ない。問題ないが、やれるなら誰かにやってほしい。卵は高いのだ。たのむ。</p>\n<p><a href=\"http://www.adventar.org/calendars/720\">TKG Advent Calendar 2015</a></p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"73":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-11-30T00:49:15","page_id":"73","page_title":"outlineプロパティで作った枠線は角丸にすることができない","page_tag":["Advent Calendar","CSS"],"page_description":"CSSで出来そうで出来ないことシリーズ1","body":"<p>表題の通り、<code>outline</code>プロパティで作った枠線は角丸にすることができない。すなわち、<code>border-radius</code>で角丸に変形させたボックスに<code>outline</code>を指定すると、角丸でなく角を持ったまま枠線がつくということだ。</p>\n<p>JSFiddleで<code>border-radius</code>と<code>outline</code>を両方指定したデモを作った。黒線が<code>border</code>で水色線が<code>outline</code>。見ればすぐわかる。</p>\n<iframe width=\"100%\" height=\"270\" src=\"http://jsfiddle.net/o_ti/tkrs6eva/embedded/result,css,html/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p><code>border-radius</code>の外側にも角丸の枠を作りたいなら、スプレッドを持つ<code>box-shadow</code>で実現できる。</p>\n<pre data-language=\"html\"><code>&lt;div class=\"box radius boxshadow\"&gt;&lt;/div&gt;</code></pre>\n\n<pre data-language=\"css\"><code>.box{\n    border: 10px solid black;\n    width: 150px;\n    height: 150px;\n    background-color: gold;\n}\n\n.radius{\n    border-radius: 50px;\n}\n\n.boxshadow{\n    box-shadow: 0 0 0 <mark>10px</mark> tomato;\n}</code></pre>\n\n<p><code>box-shadow</code>は4つ目にspread distanceと呼ばれる値を&lt;length&gt;型で指定することができ、これにより影を拡幅できる。影のつき方は<code>border-radius</code>の形状に従うので、上記コードのようにx,yのoffsetとblurを0にしてspread distanceを指定すれば「borderの外側に角丸の枠」ができあがる。</p>\n<iframe width=\"100%\" height=\"450\" src=\"http://jsfiddle.net/o_ti/tkrs6eva/1/embedded/result,css,html/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<h2 id=\"outline-\">outlineにしかできないこともある…わけではなかった</h2>\n<p><code>outline-offset</code>というプロパティがある。<code>outline</code>と併せてこれを指定すると、ボックスと<code>ouline</code>の間に空白を作ることができる。ただしIEは最新版（2015/11/30時点でIE11）でも対応していない。</p>\n<iframe width=\"100%\" height=\"270\" src=\"http://jsfiddle.net/o_ti/tkrs6eva/2/embedded/result,css,html/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<pre data-language=\"css\"><code>.outline{\n    outline: 10px solid skyblue;\n    <mark>outline-offset: 10px;</mark>\n}</code></pre>\n\n<p><code>box-shadow</code>ではborderと自身の間に隙間をつくることはできないので、こういうのは<code>outline-offset</code>しかないかなぁと一瞬思ったけど、擬似要素で完璧に代替できた。またTRBLか。</p>\n<iframe width=\"100%\" height=\"270\" src=\"http://jsfiddle.net/o_ti/tkrs6eva/3/embedded/result,css,html/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p><code>outline-offset</code>は負の値も指定できるので<a href=\"http://jsfiddle.net/o_ti/w86s3fL8/2/\">こういう表現も可能</a>だけど、<a href=\"http://www.w3.org/TR/2015/CR-css-ui-3-20150707/#outline-offset\">2015/7/7時点のCR版</a>だと負の値の指定はat-riskであり、今後どうなるかわからない。</p>\n<p>ついでに、<code>outline-offset</code>はアニメーション可能ということなので<a href=\"http://jsfiddle.net/o_ti/w86s3fL8/3/\">こういうデモ</a>を作ってみた。Google Chrome 46では意図通りに動いたけどFirefox 42ではちょっと使い物にならない挙動だった。IEも<code>outline-offset</code>には未対応だし、このプロパティに頼って凝った表現をするのは現実的に不可能という感じだ。</p>\n<p>そして要素に対してマイナスのoffsetもアニメーションも擬似要素ならIE11でもFirefoxでも余裕で動く。</p>\n<iframe width=\"100%\" height=\"270\" src=\"http://jsfiddle.net/o_ti/tkrs6eva/4/embedded/result,css,html/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>今日も<code>outline</code>プロパティはreset.cssでなかったことにして生きていく僕たちなのであった。</p>\n<p><ins>\n  <aside>outlineプロパティはクライアントの要望で消すことはしばしばあるのだけど、:focusのスタイルを何も用意しないというわけではないです。</aside>\n</ins></p>\n<hr>\n<p>このエントリは半年近く前に下書きをしたもので、某氏が企画した「CSSで出来そうで出来ないことシリーズ」への寄稿として準備していたものだった。話が一向に動かない感じだったので、もう自分で素の記事にしてしまうことにした。しかしただあげるのもつまらないなぁと思って、Adventarを見ていたらちょうど<a href=\"http://www.adventar.org/calendars/57\">CSS Property Advent Calendar 2013</a>が1日空いていた。ということで、このエントリはCSS Property Advent Calendar 2013の20日目として書きました。</p>\n<p>完走おめでとう！</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"74":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-12-01T10:00:00","page_id":"74","page_title":"My Life, My TKG","page_tag":["Advent Calendar","TKG"],"page_description":"僕のTKGオリジン","body":"<p>TKGは子供の頃からたしなんでいたが、家では３日に１回くらいしか認められていなかった。しかも、夕飯でご飯をおかわりした時だけしか卵をもらえなかった。</p>\n<p>我が家のしつけはそこまで厳しい感じではなかったけど、小学校低学年では冷蔵庫を勝手に開けてはいけないルールだった。それもあって、子供の頃はTKGというのは親から許されて食べられるものという認識だった。TKGのためにご飯をたべるなどといった煩悩を持ってはいけなかった。食事は三角食べを指導されたし、おかずが残っているのにTKGを欲するなどという思考は提案されていなかった。TKGが食べられる条件は明快で、おかずとお味噌汁を全て食べきっていて、その上でご飯をおかわりした時だけ。おかずやお味噌汁が残っていたら、それと合わせてご飯を食べなさい、というわけだ。</p>\n<p>覚えてるかぎりの最初のTKGは「残ったご飯をするりと食べきるために卵をかける」という、食べ残しを防ぐためのものだったと思う。当然、子供茶碗に残ったご飯に対して卵１つは多いから、父や兄と卵をわけあった。なので、卵を先に混ぜてからご飯にかけるスタイルだった。</p>\n<p>食べ残さないためのTKGで味をしめた僕は、TKGのためにおかわりをするようになる。高校生にもなれば週に３回TKGなんてのも珍しくなくなった。当然おかわりしたし、腹具合とおかわり分を計算しておかずの食べ方も工夫する術も身につけた。この頃の肉体はTKGに完璧に最適化されていたと言えよう。</p>\n<p>成人して実家を出るとちょうど卵が高騰しはじめた時期でもあってTKG愛はいったん減速するが、結婚後はその穴を埋めるかのように加速する。TKGが好きすぎて、生卵確保のために目玉焼きを作らないでくれと妻に頼んだりもした。一応、卵は一日一個が目安という認識はあった。「そんなになの？」と引かれたりしたけどかまいやしない。TKGが食べたいのだ。</p>\n<p>そんなに卵を食べて大丈夫なのかと人に聞かれることがある。自信を持って言うが、全く問題ない。過去の健康診断では消化器官・血中成分はともにずっとオールAである。これもTKGのおかげなのだ。僕の肉体はTKGによって保たれているのだ。いや、僕だけではない。あなたの肉体もTKGによって品質を保てるということだ。そんなわけで「とれる！健康診断オールA〜TKGで輝く明日へ〜」が発売中です。あ、嘘です発売はしていないです。</p>\n<p><a href=\"https://www.facebook.com/otiext\">Facebook</a>では「今朝はTKGを食べました。」という投稿だけずっと続けている。これからも僕のTKGライフは続く。</p>\n<hr>\n<p>というわけで、<a href=\"http://www.adventar.org/calendars/720\">TKG Advent Calendar 2015</a>の1日目だった。2日目はthleapさんです。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"75":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-12-04T01:57:32","page_id":"75","page_tag":["Advent Calendar","CSS"],"page_description":"ブラウザの@importの解釈の違いを利用したCSSハック回顧会場","page_title":"@importトリックの回顧","body":"<p>“昔々あるところに……。” <a href=\"http://www.adventar.org/calendars/723\">CSS昔話Advent Calendar</a>の4日目。</p>\n<p>CSSの@importルールはCSS内で違うCSSファイルをインポートすることができる機能だが、ブラウザによって宣言の解釈が異なっている時代があった。</p>\n<ul>\n<li>WinIE4は@importルールでurl()を使わないと解釈できない</li>\n<li>MacIE4.5は@importルールでファイルパス指定をシングルクォーテーションで記述しないと解釈できない</li>\n</ul>\n<pre data-language=\"css\"><code>/* WinIE4はurl()でないと解釈できない */\n@import \"/css/style.css\" /* 無効 */\n@import url(\"/css/style.css\") /* 有効 */\n\n/* MacIE4.5ではシングルクォーテーションでないと解釈できない */\n@import url(\"/css/style.css\") /* 無効 */\n@import url('/css/style.css') /* 有効 */</code></pre>\n\n<p>MacIE5では<code>url(&quot;/css/style.css&quot;)</code>は正常にインポートできる。</p>\n<p>CSS2仕様では@importルールでファイルパスを指定する記述は<a href=\"http://www.w3.org/TR/CSS2/cascade.html#at-import\">２つある</a>。</p>\n<pre data-language=\"css\"><code>@import \"style.css\";\n@import url(\"style.css\");</code></pre>\n\n<p>上記のように<code>@import</code>のあとにスペースを置き、クォーテーションでファイルパスを指定するか、<code>url()</code>ファンクションを使ってクォーテーションでファイルパスを指定するかである。クォーテーションは<a href=\"http://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#strings\">CSS2における文字列の定義</a>にしたがって、シングルでもダブルでも良い。</p>\n<p>@importルールでは文字列が指定されると<code>url()</code>で記述されたかのように振る舞うとされている。よって、上記２つの記述は意味上等価となる。</p>\n<p>IE4がダブルクォーテーションだけのファイルパス指定を解釈できないのも、MacIE4.5が<code>url(&quot;file&quot;)</code>を解釈できないのもCSS2仕様に反した挙動だが、ブラウザの実装として未対応なのか実装がミスっていてバグなのかはわからない。</p>\n<h2 id=\"-css-\">ブラウザの解釈に差異があるところ、CSSトリックあり</h2>\n<p>この解釈の違いを利用してブラウザに読み込ませるCSSファイルを制御していた、というのが今回のエントリの主なトピックだ。</p>\n<p>主要ブラウザがIE6の時代がきても、ニュースサイトやコーポレートサイトではシェアの低くなった前述のブラウザにも対応させる必要があった。その頃に僕が関わっていたサイトでは、@importの解釈の違いを利用してブラウザごとに違うCSSファイルを読み込ませる手法が取り入れられていた。</p>\n<p>用意するCSSファイルは3つ。</p>\n<ul>\n<li>すべてのブラウザに読み込まれるimport.css</li>\n<li>IE4では読み込まれず、MacIE4.5とIE5以上で読み込subまれるsub.css</li>\n<li>MacIE4.5では読み込まれず、IE5以上で読み込まれるmain.css</li>\n</ul>\n<p>import.cssは、HTML側でlink要素で指定する。</p>\n<pre data-language=\"html\"><code>&lt;link rel=\"stylesheet\" href=\"/css/import.css\" media=\"screen\"&gt;</code></pre>\n\n<p>sub.cssはimport.css内の@importルールで読み込む。</p>\n<pre data-language=\"css\"><code>/* import.css */\n@import \"/css/sub.css\"; /* url()でないのでIE4で読み込まれない */</code></pre>\n\n<p>main.cssはsub.css内で同じく@importルールで読み込む。</p>\n<pre data-language=\"css\"><code>/* sub.css */\n@import url(\"/css/main.css\"); /* シングルクォーテーションでないのでMac IE4.5で読み込まれない */</code></pre>\n\n<p>これを適用すると各ブラウザで読み込まれるCSSファイルは</p>\n<ul>\n<li>IE4：import.css</li>\n<li>MacIE4.5：import.css + sub.css</li>\n<li>IE5：import.css + sub.css + main.css</li>\n</ul>\n<p>となり、link要素と2段階の@importによって擬似的にブラウザ判定のようなことをしてリソースを制御するというわけだ。</p>\n<p>このテクニックは個人的には「CSSハック」ではなく「CSSトリック」だと思う。@importルールの記述はvalidなのでCSS2仕様に準拠したブラウザでは正常に動作し、準拠しているがゆえに未来のブラウザでも解釈が変わることはない。影響範囲がレガシーブラウザ以外に及ぶことはないので安心である。ということでこのテクニックを「@importトリック」と呼ぶことにしたい。今更感あるけど。</p>\n<h2 id=\"-import-\">なぜ@importトリックが必要だったか</h2>\n<p>当時のレガシーブラウザ向け記述をファイル単位で分離するためもあったかと思うが、レガシーブラウザで<strong>スタイルを当てない</strong>ことが最大の目的だったと思う。僕が関わっていたサイトでは主要ブラウザをメインターゲットにCSSが書かれていたが、IE4ではそれらのスタイルを読み込ませると表示が大きく崩れてしまうとかフリーズしてしまうとかでまともに閲覧できない状況だった。IE4だけに適用させるハックは当時は発見されておらず（おそらく今でも）、セレクタやプロパティーレベルのハックで対応することは不可能だった。そこでIE4ではCSSを当てない状態で閲覧可能にする選択肢が提案された。</p>\n<p>当時の主要ブラウザであったIE6向けのスタイル宣言では、背景画像指定などで多数の画像ファイルを読み込んでいた。スプライト画像の利用がほとんどなかった頃なので、IE4を使っているプラットフォームでは当然それらのリソースファイルのロードも負荷がかかる。そのうえ表示が崩れるわ文字が見切れるわ固まるわで何も良いことがない。であればいっそ、CSSファイルを読み込ませずに軽量なUAのデフォルトスタイルでサイトを見てもらおう、というわけだ。</p>\n<p>この思想は<a href=\"http://inkdesign.jp/notes/universal-ie6/\">@hilokiさんがブログに書いていた</a>Universal IE6 CSSの提案と同じものだ。僕はUniversal IE6 CSSについては知らなかったのだけど、ブログエントリを読んでとても懐かしく感じた。@importトリックを使ってIE4向けにスタイルを当てないという選択はやはり理にかなっていたのだなと嬉しくなった。</p>\n<aside>もちろん僕はその頃は新人だので、その選択をしたのはコーディングリーダーであり僕ではない</aside>\n\n<h2 id=\"-import-\">@importトリックのミソ</h2>\n<p>CSSの@importルールは他の@ルールよりも前に、かつ@charsetルールの後に記述しなければならないと仕様で定められている。@importルールを記述するとそのインポートファイルのスタイル宣言が先に読み込まれるので、ブラウザに解釈されるスタイル宣言はインポートする順番と逆の順になる。</p>\n<ol>\n<li>main.cssのスタイル宣言</li>\n<li>sub.cssのスタイル宣言</li>\n<li>import.cssのスタイル宣言</li>\n</ol>\n<p>main.cssよりもsub.css、sub.cssよりもimport.cssに書いたスタイル宣言がカスケーディングによって上書きされる。IE6向けのスタイル宣言がIE4向けのスタイル宣言で上書きされては本末転倒なので、<em>セレクタの詳細度によって制御する</em>。これが@importハックのミソだ。</p>\n<p>僕が関わっていたサイトではimport.cssにはごく少量のスタイル宣言は書かれていて、そのセレクタはclassやIDを使わないタイプセレクタによる記述だった。sub.cssではもう少し装飾を加えていたと思う。main.cssではclassセレクタやIDセレクタで書かれていたので、IE6ではimport.cssやsub.cssのスタイル宣言の影響を受けない仕組みだった。main.cssの読み込みまで到達できるブラウザのスタイリングを邪魔しないように詳細度の差をうまく使ったこのトリックは非常に賢いと感じる。</p>\n<p>チームに入って最初にこの手法を見た時はその仕組みも詳細度のこともほとんど理解していなかったのだけど、今で言うreset.cssに近い内容がimport.cssにもmain.cssにも書かれているのをコーディングリーダーに質問した時、丁寧に教えてくれたことを覚えている。より多くの人に情報を届けるべく、当時できる最大限のブラウザ対応を使命のように思っている人だった。僕より先に退職したが、今もどこかでウェブ制作に関わっているといいなと思う。</p>\n<p>@importトリックやUniversal IE6 CSSなどを使ってレガシーブラウザではあえてスタイリングしないアプローチは、今後も残っていって欲しいと思っている。新しいUniversal ** CSS現れた時、僕は「より多くの人に情報を届ける」という、ウェブサイトの命題とも言えるそれを思い出すだろう。その言葉は、ウェブの進化の波に飲まれてレガシーとモダンの狭間という果てのない砂漠でカラカラになった僕に、あたたかな雨となって降り注ぐのだ。</p>\n<hr>\n<p>ポエム締め楽しい。5日目は<a href=\"http://www.adventar.org/users/3679\">@kojika17</a>さんです。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"76":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2015-12-08T14:45:18","page_id":"76","page_tag":["Advent Calendar","CSS"],"page_description":"みんなよく使ってたであろうあのスニペット","page_title":"IE6の疑似min-heightは奇跡のCSSトリック","body":"<p>“昔々あるところに……。” <a href=\"http://www.adventar.org/calendars/723\">CSS昔話 Advent Calendar</a>の8日目。</p>\n<p>IE6ではmin-width/max-width/min-height/max-heightのCSSプロパティーに対応していないが、min-heightに限ってはIE6でも疑似的に同じ表現をすることができた。</p>\n<pre data-language=\"css\"><code>.box {\n  min-height: 100px;\n  height: auto <mark>!important</mark>;\n  height: 100px;\n}</code></pre>\n\n<p><a href=\"http://makezine.com/2008/03/21/easiest-crossbrowser-css-minhe/\">Easiest cross-browser CSS min-height\n</a></p>\n<p><code>min-height</code>に対応しているモダンブラウザでは<code>.box</code>は<code>min-height: 100px</code>によって100px以上の高さが保証されるとともに、<code>height: 100px</code>はその前の行の<code>height: auto!important</code>によって上書きされ、コンテンツが100pxに収まらない場合はコンテンツ量に応じたボックスサイズとなる。</p>\n<p>IE6ではまず未対応プロパティーの<code>min-height: 100px</code>は無視される。さらにIE6では、<em>同一の宣言ブロック内に同じプロパティーが指定された上で、先に書かれたプロパティーに<code>!important</code>がついている場合、<code>!important</code>を無視してあとに書いた値で上書きする</em>。つまり<code>height: 100px</code>のみが適用された状態になる。この<code>!important</code>を無視する挙動は<code>height</code>に限らず他のどんなプロパティーでも同じだったと思う。</p>\n<pre data-language=\"css\"><code>/* IE6での解釈 */\n.box {\n  min-height: 100px; /* 無効 */\n  height: auto !important; /* 無効 */\n  height: 100px; /* 有効 */\n}</code></pre>\n\n<p>宣言ブロックが分かれていればIE6でも<code>!important</code>は仕様通りに解釈される。</p>\n<pre data-language=\"css\"><code>/* 宣言ブロックが分かれていればIE6でも期待通り */\n.box {\n  height: auto !important; /* 有効 */\n}\n...\n.box {\n  height: 100px; /* !importantによって上書きされるので100pxの指定は無効になる */\n}\n</code></pre>\n\n<p>CSSの仕様上、<code>height</code>プロパティーに固定値が指定されるとボックスの高さはその値で動かなくなり、コンテンツがその値に収まらなければ<code>overflow: visible</code>の初期値に従い下方向へはみ出して表示される。</p>\n<p>しかしIE6ではそうならない。コンテンツが<code>.box</code>の高さに収まらなくなると、<code>.box</code>の高さに固定値が指定されていたとしてもコンテンツ量に応じて<code>.box</code>の高さが伸びていく。コンテンツが収まるときは<code>.box</code>は100px未満にはならない。あたかも<em><code>min-height</code>と<code>height: auto</code></em>が指定されているかのように振る舞う。</p>\n<p>この「同一宣言ブロック内の同一プロパティーの<code>!important</code>が無視されるバグ」と「<code>height</code>のサイズ算出のバグ」の併せ技によって、IE6とモダンブラウザで同じ表現が可能になるというわけだ。</p>\n<p>これは奇跡の組み合わせだと感じる。ボックスのサイズ算出のバグが起こるのは<code>height</code>だけで、<code>width</code>ではそのようなことは起きなかった。IE6でheightだから可能だったのだ。</p>\n<p>このスニペットが日本のブログで紹介されると瞬く間に広まったが、IE7やIE8でどう解釈されるのかを懸念する人もいくらかいた。IE7以上は<code>min-height</code>に対応しているので、<code>!important</code>がIE6同様に無視されると<code>height: 100px</code>が適用されて<code>min-height</code>の記述が無意味になるのでは？という懸念だ。</p>\n<p>しかし実際はこの<code>!important</code>のバグはIE7で解消され、モダンブラウザと同じく<code>min-height: 100px</code>と<code>height: auto!important</code>が解釈されて期待通りの表示となるのであった。</p>\n<p>CSSの文法としてvalidで、IE6のみにターゲットをしぼり、他のブラウザに影響を与えず、記述も非常にシンプル。このスニペットも「CSSハック」ではなく「CSSトリック」と呼びたい。まるで初めからそこにあったかのような、かつ手のひらにちょうど収まる感じがする、そんな存在感のあるスニペット。今では全く使わなくなったが、あの頃を思い出すと暖かい気持ちになれる気がするのだ。気がするだけだが。</p>\n<hr>\n<p>特定の条件で<code>!important</code>をなかったことにできるIE6ってやっぱりやばかったなと思う。<a href=\"http://geckotang.tumblr.com/post/134334733431/ac2015-css-1\">HTMLコメントを地のテキストに勝手に変換するバグ</a>といい、なかなかの逸材だったと認めざるを得ない。</p>\n<p>CSS昔話 Advent Calendarでは今日以後のエントリでも、IE6のような10年以上前のブラウザ達がいかに奇妙なレンダリングをしていたかを振り返ることができるだろう。CSSハックとして紹介していた頃と決定的に違うのは、それらがモダンブラウザ時代の目線で語られることだ。単なる苦労話の共有におさまらない、時世を反映した回顧録。今後どんな話が出てくるのか、本当に楽しみにしている。</p>\n<p>前回のエントリでは<a href=\"https://twitter.com/neotag/status/672601431472345088\">人</a>の<a href=\"https://twitter.com/neotag/status/672602727004770305\">古傷</a>を<a href=\"https://twitter.com/neotag/status/672602945142153216\">えぐってしまって</a>申し訳ないと思った。だけど人は過去を乗り越えていける……強い生き物だと思うから……。</p>\n<p>9日目は<a href=\"http://www.adventar.org/users/1744\">@ksk1015</a>さんです。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"77":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-01-11T10:38:32","page_id":"77","page_tag":["note"],"page_cover":"/img/lego-wall-e/lego-wall-e-01.jpg","page_description":"30歳でもおもちゃは楽しい","page_title":"レゴ","body":"<p><img src=\"/img/lego-wall-e/lego-wall-e-01.jpg\" alt=\"レゴ WALL・E\"></p>\n<p>去年末に急にレゴブロックがしたくなって、amazonでいろいろ見てるうちに気付いたらいくつか買っていた。</p>\n<p>レゴブロックは小学校中学年頃から高校に入るくらいまでたしなんでいた。その頃は宇宙シリーズ的なものがあって、健全な少年だった僕もターゲットに合致し、それらでたくさん遊んだ記憶がある。ちょっと検索したら<a href=\"http://ameblo.jp/1sw/entry-11709815914.html\">宇宙シリーズの一覧</a>がでてきてかなり興奮した。</p>\n<p>実家を出る時に全てとっておいたはずだが、いつのまにか母親が近所の子供にまるごとゆずっていた。とても悲しい。なぜ母親は子のおもちゃを勝手にどうこうしたりするのか。</p>\n<p>昔のシリーズはもう生産していないので、オークションなどで買うしかない。しかし最近のシリーズも十分魅力的で、せっかくなので2015年発売のものを中心に買った。</p>\n<p><img src=\"/img/lego-wall-e/lego-wall-e-02.jpg\" alt=\"レゴ WALL・Eの前面ボックスを開けた様子\"></p>\n<p>写真は買ったうちのひとつ、映画WALL・Eのレゴ版。手や頭はもちろん、キャタピラ部分もちゃんと動いてすごい。箱を開けたらかなり多くのパーツが入っていて引いた。完成まで4時間くらいかかった。</p>\n<p>最近のラインナップをだらだらと見ていると、レゴは単なる矩形のパーツだけでなく個性的な局面をもったパーツも多く作られるようになっているのに気付いた。90年代の城シリーズやシティーシリーズでもその傾向が多少あったが、年を追うごとにその数は増え、スターウォーズとコラボするようになってさらに加速した感じがする。</p>\n<p>無骨な矩形でなんとかして表現しようとしていたカーブや鋭さは、今や「そのものの形状」のパーツで代用される。目的の形状をより正確に再現ができるようになったと言えばそうなのだけど、それはもはやプラモデルではないか、と思わなくもない。</p>\n<p>それとWALL・Eを作った時に感じたのだけど、あの完成度はバラして違うものを作ろうという気にはなかなかなれないものだった。プリセットのクオリティーが高すぎて想像力をうばわれるのはなんだか不思議だ。説明書にないオリジナルの創作こそ、レゴの醍醐味であると思っているからだ。</p>\n<p>でもレゴがプラモデル度が上がっても別に否定はしない。説明書通りに作るのもレゴの正しい遊び方である。たとえどんなにプラモデルであっても、どこかで飽きて、バラして違うものを作る時が絶対に来る。レゴとはそういうものだと思う。特定の箇所しか使用を許さないパーツであっても、それは自分の想像力が乏しいからそう思うのであって、触っているうちに面白いものを思いつくずだと思う。頭が完全にレゴに飼い馴らされている。</p>\n<p>WALL・Eの他にも大小8セットくらい買い込んだので、パーツの数的にだいぶ豊かになっている。子供の頃は自分ではホイホイ買えなかったので、ホイホイ買える大人になって本当によかった。</p>\n<p>30歳になったのでそろそろ次の段階の遊びもしたいなと思い、通常のレゴシリーズとは別のレゴテクニックというシリーズをひとつ買ってみた。ブルドーザーである。キャタピラである。</p>\n<p>男は黙って重機である。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"78":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-01-17T22:52:17","page_id":"78","page_tag":["Advent Calendar","TKG"],"page_description":"TKG Advent Calendar 2015、25日目","page_title":"TKGスロット","body":"<p>ライフワークで撮りためているTKG写真を、スロットのように揃えて遊べるものを作った。</p>\n<p><a href=\"http://lab.dskd.jp/tkg-slot/\">TKGスロット</a></p>\n<p>「START」を押すとそのリール内で写真がシャッフルする。クリックするとシャッフルが止まる。3つのリールでTKG写真がそろうとハッシュタグつきでツイートできる。そろわなくてもツイートできる。シャッフルしたカウントをとっているので、より少ない回数でそろえられるか遊べる。</p>\n<p>画像は121枚の中から常にランダムでシャッフルする仕様なので、通常のスロットのように目押しすることはきかない。そもそもTKG写真がそろっても何があるわけじゃないから、遊ぶ時はその日の運試し程度に思ってほしい。</p>\n<p>JS的にはpreload.jsを使っている以外は自前で、ピュアJSでやっている。中身は難しくないと思う。<a href=\"https://github.com/oti/tkg-slot\">GitHubにリポジトリーをおいてる</a>ので、何かあったらコメントとかくれるとうれしい。</p>\n<p>このTKGスロットは、TKG Advent Calendar 2015の25日目のポストとして作った。本当ならこの記事をそれにあてるべきだったが、スロットの方を作って体力がつきた。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"79":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-03-15T16:21:25","page_id":"79","page_tag":["CSS"],"page_description":"CSSで出来そうで出来ないことシリーズ2","page_title":"CSSでは背景画像のリピート間隔を任意に設定できない","body":"<p>CSSで背景を指定する時のバリエーションはCSS3になって格段に増えた。グラデーション、サイズ指定、ボックスの各辺を基準にした座標指定、画像の埋め尽くしの種類、ボックスのパディングエッジやボーダーエッジを基準にした配置、そしてそららの複数指定……。</p>\n<p>しかし、多様な表現が可能になったbackgroundプロパティでも、まだできないことがある。それが表題の「背景画像のリピート間隔を任意に設定すること」だ。</p>\n<p>機械任せの間隔調整なら<code>background-repeat: space;</code>という指定で可能ではある。しかしその<a href=\"http://www.w3.org/TR/css3-background/#the-background-repeat\">仕様</a>は、ボックスの最初と最後のエッジに画像が接し、その間を整数個収まるように配置され、あまった隙間は等間隔に配分されるというもの。画像と画像の空白の大きさを思い通りにはできない。</p>\n<p>完璧に計算して繰り返し画像の大きさを調整すればいいが、だったら最初からそういう風に作った一枚画像を配置するほうが早い。また、背景の複数指定で一つずつずらして配置することも一応できるが、この場合プリプロセッサーがないと書くのはしんどいしメンテはしづらい。</p>\n<p>そのようなニーズがあるのかというもそもそも疑問ではある。</p>\n<p>いわゆるCSS3のbackgroundプロパティについては、<a href=\"http://unformedbuilding.com/articles/learn-about-css3-background/\">まとりさんのブログの記事</a>が詳しい。<code>background-repeat: round;</code>や<code>background-clip</code>などがデモつきで細かくわかりやすく解説されている。</p>\n<h2 id=\"-\">もし仕様化されるなら</h2>\n<p><strong>ここからは妄想です</strong></p>\n<p>任意の間隔をあけて繰り返すとなると、<code>background-repeat</code>プロパティではなく別のプロパティが必要になる感じがする。<code>background-gap</code>というラベルでどうだろうか。値として指定可能なのはlength型とpercentage型で良さそう。x方向とy方向で個別に指定できるようにもなるべきだ。初期値は<code>0</code>ぽい。仕様っぽく書くと、こうだ。</p>\n<table>\n    <tr>\n        <th scope=\"col\">Name:</th>\n        <td><code>background-gap</code></td>\n    </tr>\n    <tr>\n        <th scope=\"col\">Value:</th>\n        <td><code>&lt;gap-size&gt; [, &lt;gap-size]&gt;</code><br>\n        <code>&lt;gap-size&gt;</code> = [ &lt;length&gt; | &lt;percentage&gt;]</td>\n    </tr>\n    <tr>\n        <th scope=\"col\">Initial:</th>\n        <td><code>0</code></td>\n    </tr>\n</table>\n\n<p>そして、x方向は10pxの間隔を確保し、y方向では5pxの間隔を確保させて画像を繰り返したい時はこう書く。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.elem{\n  background-image: url(\"path/to/image.png\");\n  background-repeat: repeat;\n  background-gap: 10px 5px;\n}</code></pre>\n\n<p>それっぽい感じになった。</p>\n<p>backgroundショートハンドの時はどこに書く？と思ったけどしょせん仮定の話なのでこのあたりでやめておく。</p>\n<p><strong>妄想おわり</strong></p>\n<p>「CSSで出来そうで出来ないこと」は他にもいくつかある。代替手段を考えるのも楽しいけど、仮に仕様化したらどうなるかを考えるのも楽しい。今回は<code>background-gap</code>というようなプロパティを妄想したが、ショートハンドの指定方法や<code>background-repeat: space;</code>との同時指定、<code>background-size</code>や<code>repeating-*-gradient</code>との兼ね合いなど、既存のプロパティとどう影響するのかを考え出すと妄想が捗ってさらに楽しい。</p>\n<p>しかしプロパティー名と取りうる値のことしか考えてないあたり、所詮素人の遊びだね感が強い。ブラウザの実装見て、どの計算式使えばいいとかまで言えるようになりたい。</p>\n<p>なりたいかな。そうでもないな。</p>\n<hr>\n<p>このエントリは「<a href=\"http://dskd.jp/archives/73.html\">outlineプロパティで作った枠線は角丸にすることができない</a>」と同様に、9ヶ月位前に起こした原稿で一応シリーズの2本目のつもりでいた。企画者の人、元気ですか。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"80":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-03-24T22:15:19","page_id":"80","page_tag":["note"],"page_description":"2016年3月23日の夢","page_title":"夢","body":"<p>新しい職場にいた。</p>\n<p>隣にはその筋で有名な女性エンジニアがいて、DOS/Vマシンをさくさくと組み立てている。</p>\n<p>こっちはターミナルの環境がうまく構築できなくて、その人に聞いたらあっという間にvimであらゆることができるようにしてくれた。</p>\n<p>お昼に外に出ると、道端に止まったタクシーからひよこがたくさん降りてくる。いつのまにか旅館的なロケーションになって、僕は法被を着てひよこを売る人になっていた。</p>\n<p>最初隣にいた女性が客で来て、ひよこを掴んだはしからオス、メス、メス、オス、メスと瞬時に振り分けていく。何者なんだと感心しつつ、そういえば僕ら同い年だよねと話しかけると、何かアゲアゲな国の言葉を返されて、理解できなくて目が覚めた。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"81":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-05-08T22:28:45","page_id":"81","page_tag":["CSS"],"page_description":"結論から言うとCSSだけでは無理","page_title":"CSSだけでviewportに常に対角線を引く","body":"<p>画面に対角線をどうしても引きたい時が人生に一度や二度は来ると思う。</p>\n<p>任意の角度で斜め線を引くなら<code>linear-gradient()</code>で<code>&lt;color-stop&gt;</code>を工夫したり、線だけの要素を<code>transform: rotate()</code>するなど手法はいくつかある。しかしviewportの対角線においては閲覧環境によってその角度が異なるので、角度を動的に算出する必要がある。</p>\n<p>一見望みがありそうな<code>calc()</code>はどうだろうか。平方根や三角関数を直接求めることは2016年4月時点ではできないが、CSS Variablesを利用し、計算結果を保存して別の<code>calc()</code>に渡していけばできるかもしれない。</p>\n<p><img src=\"/img/pure-css-diagonal-line/length-and-angle.png\" alt=\"長方形と対角線の長さと角度の関係\"></p>\n<p>viewportを長方形と見ると、幅が<code>100vw</code>で高さが<code>100vh</code>となる。これで斜辺Cの長さがわかれば、対角線の上側と下側の角度がラジアン単位で求められるので、<code>linear-gradient()</code>の第一引数や<code>rotate()</code>に指定すれば解決だ。</p>\n<p>なのだが、前述した通り平方根を直接求めることはできない。<a href=\"http://izumi-math.jp/M_Kitamura/tikuji/tikuji.htm\">平方根を逐次計算で求めていく方法</a>もあるようだが、<code>100vw</code>の二乗、<code>100vh</code>の二乗とはいったいいくつなのだろうか？　Computed Valueでは実数になっているけど、それはComputed Valueでの話だし、CSS Varで<code>--num: calc(100vw * 100vw);</code>としても、乗算では引数は少なくとも1つが<code>&lt;number&gt;</code>でなければならないのでエラーになる。</p>\n<p>ということで、どう頑張ろうともCSSだけで動的に角度を求めることはできない。</p>\n<h2 id=\"-css-\">でもCSSでできるよ</h2>\n<p>できないのは「動的に角度を求めること」なので、違うアプローチで対角線を表現する。</p>\n<p>具体的には、<code>border</code>プロパティで三角形を作る方法を応用し、直角三角形を重ねて対角線を表現する。</p>\n<p><a href=\"http://s.codepen.io/o_ti/debug/redWXp\">CodePenにデモを作った。</a></p>\n<p>Windowsユーザーの人はtoggle menuボタンを押すとスクロールバーが出てアレするが、それについては後述しているので一旦置いておいてほしい。</p>\n<p>やってることを言葉で詳しく説明すると、</p>\n<ul>\n<li><code>100vw * 100vh</code>の大きさの要素を作る</li>\n<li>その要素は上下の<code>border-width</code>が<code>50vh</code>ずつ、左右の<code>border-width</code>が<code>50vw</code>ずつである</li>\n<li><code>border-left</code>と<code>border-bottom</code>のみに<code>border-color</code>をつける（他は<code>transparent</code>）</li>\n<li>同じような要素をもう一つ重ねて、<code>top</code>と<code>left</code>から<code>1px</code>ずつずらす</li>\n<li>上に重なっている要素の<code>border-color</code>は、コンテンツエリアの背景色と同じにする</li>\n</ul>\n<p>となる。右上から左下への対角線の場合は<code>border-color</code>で色を指定する箇所を変えればよい。</p>\n<p><img src=\"/img/pure-css-diagonal-line/layer-image.png\" alt=\"重なりのイメージ\"></p>\n<p>内容物の幅と高さが共に<code>0</code>で、要素の大きさが<code>border-width</code>分しかない場合、その<code>border-width</code>分の大きさの要素が作られ、隣接する<code>border</code>の間には色の境界線ができる。そして対角に位置する方の「<code>border</code>同士の境界線」と直線で結ばれる。境界線の角度は要素の大きさで決まり、要素の大きさは<code>border-width</code>の合計値で<code>100vw</code>と<code>100vh</code>になっているので、viewportに対角線が引かれているのと同義になる。<a href=\"http://s.codepen.io/o_ti/debug/ONEXbK\">ちょっとわかりやすくなるかもしれないサンプルも作った</a>。ウィンドウサイズをぐいんぐいんすれば対角線が維持される様子がわかると思う。</p>\n<p>デモでは画面に対して<code>position: fixed</code>で固定配置しているので、スタック文脈の解決のためにコンテンツエリアも<code>position: relative</code>する必要があるので注意。</p>\n<p>ウィンドウサイズぐいんぐいんおじさんがデスクトップ版Safariを使っている場合、「ウィンドウサイズをぐいんぐいんすると対角線が追随しないぞ」というバグ報告を絶対にしてくる。なので強制再描画ハックもつけた。これでウィンドウサイズぐいんぐいんおじさんも満足するはずだ。FirefoxやChromeでは強制再描画しなくてもウィンドウサイズぐいんぐいんに対角線が追随するので偉い。</p>\n<h2 id=\"-\">問題点</h2>\n<p>まずブラウザのCSS対応的にViewport Unitが必要というのが絶対条件になる。<a href=\"https://www.w3.org/TR/CSS22/box.html#value-def-border-width\"><code>border-width</code>には<code>&lt;percentage&gt;型</code>は許容されておらず</a>、<code>border-width: 50%</code>のような指定は使えないのでViewport Unitに対応していないブラウザでは諦めざるを得ない。</p>\n<p>また、<code>border-color</code>が単色しか指定できないので、コンテンツの背景も単色でなければならない。背景画像があるとかグラデーションを入れているとかだと対応できない。</p>\n<p>そして一番の問題点は「スクロールバーで隠れる」ことと「Mobile Safari 9のUIで隠れる」ことだ。</p>\n<p>問題の前者は主にWindows環境下での話。ページにスクロールバーが現れていると「見た目の画面幅」と<code>100vw</code>の結果が異なるというやつ。Windowsで<a href=\"http://s.codepen.io/o_ti/debug/redWXp\">デモ</a>のtoggle moreのボタンを押せばコンテンツが増えてスクロールバーが出るので、どういうことかわかると思う。</p>\n<p><img src=\"/img/pure-css-diagonal-line/edge-no-scrollbar.png\" alt=\"Edgeでスクロールバーが表示されていない場合\"></p>\n<p><img src=\"/img/pure-css-diagonal-line/edge-has-scrollbar.png\" alt=\"Edgeでスクロールバーが表示されている場合\"></p>\n<p>問題の後者はiOS環境下で、Mobile Safari 9のUI（戻るボタンとかインテントボタンとかのやつ）がviewportにかぶさって「見た目の画面高」と<code>100vh</code>の結果が異なるというやつ。ロケーションバーの方ではなく画面の下側に出る方のUIが問題になる。ページをスクロールするとそのUIは隠されて見た目と結果が揃うのでやっかい。Mobile Safari 9に依存した問題なのでモバイル版のGoogle Chromeで閲覧すればこの問題は起きないが、それでいいのかと手斧が飛んできたら防げずに死ぬ。</p>\n<p><img src=\"/img/pure-css-diagonal-line/mobile-safari-no-gui.png\" alt=\"Mobile SafariでUIが表示されていない場合\"> <img src=\"/img/pure-css-diagonal-line/mobile-safari-has-gui.png\" alt=\"Mobile SafariでUIが表示されている場合\"></p>\n<p>スクロールバーにしろボタンエリアにしろ、ブラウザUIを除いた表示領域の大きさをCSSだけで動的に得るには限界がある。特に今回は対角線の描画に<code>border</code>を使っているので、<code>%</code>指定ができない点が痛い。</p>\n<p>「CSSでできる」と言いながらも、できているのはOS Xでだけである。それ以上でも以下でもなく、他のことを一切解決できないまま結局死ぬ。</p>\n<hr>\n<h2 id=\"css-\">CSSお絵描きの未来</h2>\n<p>Pure CSSでアートワーク的なことはこれまで様々なものが紹介されてきた。しかし本気でやろうとしたらJavaScriptの補助は必要になってくる。今回のように閲覧環境やコンテンツの状況によって変わる値を必要とする場合はなおさらだ。</p>\n<p>CSSの表現の幅の拡張で、その界隈ではCSS Houdiniに一瞬注目が集まったような気がする。でも結局中ではJavaScriptで実装を書くんだから、JSからは逃れられないのは変わらない。カスタムファンクションとしてCSSだけで動いているように見えるだけだ。</p>\n<p>CSSお絵描きに未来はあるか。あるとすれば高等数学をサポートした<code>calc()</code>が登場するか、ブラウザUIを考慮した表示領域を扱える単位かプロパティーが登場する時だろう。しかしCSS Houdiniが策定されていくとなれば、そちらでやれということにしかならなそうな気もする。未来なさそう。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"82":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-05-09T00:03:22","page_id":"82","page_tag":["CSS"],"page_description":"結論から言うとCSSを知らなすぎて死にたい","page_title":"続・CSSだけでviewportに常に対角線を引く","body":"<p>画面に対角線をどうしても引きたい時が人生に一度や二度は来ると思う。</p>\n<p>そして一旦<a href=\"/archives/81.html\">「できない」と言ったもの</a>がすぐさま他者によって「できる」と言われる時も人生に一度や二度は来る。</p>\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">対角線に線引くの、linear-gradient(to left bottom, ...)とbackground-sizeで良い気がする<br>引き延ばせば勝手に角度変わる</p>&mdash; ながしまきょう<a href=\"https://twitter.com/hail2u_/status/729307350461382658\">2016年5月8日</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>というわけで、できた。<a href=\"http://s.codepen.io/o_ti/debug/WwPEyW\">デモはまたCodePenに置いた。</a></p>\n<p>前エントリーではあれやこれやと能書きを垂れたけど、そんなのほとんど関係なく上記で実現できてしまった。</p>\n<p>デモでは<code>background-size</code>での引き伸ばしではなく、<code>fixed</code>した要素に<code>width: 100%</code>と<code>height: 100%</code>で見た目の表示領域（厳密にはviewportではないのでこう書く）に合わさるようにした。背景を画像にしているので見づらさはあるが、線のみが描画できているのがわかると思う。</p>\n<p>Windowsではスクロールバーが出ていても<code>width: 100%</code>によって表示領域分に角が来る。Mobile Safari 9でもブラウザUI以外の表示領域分に角が来た。さらにデスクトップ版Safariでは、強制再描画のハックがなくても対角線は保たれた。ウィンドウサイズの幅や高さが極端に小さくなると斜線が消えるとかいう面白現象も見られたが、それは見なかったことにした。</p>\n<p>ながしまさんありがとうございました。</p>\n<hr>\n<p>書いてみると、前回はなぜこれに気づかなかったのだろうという感じがする。頭が悪いからだと思う。つらい。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"83":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-10-21T15:57:21","page_id":"83","page_title":"SKAGEN Rungsted Leather Watch","page_tag":["note"],"page_description":"続・なぜ腕時計は増えていくのか","body":"<p>またSKAGENの時計を買った。Rungsted Leather Watchの<a href=\"http://www.skagen.com/us/en/products/rungsted-leather-watch-pdpskw6257p.html\">Black</a>とやら。</p>\n<p>SKAGENは５本目になった。<a href=\"/archives/64.html\">前のBlue Dials</a>を買ってからしばらくあとに、セールでかなり安くなっていたメタルメッシュのモデルを買っていた。それが４本目で、今回のが５本目。</p>\n<p>初めて真円じゃないフェースの時計を買ったと思う。膨らんだ四角形の最外縁にエッジが少し残っていて可愛い。ガラスも円ではなくむちむちの四角形になっていて可愛い。</p>\n<p>ついにSKAGENだけで平日ローテできるようになったのでやっている。お気に入りに包まれて生活するのは満足度が高いので、好きなうちは遠慮なく買っていく。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"84":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-11-18T01:41:42","page_id":"84","page_title":"夢","page_tag":["note"],"page_description":"2016年11月17日の夢","body":"<p>海を見下ろせる中華屋で知り合いと飲んでいた。</p>\n<p>僕はグデグデになっていて、母親が迎えに来た。店を出ようとすると、近くの席に前職の同僚がいるのに気づいた。挨拶をしたり「ウェイウェーイｗｗｗ」と腕とか拳とかをゴツゴツやったりしていたら母親は消えていた。</p>\n<p>突然昼になった。中華屋が入っている建物の廊下を進んでいくと、廊下に前職のデザイナーやエンジニア達がずらりと並んでいた。そんなに人気ある中華屋だったんだ、あれ、朝まで飲んでたんだっけ？などとウェイウェイやった同僚と話しながら歩いて建物の外にでる。</p>\n<p>外に出るとこれまた前職の同僚たちが駐車場でウェイウェイしていて、YO！久しぶりだNA！とか言いながらみんなと写真をとった。その中でも特に仲良くしていたやつらと自撮りのツーショをしまくっていたらビーチボールがとんでもない勢いで飛んできて顔に当たる。痛くなかったけどボールがあたった拍子にiPhoneを落として画面がバキバキに割れた。</p>\n<p>だれかバキバキに割れたおれのiPhone撮ってｗｗｗと言っても誰も撮ってくれなくて目が覚めた。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"85":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-12-22T17:00:00","page_id":"85","page_tag":["Advent Calendar","CSS"],"page_description":"","page_title":"CSS pointer-events 2016","body":"<p><a href=\"http://www.adventar.org/calendars/1347\">今年お世話になったCSSアドベントカレンダー2016、22日目</a></p>\n<p>CSSのpointer-eventsプロパティーにはかねてからお世話になっていた。このプロパティーとの出会いはまぁまぁ古く、<a href=\"https://twitter.com/o_ti/statuses/119283764693172224\">2011年の9月の終わり頃だったもよう</a>。勢い余って雑な検証しかしていない記事も<a href=\"http://dskd.jp/archives/7.html\">書いた</a>。HTML+CSS+JSでブラウザゲームを作っていた頃はあまりのお世話のなりすぎさに何度も感謝している痕跡がツイッターにある。</p>\n<figure>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">pointer-events最高！</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/532079428491157505\">2014年11月11日</a></blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">pointer-eventsが女だったら全力で口説いてるレベル</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/532079739641409536\">2014年11月11日</a></blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">pointer-eventsが人間だったら抱きたい</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/532080592255348737\">2014年11月11日</a></blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">pointer-events: none; に感謝の正拳突き１万回</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/429152592355016704\">2014年1月31日</a></blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">CSSの方のpointer-events: none;には100万回は助けられてるので６億円欲しい</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/570761250243629056\">2015年2月26日</a></blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">親愛なるpointer-events: noneへ。大好きなので付き合ってください。</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/702674615538098177\">2016年2月25日</a></blockquote>\n</figure>\n\n<p>気持ち悪い。</p>\n<p>先日、<a href=\"https://dist.connpass.com/event/44273/\">DIST.13</a>というイベントでLTをして<code>pointer-events</code>プロパティーの凄さと凄くなさを<a href=\"https://github.com/oti/talks/blob/master/2016/1202-DIST.13/smile-css-pointer-events-none.pdf\">少し紹介させてもらってた</a>。持ち時間が5分だったので<code>a</code>要素に対する指定時の挙動に焦点を当てて話した。LTの内容を下記にかいつまんでおく。</p>\n<hr>\n<p><code>pointer-events</code>ではその名の通りポインターデバイス（マウスやタッチ）によるイベントを制御できるCSSプロパティーで、アンカーリンクに<code>pointer-events: none</code>を指定するとイベントをトリガーしなくなる。これを利用して<a href=\"http://jsfiddle.net/o_ti/z50vf5hv/\">ナビゲーションの現在地のリンクを無効にできる</a>。CSS的には<code>:link</code> <code>:visited</code> <code>:hover</code> <code>:active</code> といった擬似クラスが当たらなくなる。</p>\n<p>しかし、キーイベントは通常どおりトリガーされるので、Tabキーで<code>a</code>要素にフォーカスできるし、Enterキーを押せば指定されたURLへ移動できてしまう。リンクの無効化を本気でやるなら普通に<code>a</code>要素をやめるかJavaScriptで制御するしかない。</p>\n<p>また、<code>pointer-events: none</code>を指定した要素の子に<code>pointer-events: auto</code>を指定すると、その子要素はポインターイベントをトリガーするので親要素へイベントのバブリングが起こり、そのさらに親要素へ（最終的にはルート要素まで）イベントは伝わっていく。複雑なイベント管理をしなければならないコンテンツでは<code>pointer-events</code>に頼れない。</p>\n<hr>\n<p><a href=\"https://jsfiddle.net/sfxkhm9e/\"><code>pointer-events: none</code>のイベントの透過とバブリングを確認できるデモ</a>を作ってみた。</p>\n<script async src=\"//jsfiddle.net/sfxkhm9e/embed/result,html,css/\"></script>\n\n<p><code>div</code>には擬似要素でクラス名が出るようにしている。tomato色のボーダーの各<code>div</code>上でクリックすると<code>div:active</code>によりボーダーがpurpleになるはずだが、skyeblue色のボーダーに設定した<code>div.item</code>以外は<code>pointer-events: none</code>が指定されているのでボーダーの色は変わらない。クリックイベントは透過されて最背後<code>body</code>をクリックしていることになるので、<code>body:active</code>のスタイルが適用される。</p>\n<p><code>div.item</code>をクリックした場合は自身のボーダー色が変わるとともに、<code>:active</code>がバブリングして親要素の<code>div</code>のボーダー色も変わり、<code>body</code>の背景色も変わる。</p>\n<p>このように<code>pointer-events: none</code>は自身のマウス/タッチ操作を無効にするだけで、<code>event.stopPropagation()</code>のようにバブリングを止めるわけではないことには注意が必要だと思う。</p>\n<aside>IE11だと<code>:active</code>がバブリングしないが、これは<code>pointer-events</code>プロパティーの有無とは関係がない。Windows OSユーザーは他のブラウザで見て欲しい。</aside>\n\n<hr>\n<h2 id=\"-\">ブラウザ対応とバグ（あるいは仕様）</h2>\n<p><code>pointer-events</code>プロパティーは元はSVGの仕様で、HTMLの要素に対して適用できるのは<code>auto</code>、<code>none</code>、<code>all</code>となっているが、SVG要素向けに<code>fill</code>や<code>stroke</code>などの値もある。</p>\n<p>仕様はこの辺り。</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/pointer-events\">pointer-events - CSS | MDN</a></li>\n<li><a href=\"https://www.w3.org/TR/SVG11/interact.html#PointerEventsProperty\">SVG1.1 Interactivity - 16.6</a></li>\n<li><a href=\"https://wiki.csswg.org/spec/css4-ui#pointer-events\">#pointer-events - css4-ui feature list [CSS Working Group Wiki]</a></li>\n</ul>\n<p><a href=\"http://caniuse.com/#feat=pointer-events\">Can I use…</a>から確認できる情報をまとめると以下の通り。</p>\n<table>\n<thead>\n<tr>\n<th>ブラウザ</th>\n<th>バージョン</th>\n<th>リリース日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Internet Explorer</td>\n<td>11</td>\n<td>2013/10/17</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>12+</td>\n<td>2015/5/30</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>3.6+</td>\n<td>2010/1/21</td>\n</tr>\n<tr>\n<td>Googel Chrome</td>\n<td>4+</td>\n<td>2010/1/25</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>4+</td>\n<td>2009/7/8</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>15+(Blink)</td>\n<td>2013/6/2</td>\n</tr>\n<tr>\n<td>iOS Safari</td>\n<td>3.2+</td>\n<td>2010/4/3</td>\n</tr>\n<tr>\n<td>Android Browser</td>\n<td>2.1+</td>\n<td>2009/10/26</td>\n</tr>\n<tr>\n<td>Android Chrome</td>\n<td>54+</td>\n<td>2016/10/19</td>\n</tr>\n</tbody>\n</table>\n<p>さらにCan I use…では下記がIssueとしてリストアップされている。</p>\n<ol>\n<li>IE9, 10ではJavaScriptで<code>document.documentElement.style.pointerEvents</code>を呼ぶと空文字列を返すのでCSS的には対応しているように見えるが、SVG要素に対してのみの対応なのでHTML要素には使えない。</li>\n<li>IE11では<code>select</code>要素の親に<code>pointer-events: none</code>を指定しても<code>select</code>要素が無効にならないが、<code>select</code>要素に指定すると効く。</li>\n<li><code>overflow: scroll</code>な要素に<code>pointer-events: none</code>を指定すると、Firefoxではスクロール不能になるが、ChromeとIE11ではスクロールバーをクリックすることでスクロールできてしまう。</li>\n<li>IE11とEdgeでは、<code>a</code>要素の<code>display</code>の値が<code>inline-block</code>か<code>block</code>以外だと<code>pointer-events: none</code>を指定しても効かない。</li>\n</ol>\n<p>1については、JavaScriptを使ってブラウザのCSSプロパティーの対応を調べる時の話だ。IE9,10ではHTML要素への<code>pointer-events</code>プロパティー指定は有効ではないが、SVG要素への指定が有効なために<code>documentElement.style</code>に<code>pointerEvents</code>プロパティー（ここではオブジェクトとしての「プロパティー」という意味）が存在する。HTMLの要素にCSSの<code>pointer-events</code>プロパティーを使いたい時に、<code>document.documentElement.style.pointerEvents</code>を用いてブラウザ判定しているとハマるので注意が必要となる。だけど<i>もはや2017年なのでIE10以下のことは忘れていい</i>と思う。</p>\n<p>2については、IE11は<code>select</code>要素の親に<code>pointer-events: none</code>を指定しても子要素の<code>select</code>が通常通りプルダウンが展開できてしまうというもの。らしいのだが、手元で確認したところどうもそうではなかった。</p>\n<p><strong>Windows 10のIE11では<code>select</code>の親に<code>pointer-events: none</code>を指定した場合も期待通りポインターイベントは封じられ、<code>select</code>のプルダウンは展開されなくなった</strong>。しかし、<strong>Windows 8.1のIE11では、<code>select</code>要素自体への指定でもその親への指定でも、両方とも<code>pointer-events: none</code>は効かずにプルダウンが展開できてしまった</strong>。modern.ieからダウンロードできるVirtualBoxのイメージを利用したので、実機では違うのかもしれない。</p>\n<p><a href=\"https://jsfiddle.net/fu9n9k8p/\">Test: <code>pointer-events: none</code> to select element</a></p>\n<script async src=\"//jsfiddle.net/fu9n9k8p/embed/result,html/\"></script>\n\n<p>3については、<code>overflow: scroll</code>などとしたスクロール可能な要素に<code>pointer-events: none</code>を指定すると、その要素上でのスクロール（スクロールバーのクリック、およびマウスホイールでのスクロール）ができなくなるはずだが、ChromeとIE11はできてしまうというもの。らしいのだが、これも現在は状況が異なるようだった。</p>\n<p>手元では<strong>Safari 10.0.1(El Capitan/Sierra)でスクロールバーのクリックでスクロールできてしまうが、ChromeとIE11(Win 8.1/10)はちゃんとクリックできなくなっているのでスクロールもできない</strong>。FirefoxとEdgeは期待通りスクロールバーのクリックも<code>pointer-events: none</code>によって無効化されていた。Macでは環境設定 &gt; 一般 &gt; スクロールバーの表示のところで「常に表示」を選択すれば確認できる。</p>\n<p>しかし、Windows 10だとテキスト選択で下へスクロールができた。これはブラウザは問わないようだった。Windows 8.1以下もできるのかもしれない。</p>\n<aside>El CapitanとSierraのSafari 10はCSS対応的に同じではない場合がある。<a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_24\"><code>direction: rtl</code>なドキュメントではスクロールバーが左側に表示されるようになった</a>が、そうなるのはmacOS 10.12 SierraのSafari 10であってMac OS X 10.11（macOS 10.11.x）のSafari 10ではならない。どういうことなのか説明してほしい。</aside>\n\n<p><a href=\"https://jsfiddle.net/k4tr6cf5/1/\">Test: <code>pointer-evenst: none</code> to scrollable element</a></p>\n<script async src=\"//jsfiddle.net/k4tr6cf5/1/embed/result,html,css/\"></script>\n\n<p>4については、<code>a</code>要素に<code>pointer-events: none</code>を指定する時に<code>display: inline</code>のままだとIE11とEdgeでポインターイベントが無効にならないというもの。Can I use…では<code>inline-block</code>か<code>block</code>以外だとだめみたいな書き方だったが、実際のところは<code>inline</code>以外ならなんでも良いようだった。</p>\n<p><a href=\"https://jsfiddle.net/4gtzvwby/\">Test: <code>pointer-events: none</code> and <code>display: *</code> to <code>a</code> element</a></p>\n<script async src=\"//jsfiddle.net/4gtzvwby/embed/result,html,css/\"></script>\n\n<p>今回はデスクトップブラウザでしか見ていない。モバイル版のChromeやSafariだとさらに状況が複雑かもしれない。</p>\n<h2 id=\"-\">アクセシビリティーの視点</h2>\n<p>DISTで発表しておいて申し訳ないのだけど、個人的にはインタラクティブ要素（リンクやフォームパーツ、デベロッパーがカスタムイベントを定義した要素）を<code>pointer-events: none</code>するのはよろしくないと思っている。制御できるのはポインターデバイスのイベントだけで、キーボードは関係ない。要素のroleも変わらないので、特定の<code>a</code>要素に対して<code>pointer-events: none</code>を指定してもスクリーンリーダーでは通常のリンクとして読み上げられるし、フォーカス後のキーエンターでページ移動することもできる。<code>tabindex</code>属性がついている要素であればインタラクティブ要素でなくてもフォーカスできるので、キー操作の対象になりうる。前述した<a href=\"https://jsfiddle.net/k4tr6cf5/\">スクロールできる要素にpointer-events: noneを指定したデモ</a>で一番右のボックスはフォーカスできるようにしているので、フォーカス後にスペースキーや上下キーでスクロールできるのは試してみればわかる。</p>\n<p>つまり、インタラクティブ要素に<code>pointer-events: none</code>を指定すると「ある種の入力では操作不能で、別の入力では操作可能」になってしまう。これでいいと思う人はそんなにいないはずだ。<code>pointer-events: none</code>で<code>disabled</code>な状態を代替しようとするのが間違っているのだろう。</p>\n<h2 id=\"-\">ではどこで役に立つのか？</h2>\n<p>この世の中には、IE11で<code>form label img</code>なHTMLの時に画像をクリックしても<code>label</code>へイベントがバブリングしないという現実がある。<code>label</code>にバブリングしないと<code>for</code>属性で紐づけた<code>input</code>要素にフォーカスしないし、<a href=\"https://jsfiddle.net/togx7db4/\">ラジオボタンやチェックボックスがトグルできない</a>。</p>\n<script async src=\"//jsfiddle.net/togx7db4/embed/result,html/\"></script>\n\n<p>IE11では、ブラウザUIのパーツをクリックすれば選択できるが、画像の上をクリックしても選択が反映されない。</p>\n<aside>このバグはIE6,7,8にあった有名なもので、IE9,10で治ったと思っていたけどIE11で再発した。<a href=\"http://stackoverflow.com/questions/20198137/image-label-for-input-in-a-form-not-clickable-in-ie11\">IE11が愉快なのは、<code>form</code>要素の中に入れなければ期待通り動作する</a>ところだ。マジでなんなんだお前は。</aside>\n\n<p>この問題は当該箇所の画像に<code>pointer-events: none</code>を指定することで簡単に解決できた。IE8対応をしていた頃はブラウザ分岐やらをしてJSで管理していたけどもうそれはしなくてよくなった。「ポインターイベントを透過させる」ことをうまく利用できた例だと思う。</p>\n<p>また、<code>pointer-events: none</code>はイベントを透過させるので、z軸上で上に被さった要素を「触らせない」ようにできる。込み入った装飾を<code>position: fixed</code>で最前面に表示している時、通常ならかぶさっている要素のせいでz軸上の下側の要素は押せなくなる。そういった装飾要素に<code>pointer-evenst: none</code>をあてればイベントが透過するので下側のコンテンツのリンクなども触れるようになる。</p>\n<p><code>input</code> や <code>select</code> に擬似要素で作ったなんかのアイコンを乗せている時も、そのアイコンに<code>pointer-events: none</code>しておくとクリックの時に邪魔にならない。</p>\n<p>繰り返すが依然としてキーボードのイベントはなかったことにはできないから、使う場合はインタラクティブ要素でないことが望ましいと思う。フォーカスする必要がなく、クリックイベントをトリガーしてしまうが故に邪魔になるタイプには使っていい。インタラクティブ要素でイベントを封じたいなら普通にJavaScriptを書こう。</p>\n<p>込み入った装飾の<code>position: fixed</code>な要素はそもそもfixedをやめろ。</p>\n<hr>\n<p>来年もよろしくお願いいたします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"86":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2016-12-23T22:38:32","page_id":"86","page_tag":["Advent Calendar","note"],"page_description":"2016年のベスト","page_title":"ベストオブ2016","body":"<p>今年もたくさんのことを得たり失ったりした。それらをベストオブと冠して簡潔に記録する。</p>\n<h2 id=\"-\">ベストオブ・失った</h2>\n<p>春から夏にかけて非常につらい時期があった。多くの人と関わりを持つなかで、自分が今までしてきたこと・されてきたことをとにかく再認識しつづける日々だった。10年くらい前にもあったので、10年単位でやるやつなのかもしれないと思ったりした。傷跡を見て痛みは静かに蘇る。</p>\n<h2 id=\"-\">ベストオブ・得た</h2>\n<p>今年はウェブ制作に関する書籍を執筆する機会をいただいた。がんばって書いてます。</p>\n<aside>そういえば来年の春でウェブを仕事にして丸10年になってしまう。10年もやっているのに未だに大したことができなくてつらい。</aside>\n\n<h2 id=\"-\">ベストオブ・マクロスΔ楽曲の歌詞</h2>\n<p>今年はマクロスΔをちゃんと観てて、それの楽曲がすんげー好き。中でも「破滅の純情」はトランペットの伴奏がクールで、ボーカルも落ち着いて歌っているし、歌詞も大人エロい感じでとても良い。</p>\n<blockquote>\n<p> 「守る覚悟でなら地獄を進め」</p>\n</blockquote>\n<p>配信直後、歌詞が刺さりすぎて出社拒否した（してない）</p>\n<h2 id=\"-\">ベストオブ・ツイート</h2>\n<p>今年はこれ。</p>\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">セックス中に「いけたらいくわ」って言われたらめっちゃつらいなって考えてた</p>— 越智 (@o_ti) <a href=\"https://twitter.com/o_ti/status/793630101543919617\">2016年11月2日</a></blockquote></p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<hr>\n<p>2017年はもう少し表に出て行こうと思っている。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"87":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2017-01-03T22:05:10","page_id":"87","page_tag":["CSS"],"page_description":"first-letter擬似要素とfont-feature-settingsで行頭の約物半角を対応してみる。","page_title":"CSSで行頭の約物を半角にする","body":"<p>あけましておめでとうございます。</p>\n<p>約物を半角にするオプションはCSSの<code>font-feature-settings</code>プロパティーに<code>&quot;palt&quot;</code>値を指定すればできる。約物とは文字や数字以外のグリフと考えていい。</p>\n<p>エディトリアルデザインをかじると、約物の一部は全角文字の場合にアキが生じてテキストが間伸びしたように感じることがある。そこで約物半角というオプションを適用すると括弧や句読点のアキが詰まるので、テキストが締まった印象になる。</p>\n<p>本文エリア全体に約物半角をかけたい人たちは一定数いるのだろうが、僕はそれはやりすぎだと思う。かと言って<q>和文フォントはベタ組みで読みやすくなっている</q>という話も諸手を挙げて賛成もできない。グリフによってアキはまちまちだし、個性が出にくい約物はやはり半角にしたほうが見栄えがいいなと思う場面もあるからだ。行頭の括弧などは強くそう思う。というわけでこの記事を書いている。</p>\n<h2 id=\"-\">行頭にマッチするセレクタ</h2>\n<p>CSSには<code>first-letter</code>擬似要素というものがある。要素の最初の文字にマッチするセレクタで、英語圏などで一文字目を大きく装飾する「ドロップキャプス」という表現に使われることを想定して考えられたセレクタだ。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.lede::first-letter {\n  float: left;\n  color: tomato;\n  font-size: 3em;\n}\n</code></pre>\n\n<p>このように記述することで<code>.lede</code>要素の一文字目だけを装飾することができる。この<code>::first-letter</code>を本文エリア内の<code>p</code>要素につければ、段落ごとの一文字目に約物半角のオプションを当てられるようになる。</p>\n<p><code>::first-letter</code>と<code>font-feature-settings: &quot;palt&quot;</code>を組み合わせれば、行頭の一文字目の約物を半角にできるはずだ。</p>\n<pre title=\"CSS\"><code data-language=\"css\">.article-body p::first-letter {\n  <mark>font-feature-settings: \"palt\";</mark>\n}\n</code></pre>\n\n<p>論理的にはこれでいいはずだが、結論から言うとリアルワールドはそう甘くなかった。</p>\n<aside>あまり使われていないので知らない人も多いかもしれないが、<a href=\"https://www.w3.org/TR/REC-CSS1/#the-first-letter-pseudo-element\">first-letter擬似要素はCSS1から使える古参のセレクタ</a>で、CSS2まではコロンは一つだった。<a href=\"https://www.w3.org/TR/css3-selectors/#selectors\">CSS Selectors Level 3でダブルコロンになった</a>。IE8ではダブルコロンの擬似要素を解釈できないのでbeforeやafterにおいてもシングルコロンで記述しなければならないという童話がある。</aside>\n\n<aside>さらに、IE6はfirst-letterとfirst-line擬似要素のコロンはいくつ書いても解釈されるという神話がある。想像してごらん、<code>div::::::first-letter</code>などというバカげたセレクタを解釈するブラウザを。</aside>\n\n<p><a href=\"https://jsfiddle.net/rv0ptzt7/\">次のデモをいろんなブラウザで見て</a>ほしい。</p>\n<script async src=\"//jsfiddle.net/rv0ptzt7/embed/result,html,css/\"></script>\n\n<p>紫borderのボックスの背景には全角1文字幅の方眼を敷いている。<code>::first-letter</code>を赤文字にしつつ約物半角オプションを指定した。ボックスのフォントファミリーは左から游ゴシック、游明朝、ヒラギノ角ゴシックProNを指定した。</p>\n<h2 id=\"-\">ブラウザ検証</h2>\n<p>確認した主要ブラウザのキャプチャを羅列した。</p>\n<p>Google Chrome 55 / Mac OS X 10.11(El Capitan)<br><img src=\"/img/first-letter-palt/chrome55-mac.png\" alt=\"Google Chrome 55はfirst-letterへのfont-feature-settingsが効いていない。\"></p>\n<p>Google Chrome 55 / Windows 10<br><img src=\"/img/first-letter-palt/chrome55-win.png\" alt=\"Google Chrome 55はWindows 10でもMax OS X 10.11(El Capitan)でも効かないようだ。\"></p>\n<p>Firefox 50 / Mac OS X 10.11(El Capitan)<br><img src=\"/img/first-letter-palt/firefox50-mac.png\" alt=\"Firefox 50は期待通り効いているように見えるが＄記号があるとfirst-letter自体が無効になってしまう。\"></p>\n<p>Firefox 50 / Windows 10<br><img src=\"/img/first-letter-palt/firefox50-win.png\" alt=\"Firefox 50で＄があるときにfirst-letterが無効になってしまうのはMacでもWindowsでも同じなようだ。\"></p>\n<p>Safari 10 / Mac OS X 10.11(El Capitan)<br><img src=\"/img/first-letter-palt/safari10.png\" alt=\"Safari 10では約物半角は効いているがその直後との文字間が詰まりすぎて読めない。\"></p>\n<p>IE11 / Windows 10<br><img src=\"/img/first-letter-palt/ie11.png\" alt=\"IE11では約物半角が効いているが、游明朝だとなぜか効かない。\"></p>\n<p>Edge 14/ Windows 10<br><img src=\"/img/first-letter-palt/edge.png\" alt=\"Edge 14では約物半角が効いているが、游フォントとヒラギノで半角になる約物が異なる。\"></p>\n<p>まず気づくのは、<code>::first-letter</code>で行頭の一文字目だけにスタイルを当てているつもりが、約物が一文字目の時はその次の文字も、約物以外が一文字目で約物が二文字目の時はその約物も、約物が一文字目から連続している時はその全てが<code>::first-letter</code>に含まれることだろう。つまりテキストによっては<code>::first-letter</code>の対象が二文字やそれ以上の文字数になるということ。これは<a href=\"https://www.w3.org/TR/css3-selectors/#first-letter\">仕様通り</a>なのでこのこと自体に驚く必要はない。</p>\n<p>ひとつひとつ見ていくと、現状ではまともに使うことができなさそうというのがわかる。</p>\n<p>Chrome 55では<code>::first-letter</code>への<code>font-feature-settings: &quot;palt&quot;</code>が効かない。Windows 10の一番右のボックスでは効いているように見えるがこれは僕の環境でヒラギノがないのでMS Pゴシックが当てられているだけだ。MS Pゴシックはそもそも約物が字詰めされているグリフを持っている。</p>\n<p>Firefox 50では奇妙なことに、<code>＄</code>記号が入ると<code>::first-letter</code>自体が効かなくなる。<code>＄</code>がなければ期待通り動いているだけに惜しい。もしかしたら他の約物でも起こるかもしれない。</p>\n<p>Safari 10では<code>::first-letter</code>の一文字目の約物は半角にならないが、<code>::first-letter</code>に含まれる二文字目以降の約物には半角が効いている。そして<code>::first-letter</code>直後が詰まりすぎている。<code>font-family</code>の宣言をコメントアウトすると詰まりすぎがなくなる。フォントに依るのかもしれない。詰まっていない時のフォントは何が適応されているのかよくわからない。計算値では<code>-webkit-standard</code>というファミリーだった。現象が謎すぎてFirefoxを超えている。段落の一文字目の約物半角が効かないのは<code>::first-letter</code>が対象でなくても同じだった。</p>\n<p>IE11ではどういうわけか分からないが游明朝で<code>::first-letter</code>への<code>font-feature-settings: &quot;palt&quot;</code>が効いていない。</p>\n<p>Edgeでは期待通りに全てできているように見えるが、游フォントとヒラギノで半角になる約物が異なる。</p>\n<table>\n<thead>\n<tr>\n<th>ブラウザ</th>\n<th><code>::first-letter</code>と<code>font-feature-settings: &quot;palt&quot;</code>の対応状況</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Google Chrome 55</td>\n<td>first-letterに約物半角が効かない</td>\n</tr>\n<tr>\n<td>Firefox 50</td>\n<td>約物半角は効くが、＄が入るとおかしい</td>\n</tr>\n<tr>\n<td>Safari 10 (El Capitan)</td>\n<td>一文字目の約物が半角にならない。游ゴ、游明、ヒラギノでfirst-letter直後が詰まりすぎる</td>\n</tr>\n<tr>\n<td>IE11</td>\n<td>游明のfirst-letterに約物半角が効かない</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>游フォントとヒラギノで半角になる約物が異なる</td>\n</tr>\n</tbody>\n</table>\n<p>対応状況としてはカオスだ。<code>＄</code>記号に気をつければFirefoxでは問題なさそう。Edgeも行頭約物半角をかけたい要素はフォントファミリーが統一されているだろうからそこまで問題ではないだろう。ChromeとIE11は約物半角がfirst-letterで効かないだけなのでまだいい。しかしSafariでは読めなくなってしまうのできつい。</p>\n<p>あっさり出来ると思ったけど、すくなくともSafariで詰まりすぎるのが修正されなければ普通には使えない。</p>\n<h2 id=\"-font-face-\">約物半角されたフォントを@font-faceで作る</h2>\n<p>なんとかして対応したいと思って次に試したのが、<code>@font-face</code>ルールを使って約物半角したフォントファミリーを作る方法だ。</p>\n<pre title=\"CSS\"><code data-language=\"css\">@font-face {\n  font-family: \"YuGothicYH\";\n  font-feature-settings: \"palt\";\n  src: local(\"游ゴシック\"),\n    local(\"YuGothic-Medium\"),\n    local(\"Yu Gothic Medium\"),\n    local(\"YuGothic-Regular\"),\n    local(\"YuGothic\"),\n    local(YuGothic);\n}\n\n@font-face {\n  font-family: \"YuMinchoYH\";\n  font-feature-settings: \"palt\";\n  src: local(\"游明朝\"),\n    local(\"YuMincho-Medium\"),\n    local(\"Yu Mincho Medium\"),\n    local(\"YuMincho-Regular\"),\n    local(\"YuMincho\"),\n    local(YuMincho);\n}\n\n@font-face {\n  font-family: \"HiraginoYH\";\n  font-feature-settings: \"palt\";\n  src: local(\"ヒラギノ角ゴシック ProN\"),\n    local(\"Hiragino Kaku Gothic ProN\");\n}\n</code></pre>\n\n<pre title=\"CSS\"><code data-language=\"css\">.test1 p::first-letter {font-family: \"YuGothicYH\";}\n.test2 p::first-letter {font-family: \"YuMinchoYH\";}\n.test3 p::first-letter {font-family: \"HiraginoYH\";}\n</code></pre>\n\n<p>このように<code>@font-face</code>で<code>font-feature-settings: &quot;palt&quot;</code>を指定したフォントファミリーを設定し、それを対象の段落の<code>::first-letter</code>に指定する。</p>\n<p>しかしというかやはりというか、リアルワールドは甘くなかった。</p>\n<script async src=\"//jsfiddle.net/rv0ptzt7/1/embed/result,html,css/\"></script>\n\n<p>主要ブラウザのキャプチャは次の通り。</p>\n<p>Google Chrome 55 / Mac OS X 10.11(El Capitan)<br><img src=\"/img/first-letter-palt/use-font-face/ff-chrome55-mac.png\" alt=\"Google Chrome 55は@font-faceを使ってもfirst-letterへのfont-feature-settingsが効いていない。\"></p>\n<p>Google Chrome 55 / Windows 10<br><img src=\"/img/first-letter-palt/use-font-face/ff-chrome55-win.png\" alt=\"Google Chrome 55は@font-faceを使っても、Windows 10もMax OS X 10.11(El Capitan)も効かない。\"></p>\n<p>Firefox 50 / Mac OS X 10.11(El Capitan)<br><img src=\"/img/first-letter-palt/use-font-face/ff-firefox50-mac.png\" alt=\"Firefox 50は期待通り効いているように見える。しかし@font-faceを使っても＄記号があるとfirst-letter自体が無効になってしまうのは変わらなかった。\"></p>\n<p>Firefox 50 / Windows 10<br><img src=\"/img/first-letter-palt/use-font-face/ff-firefox50-win.png\" alt=\"Firefox 50で＄があるときにfirst-letterが無効になってしまうのはMacでもWindowsでも同じ。\"></p>\n<p>Safari 10 / Mac OS X 10.11(El Capitan)<br><img src=\"/img/first-letter-palt/use-font-face/ff-safari10.png\" alt=\"Safari 10では@font-faceを使うと約物半角が効かなくなってしまった。\"></p>\n<p>IE11 / Windows 10<br><img src=\"/img/first-letter-palt/use-font-face/ff-ie11.png\" alt=\"IE11も@font-faceの約物半角が効かなくなった。\"></p>\n<p>Edge 14/ Windows 10<br><img src=\"/img/first-letter-palt/use-font-face/ff-edge.png\" alt=\"Edge 14も@font-faceの約物半角が効かなくなった。\"></p>\n<p>Chrome 55で<code>::first-letter</code>に<code>font-feature-settings: &quot;palt&quot;</code>が効かないのは<code>@font-face</code>を使っても変わらない。</p>\n<p>Firefox 50では<code>@font-face</code>を使っても<code>＄</code>記号でおかしくなるのは変わらない。</p>\n<p>Safari 10は<code>@font-face</code>を使うと<code>::first-letter</code>の<code>font-feature-settings: &quot;palt&quot;</code>が効かなくなってしまった。</p>\n<p>IE11も効かなくなった。</p>\n<p>Edge 14も効かなくなった。</p>\n<table>\n<thead>\n<tr>\n<th>ブラウザ</th>\n<th><code>@font-face</code>を使った行頭約物半角の対応状況</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Google Chrome 55</td>\n<td>効かない</td>\n</tr>\n<tr>\n<td>Firefox 50</td>\n<td>約物半角は効くが、＄が入るとおかしい</td>\n</tr>\n<tr>\n<td>Safari 10 (El Capitan)</td>\n<td>効かない</td>\n</tr>\n<tr>\n<td>IE11</td>\n<td>効かない</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>効かない</td>\n</tr>\n</tbody>\n</table>\n<p><code>@font-face</code>を使うと使わないときより状況が悪化してしまった。つらい結果としか言いようがない。</p>\n<p>いろいろ確かめるのに疲れてこれ以上の検証はしていないが、約物のグリフが半角な専用フォントを作ってウェブフォントで読み込み、<code>::first-letter</code>に指定する方法がまだ残っている。</p>\n<p><a href=\"https://twitter.com/glatyou\">壁写真活動家の誰か</a>がそんなフォントを2年くらい前から作っている気がする。そろそろリリースされて欲しい。</p>\n<hr>\n<p>落ち着いたらバグ報告しようと思うが、これが<code>::first-letter</code>と<code>font-feature-settings</code>のどちらに起因している問題なのかよくわからない。そもそものフォントファイルに起因している可能性もゼロではなさそう。主要な欧文フォントに差し替えてテストしたら何も問題ないとかだと悲しい。</p>\n<p>今年もよろしくお願いいたします。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"88":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2017-04-21T20:51:34","page_id":"88","page_tag":["note"],"page_description":"仕事とは問題を解決すること","page_title":"バグは出る","body":"<p>しかし直すことができる。</p>\n<p>今はその事実だけを頼りに生きてる。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"89":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2017-08-16T18:58:17","page_id":"89","page_tag":["note"],"page_description":"2017年8月14日の夢","page_title":"夢","body":"<p>服を脱ぐ時に眼鏡が引っかかってテンプルが折れた。</p>\n<p>代わりの眼鏡をいくつか出すと、ひとつはすでに壊れていて、もうひとつは掛けようとしたらテンプルが折れた。最後のひとつは大丈夫だろうかとケースを開けるとパッと見は大丈夫だった。しかしレンズが入ってなかった。</p>\n<p>「大丈夫じゃねーじゃねーか！」と叫んだところで起きた。</p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"90":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2017-09-19T19:16:47","page_id":"90","page_tag":["CSS"],"page_description":"gulpの話はしていません。","page_title":"Sass/SCSSコンパイルできるエディタ","body":"<p>ここで言う「エディタ」とは主にウェブ制作に従事する人が使うソフトウェアを指している。コーダー白書2016の<a href=\"http://wd-flat.com/coder/enquete2016.pdf\">使用エディタのアンケート結果PDF（p.28）</a>を参考にし、彼らがよく使うと思われるエディタと気まぐれで思いついたエディタを中心に調査した。</p>\n<h2 id=\"sublime-text\">Sublime Text</h2>\n<p>Sass BuildというST用のプラグインがあり、<code>Install Package</code>から利用可能。<code>gem install sass</code>が必要。そしてすなわちコンパイラはRuby Sass。<a href=\"http://ozpa-h4.com/2013/03/05/compass-sass-scss-sublime-text/\">おかげでCompassも利用できる</a>が、2017年も後半の後半に差しかかろうというイマドキにあえてCompassを選ぶ理由はない。</p>\n<p><a href=\"https://github.com/jaumefontal/SASS-Build-SublimeText2\">Sass Build</a></p>\n<h2 id=\"atom\">Atom</h2>\n<p>sass-autocompileというAtom用のプラグインがあり、<code>.sass</code>/<code>.scss</code>ファイルの保存時に自動的にコンパイルしてくれる。あらかじめNode.jsとnode-sassをグローバルにインストールしておく必要があるのがひっかかるかもしれない。コンパイラはLibSassなので高速ではある。</p>\n<p><a href=\"https://atom.io/packages/sass-autocompile\">sass-autocompile</a></p>\n<p>Compassを使いたい人はAtomでターミナル実行するプラグインの<a href=\"https://atom.io/packages/atom-terminal-panel\">atom-terminal-panel</a>を使い、自前でコンパイルコマンドを叩く。まぁやりたい人はいないだろう。</p>\n<aside>LibSassはRuby Sassと互換性が完全でないと思っている人もいるかもしれないが、<a href=\"http://sass-compatibility.github.io/#stats\">LibSass 3.3はRuby Sass 3.4と100%対応したと謳っている</a>。</aside>\n\n<h2 id=\"coda-2\">Coda 2</h2>\n<p>Coda Sass Pluginがある。Rubyと<code>gem install sass</code>が必要。つまりRuby Sass。<strong>Coda 2が手元にないのでこれから言うことは憶測だが、<a href=\"http://programmerbox.com/2013-06-17_css_sass_in_coda2/\">出力ファイル名を変更するオプションはないっぽい</a></strong>。</p>\n<p><a href=\"https://github.com/secca/Coda-Sass-Plug-in\">Coda Sass Plugin</a></p>\n<h2 id=\"vim\">Vim</h2>\n<p>sass-compile.vimというのがあった、中身を見るに<code>gem install sass</code>が必要そう。</p>\n<p><a href=\"https://github.com/AtsushiM/sass-compile.vim\">sass-compile.vim</a></p>\n<h2 id=\"visual-studio-code\">Visual Studio Code</h2>\n<p>Configure Task Runnerでtasks.jsonにコンパイルコマンドを記述する。こちらもあらかじめNode.jsとnode-sassをグローバルインストールしておかなくてはならない。</p>\n<p><a href=\"https://vscode-doc-jp.github.io/docs/languages/css.html#Sass%E3%81%A8Less-Less%E3%82%92CSS%E3%81%AB%E5%A4%89%E6%8F%9B\">CSS, Sass and Less | Visual Studio Code Docs - #SassとLessをCSSに変換</a></p>\n<p><ins datetime=\"2017-09-10T13:05+09:00\">と思ったらLive Sass CompilerとEasy Sassという2つのプラグインがあった。どちらもLibSassを元にしたsass.jsがコンパイラとなっている。Requirementsなど特にないので、Electronで作られているところのVisual Studio Codeの内部のNode.jsを使っているもよう。つまりプラグインを入れるだけでSass/SCSSがコンパイルできる。<a href=\"https://twitter.com/masuP9/status/910140584295260160\">ますぴっぴありがとう</a>。</ins></p>\n<p><ins datetime=\"2017-09-10T13:05+09:00\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass\">Live Sass Compiler</a></ins></p>\n<p><ins datetime=\"2017-09-10T13:05+09:00\"><a href=\"https://marketplace.visualstudio.com/items?itemName=spook.easysass\">Easy Sass</a></ins></p>\n<aside><ins datetime=\"2017-09-10T13:05+09:00\">LLVMをJavaScriptにコンパイルできる<a href=\"https://github.com/kripken/emscripten\">emscripten</a>で<a href=\"https://github.com/medialize/sass.js#sassjs\">LibSassをJSに変換したものがsass.js</a>だそうだ。<a href=\"https://github.com/medialize/sass.js/blob/master/docs/getting-started.md#using-sassjs-in-the-browser\">ブラウザで読み込んで利用できる</a>らしい。</ins></aside>\n\n<h2 id=\"webstorm\">WebStorm</h2>\n<p>特にプラグインは必要なく、File Watcherを利用する。しかしコンパイラを自分でインストールしなければならない。メニューからTools -&gt; File Watchersを新規に作成し、ProgramやらArgumentsやらを入力していく。</p>\n<p>初期セットにSassとSCSSがあるが、これらの設定はコンパイラにRuby Sassのパスが指定されている。Ruby Sassがない場合は何らかのエラー文が表示されていると思われる。その時は<code>gem install sass</code>が必要だ。</p>\n<p>LibSassを使うこともできる。<a href=\"https://github.com/sass/libsass/blob/master/docs/build-on-darwin.md\">自分でインストールしてビルドし</a>、そのパスを入力すればいいはずだ。軽くやってみたけどできなかった。お前たちは先に行け。おれは行けたら行く。</p>\n<p><a href=\"https://www.jetbrains.com/help/webstorm/compiling-sass-less-and-scss-to-css.html\">Compiling Sass, Less, and SCSS to CSS - Help | WebStorm</a></p>\n<h2 id=\"brackets\">Brackets</h2>\n<p>brackets-sassと言うプラグインがある。BracketsはNode.jsを同梱しているし、このプラグインにnode-sassが含まれてる（厳密にはプラグインをインストール後のビルド時に<code>npm install node-sass</code>が実行される）ので、プラグインをインストールしただけでSass/SCSSコンパイルが可能になる。<a href=\"https://github.com/jasonsanjose/brackets-sass#sample-bracketsjson-file\">ソースファイルや出力先の設定は<code>.brackets.json</code>で指定する</a>。</p>\n<p><a href=\"https://github.com/jasonsanjose/brackets-sass\">brackets-sass</a></p>\n<p>注意点がひとつ。brackets-sassのstableがコンパイルに利用する<a href=\"https://github.com/jasonsanjose/brackets-sass#compiler-compatibility\">LibSassのバージョンは3.1</a>となっており、<a href=\"http://sass-compatibility.github.io/#stats\">このバージョンのRuby Sassとの互換性は50%を切っている</a>。</p>\n<p>CLIでプラグインのディレクトリに移動して、node-sassをアップデートし、中のLibSassを3.3.6（v3系の最終バージョン）にすればRuby Sassとの互換性も100％になると思われる。しかしその場合のBrackets-sassの動作保証はできない。</p>\n<h2 id=\"dreamweaver\">Dreamweaver</h2>\n<p><a href=\"http://www.adobe.com/jp/products/dreamweaver/features.html\">CC(2017)からCSSプリプロセッサーのサポートが入った</a>ので、Creative Cloud版を使って入れば他は何もしなくてもプロジェクトルートをサイト管理しておけばSass/SCSSコンパイルが可能。</p>\n<p><del>コンパイラが何なのか気になって調べたけど確たる記述はすぐには見つからなかった。ただ<a href=\"https://helpx.adobe.com/jp/dreamweaver/using/css-preprocessors.html\">CompassやBurbonをサポートしていることから、おそらくRuby Sassだろう</a>。</del></p>\n<p><ins datetime=\"2017-09-10T13:05+09:00\">ソフトウェアをインストールしてappファイルの中身をgrepしたところ、<code>/Contents/Resources/gems/rubygems/specifications/sass-3.4.19.gemspec</code>があった。つまりRuby Sassであり、Sassのバージョンは3.4.19となる。<a href=\"https://twitter.com/sou_lab/status/910090655396896768\">そうさんありがとう</a>。やっぱり空は青い。</ins></p>\n<h2 id=\"-\">一覧</h2>\n<table>\n  <thead>\n    <tr>\n      <th>エディター</th>\n      <th>プラグイン</th>\n      <th>コンパイラ</th>\n      <th>あらかじめ必要なこと</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Sublime Text</td>\n      <td>\n        <a href=\"https://github.com/jaumefontal/SASS-Build-SublimeText2\">Sass Build</a>\n      </td>\n      <td>Ruby Sass</td>\n      <td><code>gem install sass</code></td>\n    </tr>\n    <tr>\n      <td>Atom</td>\n      <td>\n        <a href=\"https://atom.io/packages/sass-autocompile\">sass-autocompile</a>\n      </td>\n      <td>LibSass</td>\n      <td><code>npm install node-sass -g</code></td>\n    </tr>\n    <tr>\n      <td>Coda 2</td>\n      <td>\n        <a href=\"https://github.com/secca/Coda-Sass-Plug-in\">Coda Sass Plugin</a>\n      </td>\n      <td>Ruby Sass</td>\n      <td><code>gem install sass</code></td>\n    </tr>\n    <tr>\n      <td>Vim</td>\n      <td>\n        <a href=\"https://github.com/AtsushiM/sass-compile.vim\">sass-compile.vim</a>\n      </td>\n      <td>Ruby Sass</td>\n      <td><code>gem install sass</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">VSCode</td>\n      <td>なし（taks.jsonに記述）</td>\n      <td>LibSass</td>\n      <td><code>npm install node-sass -g</code></td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass\">Live Sass Compiler</a>\n      </td>\n      <td>sass.js（LibSass）</td>\n      <td>なし</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"https://marketplace.visualstudio.com/items?itemName=spook.easysass\">Easy Sass</a>\n      </td>\n      <td>sass.js（LibSass）</td>\n      <td>なし</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">WebStorm</td>\n      <td>なし（File Watcherで実行）</td>\n      <td>Ruby Sass</td>\n      <td>初期テンプレートの場合は<br><code>gem install sass</code></td>\n    </tr>\n    <tr>\n      <td>なし（File Watcherで実行）</td>\n      <td>LibSass</td>\n      <td>LibSassのインストールとビルド</td>\n    </tr>\n    <tr>\n      <td>Brackets</td>\n      <td>\n        <a href=\"https://github.com/jasonsanjose/brackets-sass\">brackets-sass</a>\n      </td>\n      <td>LibSass</td>\n      <td>なし。ただし現時点のプラグインが<br>利用してるLibSassが3.1で古い</td>\n    </tr>\n    <tr>\n      <td>Dreamweaver</td>\n      <td>なし（サイト管理をする）</td>\n      <td>Ruby Sass</td>\n      <td>CC(2017)以上</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>gulp使えやと言う話はここではしていない。</p>\n<p>「とりあえずエディタだけ入れてSassコンパイルしたい！」と思ったら、Dreamweaver CC(2017)しかなさそう。次点でプラグインを入れればコンパイル可能なVisual Studio Code、Bracketsとなるだろう。BracketsでやるとデフォルトのLibSassが古いのはちょっと気になる。それを更新しようとするとNode.jsの環境がいる。他は全て黒い画面の干渉が必要になる。</p>\n<p>他人のよくわからないマシンでとりあえず作業しなければならなくなった時、CLIは本当に障壁になる。人の環境がどうなっているかなんてわからないし、かといって壊すこともできない。</p>\n<p>資料に載せる数行のエビデンスのために調べたけど、意外と面白い状況だった。</p>\n<hr>\n<p>Ruby Sassはもうないでしょうという場合、エディタだけでSass/SCSSコンパイルするのは諦めるしかない。<a href=\"https://www.sassmeister.com/\">Sass Meister</a>を使おう。<del>でもファイル分割していたら全てを諦めよう。今日は空が青い。</del><ins datatime=\"2017-09-10T13:19+09:00\"><a href=\"http://sass.js.org/\">ファイル分割に対応できるウェブサービス</a>があった！　Filesystemタブで追加削除できる！　sass.js最高！　梨うまい！</ins></p>\n<hr>\n<p><ins datetime=\"2017-09-10T13:05+09:00\">2017-09-10、VS CodeのプラグインとDreamweaverの内部のSassのことを追記。それに伴い本文と一覧表を変更した。詳細な差分は<a href=\"https://github.com/oti/dskd/commit/9d5a5c0061be8359d5e2fd6b054f3fcacefccc57\">GitHub</a>を参照のこと。</ins></p>\n","updatedAt":"2017-12-19T17:03:44.000Z"},"91":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2017-12-20T03:02:51","page_id":"91","page_tag":["Advent Calendar","CSS","SVG"],"page_description":"SVGのpointer-eventsはすごいと思ったけどブラウザ対応に「？」がある","page_title":"SVG pointer-events 2017","body":"<p><a href=\"https://adventar.org/calendars/2475\">SVG Advent Calendar 2017</a>の20日目。</p>\n<p><code>pointer-events: none</code>については<a href=\"http://dskd.jp/archives/7.html\">過去</a>に<a href=\"http://dskd.jp/archives/85.html\">書いた</a>とおり、なかなかどうして、好きすぎて困っている。</p>\n<p>また、<code>pointer-events</code>プロパティーが大好きなみなさんなら、これがSVG由来のものだというのは当然ご存知だろう。HTMLの要素に指定が有効な値は実質<code>auto</code>と<code>none</code>だけだが、SVGの要素についてはその限りではない。<a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/pointer-events\">MDNを見ると以下の値がある</a>。</p>\n<ul>\n<li>auto</li>\n<li>none</li>\n<li>fill</li>\n<li>stroke</li>\n<li>all</li>\n<li>painted</li>\n<li>visibile</li>\n<li>visibleFill</li>\n<li>visibleStroke</li>\n<li>visiblePainted</li>\n</ul>\n<p>これらの値によってポインターイベントのターゲットにどのように変化するのか、ひとまず<code>pointer-events</code>プロパティーに関わるSVGの特徴を理解する必要がある。</p>\n<h2 id=\"-\">塗りと線</h2>\n<p>SVGの図形は座標・方向・向かう強さで表すことができ、それはベクターツールで言うところの「アンカーポイント」と「ハンドルの向き」「ハンドルの長さ」である。アンカーポイントとハンドルが描く軌跡がパスであり、SVGに変換した際に図形の輪郭となる。</p>\n<p>ベクターツールにおいて、繋がったアンカーポイントの連続は「線」と呼ばれる。線の始点と終点を結んだ領域は「塗り」と呼ばれる。それをSVGに変換すると「塗り」は<code>fill</code>、「線」は<code>stroke</code>となる。</p>\n<h2 id=\"-\">可視性</h2>\n<p>SVGは<code>visibility</code>プロパティーで可視か不可視かを指定できる。CSSと同じく、<code>visible</code>か<code>hidden</code>を値に持つ。<code>visibility = visible</code>の時はSVGは可視で、<code>visibility = hidden</code>の時は不可視となる。</p>\n<h2 id=\"-\">塗りと線に指定できる値</h2>\n<p>概ね<a href=\"https://www.w3.org/TR/css3-color/#valuea-def-color\">CSSの&lt;color&gt;型</a>と同じ。厳密には<a href=\"https://www.w3.org/TR/SVG2/painting.html#SpecifyingPaint\">&lt;paint&gt;型</a>なのだが、実質的に&lt;color&gt;型という解釈でいいと思う。</p>\n<p><a href=\"https://www.w3.org/2011/07/29-svg-minutes.html#item02\">https://www.w3.org/2011/07/29-svg-minutes.html#item02</a>\n<a href=\"https://triple-underscore.github.io/SVG11/types.html#DataTypeColor\">https://triple-underscore.github.io/SVG11/types.html#DataTypeColor</a></p>\n<h2 id=\"svg-\">SVGの装飾方法</h2>\n<p>SVGにスタイルを当てる方法はだいたい3つある。フィルターやマスクなど考えるとその限りではないが、まぁだいたい3つでいいと思う。</p>\n<pre><code>&lt;!-- style属性での指定 --&gt;\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 100 100&quot;&gt;\n  &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;30&quot; style=&quot;fill: gold; stroke: black; stroke-width: 2&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><pre><code>&lt;!-- style要素での指定 --&gt;\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 100 100&quot;&gt;\n  &lt;style&gt;\n    circle {\n      fill: gold;\n      stroke: black;\n      stroke-width: 2\n    }\n  &lt;/style&gt;\n  &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;30&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><pre><code>&lt;!-- プレゼンテーション属性での指定 --&gt;\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 100 100&quot;&gt;\n  &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;30&quot; fill=&quot;gold&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><p>（大まかに言って）このいずれかの装飾で、可視性/塗り/線を設定する。</p>\n<h2 id=\"-\">早見表</h2>\n<p>そして<code>pointer-events</code>プロパティーと可視性/塗り/線の関係は次の通りとなる。</p>\n<table>\n<thead>\n<tr>\n<th>pointer-events値\\依存する項目</th>\n<th>visibility値</th>\n<th>fill値</th>\n<th>stroke値</th>\n<th>簡単な解説</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td><code>visible</code></td>\n<td><code>none</code>以外</td>\n<td><code>none</code>以外</td>\n<td><code>visiblePainted</code>と同じ</td>\n</tr>\n<tr>\n<td>none</td>\n<td>--</td>\n<td>--</td>\n<td>--</td>\n<td>何もターゲットにならない</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>--</td>\n<td>--</td>\n<td>--</td>\n<td>塗り部分がターゲット</td>\n</tr>\n<tr>\n<td>stroke</td>\n<td>--</td>\n<td>--</td>\n<td>--</td>\n<td>線部分がターゲット</td>\n</tr>\n<tr>\n<td>all</td>\n<td>--</td>\n<td>--</td>\n<td>--</td>\n<td>塗りと線がターゲットになる</td>\n</tr>\n<tr>\n<td>painted</td>\n<td>--</td>\n<td><code>none</code>以外</td>\n<td><code>none</code>以外</td>\n<td>値が<code>none</code>以外なら塗りも線もターゲット</td>\n</tr>\n<tr>\n<td>visible</td>\n<td><code>visible</code></td>\n<td>--</td>\n<td>--</td>\n<td>可視であれば<code>none</code>値でも塗りと線がターゲットになる</td>\n</tr>\n<tr>\n<td>visibleFill</td>\n<td><code>visible</code></td>\n<td>--</td>\n<td>--</td>\n<td>可視であれば<code>none</code>値でも塗りがターゲット</td>\n</tr>\n<tr>\n<td>visibleStroke</td>\n<td><code>visible</code></td>\n<td>--</td>\n<td>--</td>\n<td>可視であれば<code>none</code>値でも線がターゲット</td>\n</tr>\n<tr>\n<td>visiblePainted</td>\n<td><code>visible</code></td>\n<td><code>none</code>以外</td>\n<td><code>none</code>以外</td>\n<td>可視でかつ<code>none</code>値以外の塗りと線がターゲット</td>\n</tr>\n</tbody>\n</table>\n<p><code>pointer-events</code>に指定できる値は他に<code>inherit</code>があるが、これはただの継承なので表には含めない。</p>\n<p>こう見ると、だいたいは<code>fill</code>や<code>stroke</code>の値には左右されないが、 <code>painted</code> / <code>visiblePainted</code>だと<code>none</code>以外でないといけなくなることがわかる。</p>\n<h2 id=\"none-transparent-opacity-visibility\">noneとtransparentとopacityとvisibility</h2>\n<p><code>visibility:hidden</code>以外でも「見えない」指定は可能だ。色指定なしの<code>none</code>、透明色指定の<code>transparent</code>、全透過の<code>opacity: 0</code>がある。</p>\n<p>しかし仕様によれば<code>transparent</code>も<code>opacity</code>も<code>pointer-events</code>プロパティーの挙動には影響を与えない。影響を与えるのは「色指定あるなし」と「可視性あるなし」のみということだ。</p>\n<h2 id=\"-\">実食</h2>\n<p>仕様をあれこれ説明してもしっくりこないと思うのでさっさと触っていこうと思う。SVGでfillとstrokeが色付きと<code>none</code>の4パターンのpath要素を用意し、プルダウンで<code>pointer-events</code>、<code>visibility</code>、<code>opacity</code>を切り替えられるサンプルを作った。path要素あたりをクリックし、イベントが制限されていなければ黄色いエリアに「Clicked!」と文字が出る（その後消える）。</p>\n<p>実装ロジックとしては、プルダウンを選択するとそれぞれのプレゼンテーション属性値が各SVGに書き込まれる仕組みになっている。</p>\n<script async src=\"https://jsfiddle.net/maumqdrv/1/embed/\"></script>\n\n<p>触ってみると気づくことがある。「<code>fill = none</code>のみ」とか「<code>stroke = none</code>のみ」をターゲットにした<code>pointer-events</code>の制御ができない。これは仕様にないので仕方がない。しかし次の3点は仕様と違っておかしい。</p>\n<ul>\n<li><code>stroke</code>でもfill=noneなSVGをクリックでイベントが発火する</li>\n<li><code>fill</code>でもstroke=noneなSVGをクリックでイベントが発火する</li>\n<li><code>painted</code>でもfillもstrokeも<code>none</code>なSVGでクリックイベントが発火する</li>\n</ul>\n<p>仕様とはいったい？　特に3つ目は不思議な動きをする。これに<code>visibility = hidden</code>にしてみると、期待通り<code>fill = none / stroke = none</code>なSVGはクリックが発火しなくなるのだ。<code>painted</code>は<code>visibility</code>の値で挙動が変わらないはず。手元のGoogle Chrome 63、Safari 11.0、Firefox 57.0.1で確認したがいずれも同じだった。</p>\n<p>他の値の組み合わせはどうやら仕様通りに実装されていそうだった。全部のブラウザでは見ていないので何か差があるかもしれない。</p>\n<p>誰か何か知っていることがあったら<a href=\"https://twitter.com/o_ti\">教えてください</a>。</p>\n<hr>\n<p>SVG怖くなってきた。</p>\n","updatedAt":"2017-12-21T01:38:02.000Z"},"92":{"layout":"./src/jade/_post.jade","page_type":"post","page_datetime":"2017-12-21T12:00:00","page_id":"92","page_tag":["Advent Calendar","note"],"page_description":"どっちかというと充実した一年だったんだと思う","page_title":"ベストオブ2017","body":"<p><a href=\"https://adventar.org/calendars/2469\">2017 Advent Calendat 2017</a>の21日目。</p>\n<p>一年早いもので、<a href=\"http://dskd.jp/archives/86.html\">去年のベストオブ2016の記事</a>から5つしかブログを書いていないのにもう年末だ。6つ目がこの記事である。</p>\n<p>去年がこの10年で一番のゲキエモだった。エモ過ぎてあの記事を読み返すたびにしんどいが、最後のベストツイートを見ると元気になるので我ながらいいお口直しを入れたもんだと思う。</p>\n<p>さて2017年。12月も下旬を迎えてみれば、今年もじゅうぶんにエモみあるアレコレがハプンしたりしなかったりした。そんなわけでいくつか取り上げてみたいと思う。</p>\n<h2 id=\"-\">共著</h2>\n<p><a href=\"https://www.amazon.co.jp/dp/4797389656/\">いちばんよくわかるWebデザインの基本 きちんと入門</a></p>\n<p>やったのは去年。出たのは今年。おかげさまで3刷いった。ありがとうございます！　書くのはどう考えても大変なので書いてる時のことについては特に言うことはない。深夜に食べるデニーズのパンケーキで明らかに太ったと言う事実だけ残っている。</p>\n<h2 id=\"-\">登壇</h2>\n<p>かつては僕も憧れた<a href=\"http://cssnite.jp/lp/lp54/\">CSS Nite</a>に登壇した。参加していただいた皆様ありがとうございます！　<a href=\"https://twitter.com/kojika17\">同僚の久保</a>とのペア登壇で「CSSをちゃんと書くためには？」というテーマで久保は素のCSS、僕はSassでちゃんとやる手法について話した。発表準備はどう考えても大変なので、それについては特に言うことはない。確証を得るために調べて、<a href=\"http://dskd.jp/archives/90.html\">そのついでに書いた記事</a>は本番では触れることなく終わった。該当するスライドも10数秒で送ったと思う。一瞬しか見えないものに数時間かける。制作って感じがした。</p>\n<h2 id=\"bem\">BEM</h2>\n<p>年の半ばから数ヶ月ほど、サービスのモックアップをマークアップする仕事をしていた。そこではHTMLをBEMっていたのだけど、やってくうちに「今の自分のBEMではよくない」と気付き始めて、そこで折良くダーシマパイセンが書いた<a href=\"https://necomesi.jp/blog/tsmd/posts/152\">細かすぎるけど伝わってほしい私的BEMプラクティス30（ぐらい）</a>という記事に大いに膝を打った。細かすぎるが僕には伝わりまくったので、以来これで書いている。</p>\n<h2 id=\"-\">テキーラ</h2>\n<p>どういうことかわからないが、今年はテキーラをとにかくたくさん飲んだ。改めてお伝えしたい。テキーラは罰ゲームでパカパカ空けていいものではない。酒に強いからといってパカパカ空けていいわけでもない。命の取り合いになるぞ。</p>\n<p>今年の最高記録はいまのところDAYで21杯だった。来年は1杯も飲まないようにしたいが、その前に年末が怖い。更新したらおそらく死ぬ。</p>\n<h2 id=\"-\">風貌</h2>\n<p>夏あたりから徐々にイカつくなった。外見は変わっても中身は同じなので安心してほしい。</p>\n<h2 id=\"-\">キレ</h2>\n<p>イベントにたくさん参加したと思う。毎月どこかに行っていた。参加したイベントで苦言を呈しすぎたせいでいつもどこかでキレていると思われているっぽい。当然理由があってキレてるんだけど、\nそういうのを積極的に見たい人はほぼいないと思うので来年は気をつけたい。</p>\n<h2 id=\"-\">中本</h2>\n<p>蒙古タンメン中本。去年から「野菜抜き」オプションにハマって、そればっか食べている。<a href=\"https://twitter.com/i/moments/939566486321971200\">ここにまとめてある</a>ので「ヤ抜」に興味を持った方は試してみてほしい。野菜がなくても中本は美味い。ヤ抜できる店舗とできない店舗があるので注意。野菜があっても中本は美味い。</p>\n<h2 id=\"tkg\">TKG</h2>\n<p>集計していないけど今年もまあまぁ食べた。TKG食べました報告はFacebookでしかしていなくて、インスタでやってたら何か違ったかな〜と思うことがたまにある。</p>\n<p>Facebookで新しくフレンドになった人は、年末に<a href=\"https://www.facebook.com/otiext/videos/752582001601255/\">自動生成されるまとめ動画</a>にだいたい釣られる傾向にあるのでおもしろい。</p>\n<h2 id=\"-\">ダーツ</h2>\n<p>じゃっかん戻ってきた気がする。打てるときはライブRt15くらいのスコアが出る。打てない時はRt5とか。ならすとRt10に届いてないぐらいだろうか。引っ越してからホームショップが変わり、ガチでやる相手がいないので寂しい。投げ友探してます。</p>\n<h2 id=\"-\">タイポ</h2>\n<p><a href=\"https://twitter.com/typo_ti\">たいぽち</a>というのを作った。自分のタイポをスクショする趣味があるのでそれを抜粋している。モーメントでやれという声が今聞こえた気がするがいったん無視する。</p>\n<hr>\n<h2 id=\"-\">今年のベスト</h2>\n<p>人間関係に尽きると思う。イベントにあちこち出たおかげで頻繁に顔をあわせる人が増えた。一昨年まではイツメンとだらだら飲むくらいが関の山だったのだけど、仲良くなった人も増えたので、そうじゃない遊び方ができるようになった。すごく楽しい。</p>\n<p>今まではわりと一人が楽だなぁと思うことの方が多かった。今年は誰かと一緒にいたいと思うことが多かった。分布でみるとちょっと差ができたくらいでどっちつかずのままでいる。たまに「誰かといつつ一人でいたい」というこじらせた感じになる時があり、それに適合する人がパートナーであったらと思ったりする。</p>\n<p>猫を飼えばいいのかなと思う。猫アレルギーなのでつらい。</p>\n<hr>\n<p>振り返るとなんだかんだでいろいろやっていた。去年立てた今年の目標はそれなりに実践できたと思う。来年はいかに引きこもれるかを目標にするつもりでる。</p>\n<p>来年もよろしくお願いします。</p>\n","updatedAt":"2017-12-21T02:49:52.000Z"}}